<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[破船之家]]></title>
  <link href="http://BeyondVincent.github.io/atom.xml" rel="self"/>
  <link href="http://BeyondVincent.github.io/"/>
  <updated>2013-10-14T21:29:10+08:00</updated>
  <id>http://BeyondVincent.github.io/</id>
  <author>
    <name><![CDATA[破船(BeyondVincent)]]></name>
    <email><![CDATA[beyondvincent@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sprite Kit教程：初学者 3]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/10/12/114-spritekit-tutorial-for-beginners-3/"/>
    <updated>2013-10-12T00:06:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/10/12/114-spritekit-tutorial-for-beginners-3</id>
    <content type="html"><![CDATA[<p><img src="http://BeyondVincent.github.io/images/2013/09/18.png"></p>

<!--more-->


<p>注：本文译自<a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners"><code>Sprite Kit Tutorial for Beginners</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li>Sprite Kit的优点和缺点</li>
<li>Sprite Kit vs Cocos2D-iPhone vs Cocos2D-X vs Unity</li>
<li>Hello, Sprite Kit!</li>
<li>横屏显示</li>
<li>移动怪兽</li>
<li>发射炮弹</li>
<li><a href="#pzjcgs">碰撞检测和物理特性: 概述</a></li>
<li><a href="#pzjcsx">碰撞检测和物理特性: 实现</a></li>
<li><a href="#sw">收尾</a></li>
<li><a href="#hqhc">何去何从?</a></li>
</ul>


<h3><a id="pzjcgs"></a>碰撞检测和物理特性: 概述</h3>

<p>至此我们已经可以让炮弹任意的发射了——现在我们要让忍者利用炮弹来消灭这些怪物。下面就添加一些代码来给炮弹与怪物相交做检测。</p>

<p>Sprite Kit内置了一个物理引擎，这非常的棒！该物理引擎不仅可以模拟现实运动，还能进行碰撞检测。</p>

<p>下面我们就在游戏中使用Sprite Kit的物理引擎来检测炮弹与怪物的碰撞。首先，我们来看看需要做些神马事情：</p>

<ul>
<li><code>物理世界的配置</code>。物理世界是一个模拟的空间，用来进行物理计算。默认情况下，在场景(scene)中已经创建好了一个，我们可以对其做一些属性配置，例如重力感应。</li>
<li><code>为精灵(sprite)创建对应的物体(physics bodies)</code>。在Sprite Kit中，为了碰撞检测，我们可以为每个精灵创建一个相应的形状，并设置一些属性,这就称为<code>物体(physics body)</code>。注意：图文的形状不一定跟精灵的外形一模一样。一般情况，这个形状都是简单的、大概的(而不用精确到像素级别)——毕竟这已经足以够大多数游戏使用了。</li>
<li><code>将精灵分类</code>。在物体(physics body)上可以设置的一个属性是<code>category</code>，该属性是一个位掩码(bitmask)。通过该属性可以将精灵分类。在本文的游戏中，有两个类别——一类是炮弹，另一类则是怪物。设置之后，当两种物体相互碰撞时，就可以很容易的通过类别对精灵做出相应的处理。</li>
<li><code>设置一个contact(触点) delegate</code>。还记得上面提到的物理世界吗？我们可以在物理世界上设置一个<code>contact delegate</code>，通过该delegate，当两个物体碰撞时，可以收到通知。收到通知后，我们可以通过代码检查物体的类别，如果是怪物和炮弹，那么就做出相应的动作！</li>
</ul>


<p>上面大致介绍了一下游戏策略，下面就来看看如何实现！</p>

<h3><a id="pzjcsx"></a>碰撞检测和物理特性: 实现</h3>

<p>首先在<code>MyScene.m</code>文件顶部添加如下两个常量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">uint32_t</span> <span class="n">projectileCategory</span>     <span class="o">=</span>  <span class="mh">0x1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">uint32_t</span> <span class="n">monsterCategory</span>        <span class="o">=</span>  <span class="mh">0x1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面设置了两个类别，记住需要用位(bit)的方式表达——一个用于炮弹，另一个则是怪物。</p>

<p><code>注意:</code>看到上面的语法你可能感到奇怪。在Sprite Kit中category是一个32位整数，当做一个位掩码(bitmask)。这种表达方法比较奇特：在一个32位整数中的每一位表示一种类别(因此最多也就只能有32类)。在这里，第一位表示炮弹，下一位表示怪兽。</p>

<p>接着，在<code>initWithSize</code>中，将下面的代码添加到位置：添加player到场景涉及代码的后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">physicsWorld</span><span class="p">.</span><span class="n">gravity</span> <span class="o">=</span> <span class="n">CGVectorMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">physicsWorld</span><span class="p">.</span><span class="n">contactDelegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码将物理世界的重力感应设置为0，并将场景设置位物理世界的代理（当有两个物体碰撞时，会受到通知）。</p>

<p>在<code>addMonster</code>方法中，将如下代码添加创建怪兽相关代码后面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">monster</span><span class="p">.</span><span class="n">physicsBody</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKPhysicsBody</span> <span class="nl">bodyWithRectangleOfSize:</span><span class="n">monster</span><span class="p">.</span><span class="n">size</span><span class="p">];</span> <span class="c1">// 1</span>
</span><span class='line'><span class="n">monster</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">dynamic</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span> <span class="c1">// 2</span>
</span><span class='line'><span class="n">monster</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">categoryBitMask</span> <span class="o">=</span> <span class="n">monsterCategory</span><span class="p">;</span> <span class="c1">// 3</span>
</span><span class='line'><span class="n">monster</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">contactTestBitMask</span> <span class="o">=</span> <span class="n">projectileCategory</span><span class="p">;</span> <span class="c1">// 4</span>
</span><span class='line'><span class="n">monster</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">collisionBitMask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>来看看上面代码意思：</p>

<ol>
<li>为怪兽创建一个对应的物体。此处，物体被定义为一个与怪兽相同尺寸的矩形(这样与怪兽形状比较接近)。</li>
<li>将怪兽设置位<code>dynamic</code>。这意味着物理引擎将不再控制这个怪兽的运动——我们自己已经写好相关运动的代码了。</li>
<li>将categoryBitMask设置为之前定义好的<code>monsterCategory</code>。</li>
<li><code>contactTestBitMask</code>表示与什么类型对象碰撞时，应该通知contact代理。在这里选择炮弹类型。</li>
<li><code>collisionBitMask</code>表示物理引擎需要处理的碰撞事件。在此处我们不希望炮弹和怪物被相互弹开——所以再次将其设置为0。</li>
</ol>


<p>接着在<code>touchesEnded:withEvent:</code>方法中设置炮弹位置的代码后面添加如下代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">projectile</span><span class="p">.</span><span class="n">physicsBody</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKPhysicsBody</span> <span class="nl">bodyWithCircleOfRadius:</span><span class="n">projectile</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="n">projectile</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">dynamic</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="n">projectile</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">categoryBitMask</span> <span class="o">=</span> <span class="n">projectileCategory</span><span class="p">;</span>
</span><span class='line'><span class="n">projectile</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">contactTestBitMask</span> <span class="o">=</span> <span class="n">monsterCategory</span><span class="p">;</span>
</span><span class='line'><span class="n">projectile</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">collisionBitMask</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">projectile</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">usesPreciseCollisionDetection</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中跟之前的类似，只不过有些不同，我们来看看：
1. 为了更好的效果，炮弹的形状是圆形的。
2. <code>usesPreciseCollisionDetection</code>属性设置为YES。这对于快速移动的物体非常重要(例如炮弹)，如果不这样设置的话，有可能快速移动的两个物体会直接相互穿过去，而不会检测到碰撞的发生。</p>

<p>接着，添加如下方法，当炮弹与怪物发生碰撞时，会被调用。注意这个方法是不会被自动调用，稍后会看到我们如何调用它。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">projectile:</span><span class="p">(</span><span class="n">SKSpriteNode</span> <span class="o">*</span><span class="p">)</span><span class="nv">projectile</span> <span class="nf">didCollideWithMonster:</span><span class="p">(</span><span class="n">SKSpriteNode</span> <span class="o">*</span><span class="p">)</span><span class="nv">monster</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">projectile</span> <span class="n">removeFromParent</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">monster</span> <span class="n">removeFromParent</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当怪物和炮弹发生碰撞，上面的代码会将他们从场景中移除。很简单吧！</p>

<p>下面该实现contact delegate方法了。将如下方法添加到文件中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didBeginContact:</span><span class="p">(</span><span class="n">SKPhysicsContact</span> <span class="o">*</span><span class="p">)</span><span class="nv">contact</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="n">firstBody</span><span class="p">,</span> <span class="o">*</span><span class="n">secondBody</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">contact</span><span class="p">.</span><span class="n">bodyA</span><span class="p">.</span><span class="n">categoryBitMask</span> <span class="o">&lt;</span> <span class="n">contact</span><span class="p">.</span><span class="n">bodyB</span><span class="p">.</span><span class="n">categoryBitMask</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">firstBody</span> <span class="o">=</span> <span class="n">contact</span><span class="p">.</span><span class="n">bodyA</span><span class="p">;</span>
</span><span class='line'>        <span class="n">secondBody</span> <span class="o">=</span> <span class="n">contact</span><span class="p">.</span><span class="n">bodyB</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">firstBody</span> <span class="o">=</span> <span class="n">contact</span><span class="p">.</span><span class="n">bodyB</span><span class="p">;</span>
</span><span class='line'>        <span class="n">secondBody</span> <span class="o">=</span> <span class="n">contact</span><span class="p">.</span><span class="n">bodyA</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">firstBody</span><span class="p">.</span><span class="n">categoryBitMask</span> <span class="o">&amp;</span> <span class="n">projectileCategory</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">secondBody</span><span class="p">.</span><span class="n">categoryBitMask</span> <span class="o">&amp;</span> <span class="n">monsterCategory</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">projectile:</span><span class="p">(</span><span class="n">SKSpriteNode</span> <span class="o">*</span><span class="p">)</span> <span class="n">firstBody</span><span class="p">.</span><span class="n">node</span> <span class="nl">didCollideWithMonster:</span><span class="p">(</span><span class="n">SKSpriteNode</span> <span class="o">*</span><span class="p">)</span> <span class="n">secondBody</span><span class="p">.</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还记得之前给物理世界设置的<code>contactDelegate</code>吗？当两个物体发生碰撞之后，就会调用上面的方法。</p>

<p>在上面的方法中，可以分为两部分来理解：</p>

<ol>
<li>该方法会传递给你发生碰撞的两个物体，但是并不一定符合特定的顺序(如炮弹在前，或者炮弹在后)。所以这里的代码是通过物体的category bit mask来对其进行排序，以便后续做出正确的判断。注意，这里的代码来自苹果提供的Adventure示例。</li>
<li>最后，检测一下这两个碰撞的物体是否就是炮弹和怪物，如果是的话就调用之前的方法。</li>
</ol>


<p>最后一步，为了编译器没有警告，确保private interface 中添加一下<code>SKPhysicsContactDelegate</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyScene</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">SKPhysicsContactDelegate</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在编译并运行程序，可以发现，当炮弹与怪物接触时，他们就会消失！</p>

<h3><a id="sw"></a>收尾</h3>

<p>现在，本文的游戏快完成了。接下来我们就来为游戏添加音效和音乐，以及一些简单的游戏逻辑吧。</p>

<p>苹果提供的Sprite Kit里面并没有音频引擎(Cocos2D中是有的)，不过我们可以通过action来播放音效，并且可以使用AVFoundation播放后台音乐。</p>

<p>在工程中我已经准备好了一些音效和很酷的后台音乐，在本文开头已经将resources添加到工程中了，现在只需要播放它们即可！</p>

<p>首先在<code>ViewController.m</code>文件顶部添加如下import：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="n">import</span> <span class="n">AVFoundation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的语法是iOS 7中新的modules功能 —— 只需要使用新的关键字@import，就可以框架的头文件和库文件添加到工程中，这功能非常方便。要了解更多相关内容，请看到<a href="http://www.raywenderlich.com/store/ios-7-by-tutorials">iOS 7 by Tutorials</a>中的第十章内容中的：What’s New with Objective-C and Foundation。</p>

<p>接着添加一个新的属性和private interface：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">AVAudioPlayer</span> <span class="o">*</span> <span class="n">backgroundMusicPlayer</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着将下面的代码添加到<code>viewWillLayoutSubviews</code>方法中(在<code>[super viewWillLayoutSubviews]</code>后面)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="n">NSURL</span> <span class="o">*</span> <span class="n">backgroundMusicURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource:</span><span class="s">@&quot;background-music-aac&quot;</span> <span class="nl">withExtension:</span><span class="s">@&quot;caf&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">backgroundMusicPlayer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVAudioPlayer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL:</span><span class="n">backgroundMusicURL</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">backgroundMusicPlayer</span><span class="p">.</span><span class="n">numberOfLoops</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">backgroundMusicPlayer</span> <span class="n">prepareToPlay</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">backgroundMusicPlayer</span> <span class="n">play</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码会开始无限循环的播放后台音乐。</p>

<p>下面我们来看看如何处理音效。切换到<code>MyScene.m</code>文件中，并将下面这行代码添加到<code>touchesEnded:withEvent:</code>方法的顶部：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">runAction:</span><span class="p">[</span><span class="n">SKAction</span> <span class="nl">playSoundFileNamed:</span><span class="s">@&quot;pew-pew-lei.caf&quot;</span> <span class="nl">waitForCompletion:</span><span class="n">NO</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上，一行代码就可以播放音效了，很简单吧！</p>

<p>下面，我们创建一个新的创建和layer，用来显示<code>你赢了(You Win)</code>或<code>你输了(You Lose)</code>。用模板<code>iOS\Cocoa Touch\Objective-C class</code>创建一个新的文件，将其命名为<code>GameOverScene</code>，并让其继承自<code>SKScene</code>，然后点击<code>Next</code>和<code>Create</code>。</p>

<p>接着用如下代码替换<code>GameOverScene.h</code>中的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;SpriteKit/SpriteKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">GameOverScene</span> : <span class="nc">SKScene</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithSize:</span><span class="p">(</span><span class="n">CGSize</span><span class="p">)</span><span class="nv">size</span> <span class="nf">won:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">won</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中导入了Sprite Kit头文件，并声明了一个特定的初始化方法，该方法的第一个参数用来定位显示的位置，第二个参数won用来判断用户是否赢了。</p>

<p>接着用下面的代码替换<code>GameOverLayer.m</code>中的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;GameOverScene.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;MyScene.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">GameOverScene</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithSize:</span><span class="p">(</span><span class="n">CGSize</span><span class="p">)</span><span class="nv">size</span> <span class="nf">won:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">won</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithSize:</span><span class="n">size</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 1</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 2</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">won</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">message</span> <span class="o">=</span> <span class="s">@&quot;You Won!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">message</span> <span class="o">=</span> <span class="s">@&quot;You Lose :[&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 3</span>
</span><span class='line'>        <span class="n">SKLabelNode</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKLabelNode</span> <span class="nl">labelNodeWithFontNamed:</span><span class="s">@&quot;Chalkduster&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">fontSize</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">fontColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKColor</span> <span class="n">blackColor</span><span class="p">];</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">addChild:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 4</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">runAction:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">SKAction</span> <span class="nl">sequence:</span><span class="err">@</span><span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="n">SKAction</span> <span class="nl">waitForDuration:</span><span class="mf">3.0</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="n">SKAction</span> <span class="nl">runBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 5</span>
</span><span class='line'>                    <span class="n">SKTransition</span> <span class="o">*</span><span class="n">reveal</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKTransition</span> <span class="nl">flipHorizontalWithDuration:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">SKScene</span> <span class="o">*</span> <span class="n">myScene</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyScene</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSize:</span><span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">presentScene:</span><span class="n">myScene</span> <span class="nl">transition:</span> <span class="n">reveal</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}]</span>
</span><span class='line'>            <span class="p">]]</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码可以分为4部分内容，我们来分别看看：</p>

<ol>
<li>将背景色设置为白色(与主场景一样颜色)。</li>
<li>根据<code>won</code>参数，将信息设置为&#8221;You Won&#8221;或&#8221;You Lose&#8221;。</li>
<li>这里的代码是利用Sprite Kit将一个文本标签显示到屏幕中。如代码所示，只需要选择一个字体，并设置少量的参数即可，也非常简单。</li>
<li>设置并运行有个有两个action的sequence。为了看起来方便，此处我将它们放到一块(而不是为每个action创建单独的一个变量)。首先是等待3秒，然后是利用<code>runBlock</code>action来运行一些代码。</li>
<li>演示了在Sprite Kit中如何过渡到新的场景。首先可以选择任意的一种不同的动画过渡效果，用于场景的显示，在这里选择了翻转效果(持续0.5秒)。然后是创建一个想要显示的场景，接着使用self.view的方法<code>presentScene:transition:</code>来显示出场景。</li>
</ol>


<p>OK，万事俱备，只欠东风了！现在只需要在主场景中，适当的情况下加载game over scene就可以了。</p>

<p>首先，在<code>MyScene.m</code>中导入新的场景：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;GameOverScene.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，在<code>addMonster</code>中，用下面的代码替换最后一行在怪物上运行action的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">SKAction</span> <span class="o">*</span> <span class="n">loseAction</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKAction</span> <span class="nl">runBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">SKTransition</span> <span class="o">*</span><span class="n">reveal</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKTransition</span> <span class="nl">flipHorizontalWithDuration:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">SKScene</span> <span class="o">*</span> <span class="n">gameOverScene</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GameOverScene</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSize:</span><span class="n">self</span><span class="p">.</span><span class="n">size</span> <span class="nl">won:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">presentScene:</span><span class="n">gameOverScene</span> <span class="nl">transition:</span> <span class="n">reveal</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="p">[</span><span class="n">monster</span> <span class="nl">runAction:</span><span class="p">[</span><span class="n">SKAction</span> <span class="nl">sequence:</span><span class="err">@</span><span class="p">[</span><span class="n">actionMove</span><span class="p">,</span> <span class="n">loseAction</span><span class="p">,</span> <span class="n">actionMoveDone</span><span class="p">]]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面创建了一个&#8221;lose action&#8221;，当怪物离开屏幕时，显示game over场景。</p>

<p>在这里为什么<code>loseAction</code>要在<code>actionMoveDone</code>之前运行呢？
原因在于如果将一个精灵从场景中移除了，那么它就不在处于场景的层次结构中了，也就不会有action了。所以需要过渡到lose场景之后，才能将精灵移除。不过，实际上actionMoveDone永远都不会被调用——因为此时已经过渡到新的场景中了，留在这里就是为了达到教学的目的。</p>

<p>现在，需要处理一下赢了的情况。在private interface中添加一个新的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">int</span> <span class="n">monstersDestroyed</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后将如下代码添加到<code>projectile:didCollideWithMonster:</code>的底部：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">monstersDestroyed</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">monstersDestroyed</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SKTransition</span> <span class="o">*</span><span class="n">reveal</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKTransition</span> <span class="nl">flipHorizontalWithDuration:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">SKScene</span> <span class="o">*</span> <span class="n">gameOverScene</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GameOverScene</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSize:</span><span class="n">self</span><span class="p">.</span><span class="n">size</span> <span class="nl">won:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">presentScene:</span><span class="n">gameOverScene</span> <span class="nl">transition:</span> <span class="n">reveal</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译并运行程序，尝试一下赢了和输了会看到的画面！</p>

<h3><a id="hqhc"></a>何去何从?</h3>

<p>至此<code>Sprite Kit教程：初学者</code>结束！这里可以下到<a href="http://cdn2.raywenderlich.com/downloads/SpriteKitSimpleGame2.zip">完整的代码</a>。</p>

<p>希望本文能帮助你学习Sprite Kit，并写出你自己的游戏！</p>

<p>如果你希望学习更多相关Sprite Kit内容，可以看看这本书：<a href="http://www.raywenderlich.com/store/ios-7-by-tutorials">iOS Games by Tutorials</a>。本书会告诉你需要知道的内容——从物理特性，到磁贴地图，以及粒子系统，甚至是制作自己的关卡编辑器。</p>

<p>……Sprite Kit教程：初学者 3 结束……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sprite Kit教程：初学者 2]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/09/29/113-spritekit-tutorial-for-beginners-2/"/>
    <updated>2013-09-29T00:06:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/09/29/113-spritekit-tutorial-for-beginners-2</id>
    <content type="html"><![CDATA[<p><img src="http://BeyondVincent.github.io/images/2013/09/10.png"></p>

<!--more-->


<p>注：本文译自<a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners"><code>Sprite Kit Tutorial for Beginners</code></a></p>

<p>感谢<a href="http://answerhuang.duapp.com/">answer哥</a>对本文翻译问题的提出。</p>

<h3><strong>目录</strong></h3>

<ul>
<li>Sprite Kit的优点和缺点</li>
<li>Sprite Kit vs Cocos2D-iPhone vs Cocos2D-X vs Unity</li>
<li>Hello, Sprite Kit!</li>
<li><a href="#hpxs">横屏显示</a></li>
<li><a href="#ydgs">移动怪兽</a></li>
<li><a href="#fspd">发射炮弹</a></li>
<li>碰撞检测: 概述</li>
<li>碰撞检测: 实现</li>
<li>收尾</li>
<li>何去何从?</li>
</ul>


<h3><a id="hpxs"></a>横屏显示</h3>

<p>首先，在Project Navigator中单击SpriteKitSimpleGame工程以打开target设置，选中SpriteKitSimpleGame target。然后在<code>Deployment Info</code>中，不要勾选<code>Portrait</code>，只选中<code>Landscape</code>和<code>Landscape Right</code>，如下所示：</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/11.png"></p>

<p>编译并运行工程，会看到如下运行画面：</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/12.png"></p>

<p>下面我们试着添加一个忍者(ninja)。</p>

<p>首先，下载此<a href="http://cdn3.raywenderlich.com/wp-content/uploads/2015/01/SpriteKitSimpleGameResources.zip">工程的资源文件</a>，并将其拖拽到Xcode工程中。确保勾选上<code>“Copy items into destination group’s folder (if needed)”</code>和<code>SpriteKitSimpleGame target</code>。</p>

<p>接着，打开<code>MyScene.m</code>，并用下面的内容替换之：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;MyScene.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyScene</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">SKSpriteNode</span> <span class="o">*</span> <span class="n">player</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyScene</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithSize:</span><span class="p">(</span><span class="n">CGSize</span><span class="p">)</span><span class="nv">size</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithSize:</span><span class="n">size</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 2</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Size: %@&quot;</span><span class="p">,</span> <span class="n">NSStringFromCGSize</span><span class="p">(</span><span class="n">size</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 3</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKColor</span> <span class="nl">colorWithRed:</span><span class="mf">1.0</span> <span class="nl">green:</span><span class="mf">1.0</span> <span class="nl">blue:</span><span class="mf">1.0</span> <span class="nl">alpha:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 4</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">player</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKSpriteNode</span> <span class="nl">spriteNodeWithImageNamed:</span><span class="s">@&quot;player&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">addChild:</span><span class="n">self</span><span class="p">.</span><span class="n">player</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来看看上面的代码。</p>

<ol>
<li>为了给player(例如忍者)声明一个私有变量，在这里创建了一个私有的interface，之后可以把这个私有变量添加到场景中。</li>
<li>在这里打印出了场景的size，至于什么原因很快你就会看到了。</li>
<li>在Sprite Kit中设置一个场景的背景色非常简单——只需要设置<code>backgroundColor</code>属性，在这里将其设置位白色。</li>
<li>在Sprite Kit场景中添加一个精灵同样非常简单，只需要使用<code>spriteNodeWithImageNamed</code>方法，并把一副图片的名称传递进去就可以创建一个精灵。接着设置一下精灵的位置，然后调用<code>addChild</code>方法将该精灵添加到场景中。在代码中将忍者的位置设置为<code>(100, 100)</code>，该位置是从屏幕的左下角到右上角计算的。</li>
</ol>


<p>编译并运行，看看效果如何…</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/13.png"></p>

<p>呀！屏幕是白色的，并没有看到忍者。这是为什么呢？你可能在想设计之初就是这样的，实际上这里有一个问题。</p>

<p>如果你观察一下控制台输出的内容，会看到如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">SpriteKitSimpleGame</span><span class="p">[</span><span class="mi">3139</span><span class="o">:</span><span class="mi">907</span><span class="p">]</span> <span class="nl">Size:</span> <span class="p">{</span><span class="mi">320</span><span class="p">,</span> <span class="mi">568</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>scene认为自己的宽度是320，高度则是568——实际上刚好相反!</p>

<p>我们来看看具体发生了什么：定位到<code>ViewController.m</code>的<code>viewDidLoad</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Configure the view.</span>
</span><span class='line'>    <span class="n">SKView</span> <span class="o">*</span> <span class="n">skView</span> <span class="o">=</span> <span class="p">(</span><span class="n">SKView</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="n">skView</span><span class="p">.</span><span class="n">showsFPS</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">skView</span><span class="p">.</span><span class="n">showsNodeCount</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create and configure the scene.</span>
</span><span class='line'>    <span class="n">SKScene</span> <span class="o">*</span> <span class="n">scene</span> <span class="o">=</span> <span class="p">[</span><span class="n">MyScene</span> <span class="nl">sceneWithSize:</span><span class="n">skView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">];</span>
</span><span class='line'>    <span class="n">scene</span><span class="p">.</span><span class="n">scaleMode</span> <span class="o">=</span> <span class="n">SKSceneScaleModeAspectFill</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Present the scene.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">skView</span> <span class="nl">presentScene:</span><span class="n">scene</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中利用view的边界size创建了场景。不过请注意，当<code>viewDidLoad</code>被调用的时候，view还没被添加到view层级结构中，因此它还没有响应出布局的改变。所以view的边界可能还不正确，进而在viewDidLoad中并不是开启场景的最佳时机。</p>

<p><code>提醒</code>：要想了解更多相关内容，请看由Rob Mayoff带来的<a href="http://stackoverflow.com/questions/9539676/uiviewcontroller-returns-invalid-frame">最佳解释</a>。</p>

<p>解决方法就是将开启场景代码的过程再靠后一点。用下面的代码替换<code>viewDidLoad</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillLayoutSubviews</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewWillLayoutSubviews</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Configure the view.</span>
</span><span class='line'>    <span class="n">SKView</span> <span class="o">*</span> <span class="n">skView</span> <span class="o">=</span> <span class="p">(</span><span class="n">SKView</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skView</span><span class="p">.</span><span class="n">scene</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">skView</span><span class="p">.</span><span class="n">showsFPS</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">skView</span><span class="p">.</span><span class="n">showsNodeCount</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Create and configure the scene.</span>
</span><span class='line'>      <span class="n">SKScene</span> <span class="o">*</span> <span class="n">scene</span> <span class="o">=</span> <span class="p">[</span><span class="n">MyScene</span> <span class="nl">sceneWithSize:</span><span class="n">skView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">];</span>
</span><span class='line'>      <span class="n">scene</span><span class="p">.</span><span class="n">scaleMode</span> <span class="o">=</span> <span class="n">SKSceneScaleModeAspectFill</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Present the scene.</span>
</span><span class='line'>      <span class="p">[</span><span class="n">skView</span> <span class="nl">presentScene:</span><span class="n">scene</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译并运行程序，可以看到，忍者已经显示在屏幕中了！</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/14.png"></p>

<p>如上图所示，可以看到坐标系已经正确了，如果想要把忍者的位置设置为其中间靠左，那么在<code>MyScene.m</code>中用下面的代码来替换设置忍者位置相关的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a id="ydgs"></a>移动怪兽</h3>

<p>接下来，我们希望在场景中添加一些怪兽，让忍者进行攻击。为了让游戏更有趣一点，希望怪兽能够移动——否则没有太大的挑战！OK，我们就在屏幕的右边，离屏的方式创建怪兽，并给怪兽设置一个动作：告诉它们往左边移动。</p>

<p>将下面这个方法添加到<code>MyScene.m</code>中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addMonster</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create sprite</span>
</span><span class='line'>    <span class="n">SKSpriteNode</span> <span class="o">*</span> <span class="n">monster</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKSpriteNode</span> <span class="nl">spriteNodeWithImageNamed:</span><span class="s">@&quot;monster&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Determine where to spawn the monster along the Y axis</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">minY</span> <span class="o">=</span> <span class="n">monster</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxY</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">monster</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rangeY</span> <span class="o">=</span> <span class="n">maxY</span> <span class="o">-</span> <span class="n">minY</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">actualY</span> <span class="o">=</span> <span class="p">(</span><span class="n">arc4random</span><span class="p">()</span> <span class="o">%</span> <span class="n">rangeY</span><span class="p">)</span> <span class="o">+</span> <span class="n">minY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the monster slightly off-screen along the right edge,</span>
</span><span class='line'>    <span class="c1">// and along a random position along the Y axis as calculated above</span>
</span><span class='line'>    <span class="n">monster</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="n">monster</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">actualY</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">addChild:</span><span class="n">monster</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Determine speed of the monster</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">minDuration</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxDuration</span> <span class="o">=</span> <span class="mf">4.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rangeDuration</span> <span class="o">=</span> <span class="n">maxDuration</span> <span class="o">-</span> <span class="n">minDuration</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">actualDuration</span> <span class="o">=</span> <span class="p">(</span><span class="n">arc4random</span><span class="p">()</span> <span class="o">%</span> <span class="n">rangeDuration</span><span class="p">)</span> <span class="o">+</span> <span class="n">minDuration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the actions</span>
</span><span class='line'>    <span class="n">SKAction</span> <span class="o">*</span> <span class="n">actionMove</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKAction</span> <span class="nl">moveTo:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="o">-</span><span class="n">monster</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">actualY</span><span class="p">)</span> <span class="nl">duration:</span><span class="n">actualDuration</span><span class="p">];</span>
</span><span class='line'>    <span class="n">SKAction</span> <span class="o">*</span> <span class="n">actionMoveDone</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKAction</span> <span class="n">removeFromParent</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">monster</span> <span class="nl">runAction:</span><span class="p">[</span><span class="n">SKAction</span> <span class="nl">sequence:</span><span class="err">@</span><span class="p">[</span><span class="n">actionMove</span><span class="p">,</span> <span class="n">actionMoveDone</span><span class="p">]]];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面，我尽量让代码看起来容易理解。首先是通过一个简单的计算，确定怪兽出现的位置，并将该位置设置给怪兽，然后将其添加到场景中。</p>

<p>接着是添加动作(actions)。跟Cocos2D一样，Sprite Kit同样提供了很多方便的内置动作，例如移动动作、旋转动作、淡入淡出动作、动画动作等。在这里我们只需要在怪兽上使用3中动作即可：</p>

<ul>
<li><code>moveTo:duration:</code>使用这个动作可以把怪兽从屏幕外边移动到左边。移动过程中，我们可以指定移动持续的时间，上面的代码中，指定为2-4秒之间的一个随机数。</li>
<li><code>removeFromParent:</code>在Sprite Kit中，可以使用该方法，方便的将某个node从parent中移除，能有效的从场景中删除某个对象。此处，将不再需要显示的怪兽从场景中移除。这个功能非常的重要，否则当有源源不断的怪兽出现在场景中时，会耗尽设备的所有资源。</li>
<li><code>sequence:</code>sequence动作可以一次性就把一系列动作串联起来按照一定顺序执行。通过该方法我们就能让<code>moveTo:</code>方法先执行，当完成之后，在执行<code>removeFromParent:</code>动作。</li>
</ul>


<p>最后，我们需要做的事情就是调用上面这个方法<code>addMonster</code>，以实际的创建出怪兽！为了更加好玩，下面我们来让怪兽随着时间持续的出现在屏幕中。</p>

<p>在Sprite Kit中，并不能像Cocos2D一样，可以配置每隔X秒就回调一下update方法。同样也不支持将从上次更新到目前为止的时间差传入方法中。(非常令人吃惊！)。</p>

<p>不过，我们可以通过一小段代码来仿造这种行为。首先在<code>MyScene.m</code>的private interface中添加如下属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSTimeInterval</span> <span class="n">lastSpawnTimeInterval</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSTimeInterval</span> <span class="n">lastUpdateTimeInterval</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<code>lastSpawnTimeInterval</code>可以记录着最近出现怪兽时的时间，而<code>lastUpdateTimeInterval</code>可以记录着上次更新时的时间。</p>

<p>接着，我们写一个方法，该方法在画面每一帧更新的时候都会被调用。记住，该方法不会被自动调用——需要另外写一个方法来调用它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateWithTimeSinceLastUpdate:</span><span class="p">(</span><span class="n">CFTimeInterval</span><span class="p">)</span><span class="nv">timeSinceLast</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">lastSpawnTimeInterval</span> <span class="o">+=</span> <span class="n">timeSinceLast</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">lastSpawnTimeInterval</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">lastSpawnTimeInterval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">addMonster</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中简单的将上次更新(update调用)的时间追加到<code>self.lastSpawnTimeInterval</code>中。一旦该时间大于1秒，就在场景中新增一个怪兽，并将<code>lastSpawnTimeInterval</code>重置。</p>

<p>最后，添加如下方法来调用上面的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">update:</span><span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nv">currentTime</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Handle time delta.</span>
</span><span class='line'>    <span class="c1">// If we drop below 60fps, we still want everything to move the same distance.</span>
</span><span class='line'>    <span class="n">CFTimeInterval</span> <span class="n">timeSinceLast</span> <span class="o">=</span> <span class="n">currentTime</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">lastUpdateTimeInterval</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">lastUpdateTimeInterval</span> <span class="o">=</span> <span class="n">currentTime</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">timeSinceLast</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// more than a second since last update</span>
</span><span class='line'>        <span class="n">timeSinceLast</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mf">60.0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">lastUpdateTimeInterval</span> <span class="o">=</span> <span class="n">currentTime</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">updateWithTimeSinceLastUpdate:</span><span class="n">timeSinceLast</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sprite Kit在显示每帧时都会调用上面的<code>update:</code>方法。</p>

<p>上面的代码其实是来自苹果提供的Adventure示例中。该方法会传入当前的时间，在其中，会做一些计算，以确定出上一帧更新的时间。注意，在代码中做了一些合理性的检查，以避免从上一帧更新到现在已经过去了大量时间，并且将间隔重置为1/60秒，避免出现奇怪的行为。</p>

<p>现在编译并运行程序，可以看到许多怪兽从左边移动到屏幕右边并消失。</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/15.png"></p>

<h3><a id="fspd"></a>发射炮弹</h3>

<p>现在我们开始给忍者添加一些动作，首先从发射炮弹开始！实际上有多种方法来实现炮弹的发射，不过，在这里要实现的方法时当用户tap屏幕时，从忍者的方位到tap的方位发射一颗炮弹。</p>

<p>由于本文是针对初级开发者，所以在这里我使用<code>moveTo:</code>动作来实现，不过这需要做一点点的数学运算——因为<code>moveTo:</code>方法需要指定炮弹的目的地，但是又不能直接使用touch point(因为touch point仅仅代表需要发射的方向)。实际上我们需要让炮弹穿过touch point，直到炮弹在屏幕中消失。</p>

<p>如下图，演示了上面的相关内容：</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/16.jpg"></p>

<p>如图所示，我们可以通过origin point到touch point得到一个小的三角形。我们要做的就是根据这个小三角形的比例创建出一个大的三角形——而你知道你想要的一个端点是离开屏幕的地方。</p>

<p>为了做这个计算，如果有一些基本的矢量方法可供调用(例如矢量的加减法)，那么会非常有帮助，但很不幸的时Sprite Kit并没有提供相关方法，所以，我们必须自己实现。</p>

<p>不过很幸运的时这非常容易实现。将下面的方法添加到文件的顶部(implementation之前)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">CGPoint</span> <span class="nf">rwAdd</span><span class="p">(</span><span class="n">CGPoint</span> <span class="n">a</span><span class="p">,</span> <span class="n">CGPoint</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">b</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">b</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">CGPoint</span> <span class="nf">rwSub</span><span class="p">(</span><span class="n">CGPoint</span> <span class="n">a</span><span class="p">,</span> <span class="n">CGPoint</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">b</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">b</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">CGPoint</span> <span class="nf">rwMult</span><span class="p">(</span><span class="n">CGPoint</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">float</span> <span class="nf">rwLength</span><span class="p">(</span><span class="n">CGPoint</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sqrtf</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Makes a vector have a length of 1</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">CGPoint</span> <span class="nf">rwNormalize</span><span class="p">(</span><span class="n">CGPoint</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">length</span> <span class="o">=</span> <span class="n">rwLength</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">length</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">/</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面实现了一些标准的矢量函数。如果你看得不是太明白，请看这里关于<a href="http://www.mathsisfun.com/algebra/vectors.html">矢量方法的解释</a>。</p>

<p>接着，在文件中添加一个新的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesEnded:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 1 - Choose one of the touches to work with</span>
</span><span class='line'>    <span class="n">UITouch</span> <span class="o">*</span> <span class="n">touch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">location</span> <span class="o">=</span> <span class="p">[</span><span class="n">touch</span> <span class="nl">locationInNode:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2 - Set up initial location of projectile</span>
</span><span class='line'>    <span class="n">SKSpriteNode</span> <span class="o">*</span> <span class="n">projectile</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKSpriteNode</span> <span class="nl">spriteNodeWithImageNamed:</span><span class="s">@&quot;projectile&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">projectile</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3- Determine offset of location to projectile</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">rwSub</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">projectile</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 4 - Bail out if you are shooting down or backwards</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 5 - OK to add now - we&#39;ve double checked position</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">addChild:</span><span class="n">projectile</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 6 - Get the direction of where to shoot</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">direction</span> <span class="o">=</span> <span class="n">rwNormalize</span><span class="p">(</span><span class="n">offset</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 7 - Make it shoot far enough to be guaranteed off screen</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">shootAmount</span> <span class="o">=</span> <span class="n">rwMult</span><span class="p">(</span><span class="n">direction</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 8 - Add the shoot amount to the current position       </span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">realDest</span> <span class="o">=</span> <span class="n">rwAdd</span><span class="p">(</span><span class="n">shootAmount</span><span class="p">,</span> <span class="n">projectile</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 9 - Create the actions</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">velocity</span> <span class="o">=</span> <span class="mf">480.0</span><span class="o">/</span><span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">realMoveDuration</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">velocity</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SKAction</span> <span class="o">*</span> <span class="n">actionMove</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKAction</span> <span class="nl">moveTo:</span><span class="n">realDest</span> <span class="nl">duration:</span><span class="n">realMoveDuration</span><span class="p">];</span>
</span><span class='line'>    <span class="n">SKAction</span> <span class="o">*</span> <span class="n">actionMoveDone</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKAction</span> <span class="n">removeFromParent</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">projectile</span> <span class="nl">runAction:</span><span class="p">[</span><span class="n">SKAction</span> <span class="nl">sequence:</span><span class="err">@</span><span class="p">[</span><span class="n">actionMove</span><span class="p">,</span> <span class="n">actionMoveDone</span><span class="p">]]];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码中做了很多事情，我们来详细看看。</p>

<ol>
<li>SpriteKit为我们做了很棒的一件事情就是它提供了一个UITouch的category，该category中有<code>locationInNode:</code>和<code>previousLocationInNode:</code>方法。这两个方法可以帮助我们定位到在SKNode内部坐标系中touch的坐标位置。这样一来，我们就可以寻得到在场景坐标系中touch的位置。</li>
<li>然后创建一个炮弹，并将其放置到忍者的地方，以当做其开始位置。注意，现在还没有将其添加到场景中，因为还需要先做一个合理性的检查——该游戏不允许忍者向后发射。</li>
<li>接着利用touch位置减去炮弹的当前位置，这样就能获得一个从当前位置到touch位置的矢量。</li>
<li>如果X值小于0，就意味着忍者将要向后发射，由于在这里的游戏中是不允许的(真实中的忍者是不回头的！)，所以就return。</li>
<li>否则，将可以将炮弹添加到场景中。</li>
<li>调用方法<code>rwNormalize</code>，将offset转换为一个单位矢量(长度为1)。这样做可以让在相同方向上，根据确定的长度来构建一个矢量更加容易（因为1 * length = length）。</li>
<li>在单位矢量的方向上乘以1000。为什么是1000呢？因为着肯定足够超过屏幕边缘了 :]</li>
<li>将上一步中计算得到的位置与炮弹的位置相加，以获得炮弹最终结束的位置。</li>
<li>最后，参照之前构建怪物时的方法，创建<code>moveTo:</code>和<code>removeFromParent:</code>两个actions。</li>
</ol>


<p>编译并运行程序，现在忍者可以发射炮弹了！</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/17.png"></p>

<p>……Sprite Kit教程：初学者 2 结束……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sprite Kit教程：初学者 1 ]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/09/26/113-spritekit-tutorial-for-beginners-1/"/>
    <updated>2013-09-26T11:45:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/09/26/113-spritekit-tutorial-for-beginners-1</id>
    <content type="html"><![CDATA[<p><img src="http://BeyondVincent.github.io/images/2013/09/6.png"></p>

<!--more-->


<p>注：本文译自<a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners"><code>Sprite Kit Tutorial for Beginners</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li><code>Sprite Kit的优点和缺点</code></li>
<li><code>Sprite Kit vs Cocos2D-iPhone vs Cocos2D-X vs Unity</code></li>
<li><code>Hello, Sprite Kit!</code></li>
<li>横屏显示</li>
<li>移动怪兽</li>
<li>发射炮弹</li>
<li>碰撞检测: 概述</li>
<li>碰撞检测: 实现</li>
<li>收尾</li>
<li>何去何从?</li>
</ul>


<p>在iOS 7中内置了一个新的Sprite Kit框架，该框架主要用来开发2D游戏。目前已经支持的内容包括：精灵、很酷的特效(例如视频、滤镜和遮罩)，并且还集成了物理库等许多东西。</p>

<p>iOS 7中附带了一个非常棒的Sprite Kit示例工程，名字叫做Adventure。不过这个示例工程稍微有点复杂，不太适合初学者。本文的目的就是做一个关于Sprite Kit使用的初级教程。</p>

<p>通过本文，你可以从头到尾的学习到如何为你的iPhone创建一个简单又有趣的2D游戏。如果你看过我们之前的教程:<a href="http://www.raywenderlich.com/25736/how-to-make-a-simple-iphone-game-with-cocos2d-2-x-tutorial">Simple Cocos2D game教程</a>，你会发现非常的相似。</p>

<p>在开始之前，请确保已经安装了最新版本的Xcode(5.X)，里面支持Sprite Kit以及iOS 7。</p>

<h3><strong> Sprite Kit的优点和缺点</strong></h3>

<p>首先，我想指出在iOS中开发2D游戏Sprite Kit并不是唯一的选择，下面我们先来看看Sprite Kit的一些优点和缺点。</p>

<p>Sprite Kit的优点：</p>

<p> 1、它是内置到iOS中的，因此并不需要下载额外的库或者其它一些外部依赖。并且它是由苹果开发的，所以对于它的支持和更新我们可以放心。</p>

<p> 2、它内置的工具支持纹理和粒子。</p>

<p> 3、它可以让你做一些其它框架很难做到的事情，例如把视频当做精灵一样处理，或者使用很酷的图形效果和遮罩。</p>

<p>Sprite Kit的缺点：</p>

<p> 1、如果使用了Sprite Kit，那么你将被iOS生态圈所绑架，导致你无法很容易对你开发的游戏移植到Android上。</p>

<p> 2、Sprite Kit现在还处于初始阶段，此时提供的功能还没有别的框架丰富，例如Cocos2D。最缺的东西应该是暂不支持写自定义的OpenGL代码。</p>

<h3><strong> Sprite Kit vs Cocos2D-iPhone vs Cocos2D-X vs Unity</strong></h3>

<p>此时，你可能在想“我该选择使用哪个2D框架呢？”</p>

<p>这取决于你的实际情况，下面是我的一些想法：</p>

<p> 1、如果你是一个初学者，并且只关注于iOS，那么就使用内置的Sprite Kit吧，它非常容易学习，并且完全可以把工作做好。</p>

<p> 2、如果需要写自己的OpenGL代码，那么还是使用Cocos2D，或者其它框架吧，目前Sprite Kit并不支持自定义OpenGL代码。</p>

<p> 3、如果要进行跨平台开发，那么选择Cocos2D-X或者Unity。Cocos2D-X非常出色，可以用它来构建2D游戏。Unity则更加的灵活(例如，如果有需要的话，你可以在游戏中添加一些3D效果)。</p>

<p>看到这里，如果你还想要继续了解Sprite Kit的话，请继续往下读吧。</p>

<h3><strong> Hello，Sprite Kit！</strong></h3>

<p>下面我们就开始利用Xcode 5内置的Sprite Kit模板来构建一个简单的Hello World工程吧。</p>

<p>启动Xcode，选择<code>File\New\Project</code>，接着选中<code>iOS\Application\SpriteKit Game</code>模板，然后单击<code>Next</code>：</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/7.png"></p>

<p>输入Product Name为<code>SpriteKitSimpleGame</code>，Devices选择iPhone，接着单击<code>Next</code>：</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/8.png"></p>

<p>选择工程保存的路径，然后点击<code>Create</code>。然后点击Xcode中的播放按钮来运行工程。稍等片刻，可以看到如下运行画面：</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/9.png"></p>

<p>跟Cocos2D类似，Sprite Kit也是按照<code>场景(scenes)</code>来构建的，这相当于游戏中的&#8221;levels&#8221;和&#8221;screens&#8221;。例如，你的游戏中可能会有一个主游戏区的场景，以及一个世界地图的一个场景。</p>

<p>如果你观察一下创建好的工程，会发现SpriteKit Game模板已经创建好了一个默认的场景<code>MyScene</code>。现在打开<code>MyScene.m</code>，里面已经包含了一些代码，其中将一个lable放到屏幕中，并且添加了：当tap屏幕时，会在屏幕上新增一个旋转的飞船。</p>

<p>在本教程中，我们主要在MyScene中写代码。不过在开始写代码之前，需要进行一个小调整——让程序以横屏的方式运行。</p>

<p>……Sprite Kit教程：初学者 1 结束……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7中的一些小修改]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/09/20/112-ios-7-additions-omg-finally/"/>
    <updated>2013-09-20T11:45:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/09/20/112-ios-7-additions-omg-finally</id>
    <content type="html"><![CDATA[<p><img src="http://BeyondVincent.github.io/images/2013/09/4.png"></p>

<h2><strong>小引</strong></h2>

<p>大家都知道iOS 7做了很大的调整，当然也有一些轻微的修改，我们来稍微看一下吧。</p>

<!--more-->


<p>注：本文译自<a href="http://www.doubleencore.com/2013/09/ios-7-additions-omg-finally/"><code>iOS 7 Additions: OMG Finally!</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li>Message UI Framework(在消息中添加文件)</li>
<li>Media Player Framework(MPVolumeView &ndash; 检测airplay和当前airplay的route)</li>
<li>AVFoundation(条码扫描)</li>
<li>更多</li>
</ul>


<h3><strong> Message UI Framework(在消息中添加文件)</strong></h3>

<p>在iOS 7之前我们可以使用<code>MFMessageComposeViewController</code>来撰写文本消息，但是要想添加文件是不可能做到的，不过在iOS 7中我们可以使用这个方法就能添加文件了：<code>- (BOOL)addAttachmentData:(NSData *)attachmentData typeIdentifier:(NSString *)uti filename:(NSString *)filename;</code>。如下代码示例所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ([MFMessageComposeViewController canSendText] && [MFMessageComposeViewController canSendAttachments] && [MFMessageComposeViewController isSupportedAttachmentUTI:(NSString *)kUTTypePNG]) {
</span><span class='line'>    MFMessageComposeViewController *vc = [[MFMessageComposeViewController alloc] init];
</span><span class='line'>    vc.messageComposeDelegate = self;
</span><span class='line'>    vc.recipients = @[@"Yawkey"];
</span><span class='line'>    UIImage *myImage = [UIImage imageNamed:@"Yawkey_business_dog.png"];
</span><span class='line'>    BOOL attached = [vc addAttachmentData:UIImagePNGRepresentation(myImage) typeIdentifier:(NSString*)kUTTypePNG filename:@"Yawkey_business_dog.png"];
</span><span class='line'>    if (attached) {
</span><span class='line'>        NSLog(@"Attached (:");
</span><span class='line'>    }
</span><span class='line'>    else {
</span><span class='line'>        NSLog(@"Not attached ):");
</span><span class='line'>    }
</span><span class='line'>    [self presentViewController:vc animated:YES completion:nil];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><img src="http://BeyondVincent.github.io/images/2013/09/5.png"></p>

<h3><strong> Media Player Framework(MPVolumeView &ndash; 检测airplay和当前airplay的route)</strong></h3>

<p><code>MPVolumeView</code>可以帮助我们与AirPlay系统进行交互。不过，一直以来都是很难获得用户选择操作的信息。现在通过新增的两个属性和通知，我们可以更加深入的了解AirPlay系统了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property areWirelessRoutesAvailable;
</span><span class='line'>@property isWirelessRouteActive;</span></code></pre></td></tr></table></div></figure>


<p>这两个属性可以告诉我们是否有可用的AirPlay，以及是否以及被选中了。下面两个是通知：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *const MPVolumeViewWirelessRoutesAvailableDidChangeNotification;
</span><span class='line'>NSString *const MPVolumeViewWirelessRouteActiveDidChangeNotification;</span></code></pre></td></tr></table></div></figure>


<p>通过这两个通知我们可以知道可用AirPlay发生了改变，以及用户修改了当前正在使用的AirPlay route。</p>

<h3><strong>AVFoundation(条码扫描)</strong></h3>

<p><code>AVFoundation</code>中现在已经内置支持一维和二维码的扫描。之前要想在iOS程序中读取条形码和QR码，则需要使用第三方库，例如ZXing和ZBar。在iOS 7中默认支持4中机器条码，需要做的就是将<code>AVCaptureMetadataOutput</code> hook up到<code>AVCaptureSession</code>。另外可以对<code>AVCaptureMetadataOutput</code>进行配置以检测如下这些任意机器可读的条码类型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AVMetadataObjectTypeUPCECode
</span><span class='line'>AVMetadataObjectTypeCode39Code
</span><span class='line'>AVMetadataObjectTypeCode39Mod43Code
</span><span class='line'>AVMetadataObjectTypeEAN13Code
</span><span class='line'>AVMetadataObjectTypeEAN8Code
</span><span class='line'>AVMetadataObjectTypeCode93Code
</span><span class='line'>AVMetadataObjectTypeCode128Code
</span><span class='line'>AVMetadataObjectTypePDF417Code
</span><span class='line'>AVMetadataObjectTypeQRCode
</span><span class='line'>AVMetadataObjectTypeAztecCode</span></code></pre></td></tr></table></div></figure>


<p>当配置好<code>AVCaptureMetadataOutputObjectsDelegate</code>，就可以响应<code>- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputMetadataObjects:(NSArray *)metadataObjects fromConnection:(AVCaptureConnection *)connection;</code>检测到的所有条码。</p>

<h3><strong>更多</strong></h3>

<p>上面只是列出了少许新内容，你可以通过苹果提供的文档<a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html">What’s New in iOS</a> 查阅更多相关内容。</p>

<p>注：本文是iOS 7开发者指南中的11篇中的第1篇。你可以在<a href="http://www.doubleencore.com/2013/09/essential-ios-7-developers-guide">这里</a>看到指南的全部内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5中的Interface Builder更有利于团队协作开发]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/09/04/111-xcode-5-finally-makes-interface-builder-a-viable-option-for-teams/"/>
    <updated>2013-09-04T11:45:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/09/04/111-xcode-5-finally-makes-interface-builder-a-viable-option-for-teams</id>
    <content type="html"><![CDATA[<h2><strong>小引</strong></h2>

<p>在iOS开发中，开发者有各种理由选择用代码来构建界面，其中最多的理由就是Interface Builder绘制的代码不利于团队间协作(代码的可读性和合并)。虽然Interface Builder来绘制界面有诸多优势，但是由于致命的缺陷，许多开发团队不得不远离它，当然也有一些开发团队为了在协同开发时也使用IB来绘制界面，他们尽量确保同一时期只由一个人来操作某个xib文件，以此避免提交代码的时候需要合并xib文件。然而，在Xcode 5中，苹果的开发团队已经对xib文件格式做了大量的简化工作。本文就来简要的看看相关内容。</p>

<!--more-->


<p>注：本文译自<a href="http://nilsou.com/blog/2013/08/07/xcode-5-finally-makes-interface-builder-a-viable-option-for-teams/"><code>Xcode 5 Finally Makes Interface Builder a Viable Option for Teams</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li>Xcode 4中xib文件的格式</li>
<li>Xcode 5中xib文件的格式</li>
<li>小结</li>
</ul>


<p>上周我将代码merge到我的working branch时，注意到以前没曾见过的提示：</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/1.png"></p>

<p>Git会自动合并<strong>xib文件</strong>！我在想，Xcode 5中肯定对xib文件的格式做了修改，所以我准备深入研究一下。</p>

<p>原来由Xcode 5生成的xib文件是一种全新的格式。看起来苹果这次对xib文件格式的变更将有助于开发团队开始考虑使用IB来绘制界面。</p>

<h3><strong>* Xcode 4中xib文件的格式</strong></h3>

<p>为了演示xib文件格式在Xcode 4和Xcode 5中的差异，我首先在Xcode 4中创建了一个新的xib文件，并添加了一些view进去：一个UIScrollView，该scrollview中包含一些UIButton、UILable和TextView等。</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/2.png"></p>

<p>然后我在工程导航窗口中右键单击该文件，并选择<code>Open As &gt; Source Code</code>。下面的链接中是看到的内容：</p>

<p><a href="https://gist.github.com/nilsou/6057457">Xcode 4生成的.xib文件</a>(需要点击“File suppressed. Click to show.”)</p>

<p>可以看到，这么简单的一个view居然有<code>1108行</code>代码！这太多了。</p>

<p>对开发者来说它的可读性非常的糟糕。这是开发者为什么不喜欢xib文件的主要原因(由此放弃使用interface builder)。</p>

<p>更糟糕的是这个xib文件的格式还具有不确定性。也就是说如果我在Interface Builder创建相同的UI界面，但是我们看到的文件内容并不是相同的。这就导致xib文件的合并非常的困难，甚至不可能进行合并。这事开发者不使用xib文件的另外一个重要原因。</p>

<h3><strong>* Xcode 5中xib文件的格式</strong></h3>

<p>接着，我在Xcode 5中打开同一个工程。当在Xcode 5中打开用Xcode 4创建的xib文件时，会提示将文件升级到新的格式。这里需要注意的是升级之后的文件只能在Xcode 5中打开，这种新格式的文件不能在老版本中的Xcode中打开。所以，如果是团队协作开发，那么升级的时候，需要确保所有的开发者都使用Xcode 5。</p>

<p><img src="http://BeyondVincent.github.io/images/2013/09/3.png"></p>

<p>我点击<code>Upgrade</code>，然后再次打开xib文件的source code，看看有什么变化。如下链接中所示：</p>

<p><a href="https://gist.github.com/nilsou/6057474">Xcode 5生成的.xib文件</a>(需要点击“File suppressed. Click to show.”)</p>

<p><code>133行</code>！这与Xcode 4中创建的xib文件相差约10倍。可见苹果的开发团队已经对xib文件格式做了大量的简化。</p>

<p>再看看里面的具体内容，可以看出它的可读性也加强了。xib文件中的源代码现在也能够反应出view的层次(Interface Builder左边看到的内容结构！)，等熟悉之后，开发者可以直接对这个xml代码进行编写。</p>

<p>最重要的一点，可以看出Xcode 5生成的xib文件内容源码位置是确定的。这非常利于文件的合并。</p>

<h3><strong>小结</strong></h3>

<p>这种新的格式带来的最大好处不仅仅是增强开发者对xib文件的可读性，另外在大多数情况下，git还可以对xib文件进行自动合并，不用开发者手动进行。</p>

<p>现在如果还有开发者告诉你他不想用xib文件，那么请把这篇文章发给他看看吧，我相信已经没有太多理由不使用xib文件了。</p>

<p>其实在Xcode 5中不仅对Interface Builder进行了改善，还有其它一些功能也做了改进，例如自动布局约束的设置已经没有以前痛苦了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Professional iOS Network Programming翻译第一章：iOS网络功能简介]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/08/09/109-introducing-ios-networking-capabilities/"/>
    <updated>2013-08-09T16:52:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/08/09/109-introducing-ios-networking-capabilities</id>
    <content type="html"><![CDATA[<p><img src="http://BeyondVincent.github.io/images/2013/07/simple_social_network.png" width="400" height="300"></p>

<h2><strong>小引</strong></h2>

<p>在iOS开发中，网络是非常重要的功能，针对iOS开发者来说，掌握好iOS中网络功能的开发也是必不可少的。最近在看一本书:<a href="http://www.amazon.com/Professional-iOS-Network-Programming-Connecting/dp/1118362403"><code>Professional iOS Network Programming</code></a>，网络编程方面介绍比较全面，非常适合iOS开发者去读一读，由于精力有限，我在这里可能会挑选一部分内容进行翻译，也有可能全书翻译。</p>

<!--more-->


<h3><strong>目录</strong></h3>

<ul>
<li>Professional iOS Network Programming介绍</li>
<li>第一章：iOS网络功能简介

<ul>
<li>了解网络框架</li>
<li>iOS网络APIs

<ul>
<li>NSURLConnection</li>
<li>Game Kit</li>
<li>Bonjour</li>
<li>NSStream</li>
<li>CFNetwork</li>
<li>BSD Sockets</li>
</ul>
</li>
<li>Run Loops

<ul>
<li>Run Loop模型</li>
</ul>
</li>
<li>小结</li>
</ul>
</li>
</ul>


<h2><strong>Professional iOS Network Programming介绍</strong></h2>

<p>这本书主要介绍在iOS中的网络编程知识，主要包含如下内容：</p>

<pre><code>在客户端和服务器端之间进行HTTP请求
管理客户端和服务器端之间进行的数据负载
处理HTTP请求中的错误
网络通信中的安全
加强网络通信的性能
socket级别的通信
推送通知的实现
同一设备中两个程序间的通信
不同设备中两个程序间的通信
</code></pre>

<h2>第一章：<strong>iOS网络功能简介</strong></h2>

<p>本章的内容</p>

<pre><code>了解iOS网络框架
开发者可用的重要网络APIs
在程序中有效的利用run Loop
</code></pre>

<p>优秀的iOS程序需要简单和直观的用户界面，同样，具有与web service通信功能的优秀程序需要一个良好架构的网络层。在设计应用程序架构时，必须考虑到程序的灵活性，以适应经常变化的需求，并能够正确的处理不断变化的网络条件，同时还需要保持核心设计原则：可维护性和可扩展性。</p>

<p>当在设计移动应用程序的架构时，必须熟悉一些相关的核心概念，例如run loop，可用的网络APIs，以及这些APIs是如何与run loop整合起来实现一个具有响应式的网络应用程序框架。本章详细的探讨了run loop，以及如何在程序中对其有效的使用。同样，也对关键的APIs做了一个概述，并且介绍了什么时候应该使用什么APIs。</p>

<h3><strong>了解网络框架</strong></h3>

<p>在开发iOS应用程序(与网络交互的程序)之前，首先必须理解Objective-C中的网络层是如何组成的，如图1-1所示：</p>

<p><img src="http://BeyondVincent.github.io/images/2013/07/networking_layers_in_OC.jpg"></p>

<p>图1-1</p>

<p>如上图所示，每个iOS应用程序都都位于由四层组成的网络框架之上。最上面的是Cocoa层，该层包含了一些Objective-C写的APIs：<code>URl加载</code>，<code>Bonjour</code>和<code>Game Kit</code>。Cocoa之下是Core Foundation，该层包含了一组C语言写的APIs：<code>CFNetwork</code>，该层中的代码是大量应用层中网络代码的基础。CFNetwork在<code>CFStream</code>和<code>CFSocket</code>之上，提供了一个简单的网络接口。CFStream和CFSocket对BSD socket做了轻量级的封装，BSD是基于硬件上面的一层，它于无线通信相关硬件设备最接近。BSD socket是严格使用C实现的，通过BSD，开发者对网络中的任意通信(远程设备或者服务)拥有绝对控制权。</p>

<p>在上图中，越往下层走，会获得更高的控制权，但是相对于上一层来说易用性更差。苹果建议使用CFNetwork层以及之上的。在BSD层中的raw socket不能访问系统的VPN，也不能激活Wi-Fi或蜂窝无线模块，这些功能是由CFNetwork处理的。</p>

<p>在设计应用程序的网络层之前，开发者必须理解各种可用的APIs。下一节中会介绍iOS中关键的网络框架，并简短的解释一下如何使用它们。在本书后面的章节中，会详细介绍每个APi。</p>

<h3><strong>iOS网络APIs</strong></h3>

<p>在框架中的每层里面，都有一套关键的APIs提供给开发者相关的功能以及控制权。在图1-1中每层相对于下一层，会有更多的封装。不过封装之后，会失去一些控制权。本节就来大概的预览一下iOS中网络层关键的APIs，并探讨一下什么时候使用它们。</p>

<h5>NSURLConnection</h5>

<p>NSURLConnection是Cocoa中的一个API，它提供了一个简单的方法来请求URL，可以与web service进行交互，以获取一个图片或者视频，或者简单的获取一个HTML文档。NSURLConnection构建于NSStream之上，它支持4种通用的URI schemes：file，HTTP，HTTPS和FTP。虽然NSURLConnection限制了可以使用的协议，但是它封装了大量底层API必须要做的任务：对缓冲区进行读写，另外还内置支持认证(authentication)，并提供了一个健壮的缓存引擎。</p>

<p>实际上NSURLConnection本身提供的接口比较少，主要依赖于<code>NSURLConnectionDelegate</code>协议，通过该协议，应用程序可以与网络连接生命周期中的多个点进行交互。NSURLConnection的请求默认是异步的；不过也提供了一个同步请求方法。由于同步请求会阻塞当前调用的线程，所以必须根据具体情况来设计应用程序。在第三章(发起请求)中会详细介绍NSURLConnection，并提供了一些示例。</p>

<h6>Game Kit</h6>

<p>在iOS程序中，Game Kit提供了另外一种点对点(peer-to-peer)网络通讯的方法。在传统的网络配置中，Game Kit是构建于Bonjour之上的；不过Game Kit并不需要网络基础设施提供的功能。它可以创建ad-hoc Bluetooth Personal Area Networks(PAN)，通过该PAN可以让设备在邻近范围内或网络条件不允许的情况下，进行通讯，</p>

<p>Game Kit只需要一个会话id(session identifier)，显示的名称(display name)，以及配置网络时的连接模式。不需要配置socket，或其它任意底层网络通讯的连接。Game Kit使用GKSessionDelegate协议进行通讯。在第12章(利用Game Kit进行设备间的通讯)中介绍了将Game Kit集成到我们的程序中。</p>

<h6>Bonjour</h6>

<p><code>Bonjour</code>是苹果实现的零配置联网。Bonjour提供了这样一种机制：发现并连接到设备或者网络中的服务，这些过程中我们并不需要知道设备的网络地址，相反，Bonjour涉及到元祖名称，服务类型和域。Bonjour封装了底层网络接口需要的multicast DNS(mDNS)，以及基于DNS服务的发现(DNS-SD)。</p>

<p>在Cocoa层，NSNetService API提供了相关接口用来发布和解决Bonjour服务的地址信息。我们可以使用NSNetServiceBrowser API来发现网络中可用的服务。为了通信，发布一个Bonjour服务，即使是使用Cocoa层的API，也需要明白Core Foundation中对socket的配置。在第13章&#8221;Ad-Hoc Networking with Bonjour&#8221;中，深入介绍了零配置联网(Bonjour)，并给出了一个示例介绍如何实现一个基于Bonjour的服务。</p>

<h6>NSStream</h6>

<p><code>NSStream</code>是Cocoa层里面的API，构建于CFNetwork之上，是NSURLConnection的基础部分，并且还适用于较底层的网络任务。就像NSURLConnection，NSStream提供了一种与远程服务或者本地文件通信的机制。另外，还NSStream还可以在别的一些一些上进行通信，例如<code>telnet</code>，<code>SMTP</code>，NSURLConnection并不支持这些协议。</p>

<p>NSStream还提供了额外的一些控制功能，不过这是要付出代价的。NSStream并没有内置支持处理HTTP/S响应状态码的处理，也不支持认证功能。它是用C缓存器进行数据的发送和接收的，这跟Objective-C还有点区别。它也不能管理多个请求，如果需要相应的功能，需要在其子类中添加功能。NSStream是异步的，它通过NSStreamDelegate进行通信。在第8章中“Low-Level Networking”，以及第13章中“Ad-Hoc Networking with Bonjour”，都不同程度的实现了NSStream。</p>

<h6>CFNetwork</h6>

<p><code>CFNetwork API</code>构建于BSD socket之上，被用于NSStream、URL加载系统、Bonjour和Game Kit APIs的实现中。CFNetwork中默认支持一些上层协议，例如HTTP和FTP。CFNetwork和BSD socket最关键的区别就是集成了run loop。如果在程序中使用了CFNetwork，输入(input)和输出(output)事件会在线程的run loop中被调度。如果输入和输出事件发生于非主线程上，那么我们需要负责在这个线程中以适当的模式启动run loop。本章后面的“Run Loops”小节会有相关介绍。</p>

<p>CFNetwork提供的配置选项要比URL加载系统更多，这有好的一面，也有不好的一面。当利用CFNetwork创建一个HTTP请求时，这些配置选项是可见的。在创建请求的时候必须手动添加所有的HTTP header，以及cookies，然后与请求一起提交。而使用NSURLConnection时，标准的header和cookie jar中的任意cookies都自动的添加好了。</p>

<p>CFNetwork下面还有来自Core Foundation层中的CFSocket和CFStream APIs。CFNetwork中有一些用于特定协议的APIs，例如用于与FTP服务通讯的CFFTP，用于收发HTTP消息的CFHTTP，以及用于发布和浏览Bonjour服务的CFNetServices。第八章中将详细介绍CFNetwork，而在13章中会简要介绍一下Bonjour。</p>

<h6>BSD Sockets</h6>

<p>在网络架构中，<code>BSD Sockets</code>为网络通信提供了最基础的服务，也是最底层的一个APIs。BSD Socket是用C语言实现的，不过完全可以用在Objective-C代码中。一般不建议直接使用BSD Socket API，因为它在操作系统中没有任何hook。例如，BSD Socket既不走系统中的VPN通道，也没相关的API来自动激活已经关闭掉的Wi-Fi或蜂窝无线设备。苹果建议编程时使用CFNetwork或更高的层中的API。第8章中详细介绍了BSD Sockets以及CFNetwork，并提供了一个示例介绍了如何将它们集成到程序中。下一节将讨论run loop——从操作系统中检测网络事件，这些事件会被用于我们的程序中。</p>

<h3><strong>Run Loops</strong></h3>

<p>Run loop对应的类是<code>NSRunLoop</code>，它其实是线程中的一个基础组件，有了run loop之后，操作系统就能够唤醒休眠中的线程，以对即将到来的事件进行管理。一个run loop是一个循环配置的用来调度任务，并在一个时钟周期内处理即将到来的事件。在iOS程序中的每个线程中最多能有一个run loop。主线程中的run loop在程序启动的时候就默认开启了，并且当程序的delegate applicationDidFinishLaunchingWithOptions:被调用之后，我们就可以对其进行访问了。</p>

<p>在非主线程中，如果需要使用run loop，需要开发者明确的开启run loop。在非主线程中启动之前，必须添加一个输入源(input source)或者timer；否则run loop会立即退出。run loop给开发者提供了与线程交互的能力，不过并不是总是需要它的。例如有时候线程在处理大量数据时，并不不需要进行任何交互，此时就不需要启动run loop了。如果线程需要跟网络进行交互，此时就需要启动run loop。</p>

<p>Run loop接收的事件有两种源类型：输入源<code>(input sources)</code>和<code>计时器(timers)</code>。在输入源中一般要么是基于端口的，要么就是自定义的，这些事件通过异步的方式派发到程序中。这两种类型源的最大区别就是基于端口的内核信号源是自动的，而自定义的源必须在不同线程中手动管理相关信号。在创建自定义输入源时，可以通过CFRunLoopSourceRef实现多个回调函数。</p>

<p>计时器则是这样一种机制：基于时间进行通知应用程序在未来某个特定时间点执行某个特定的任务的。计时器事件也是通过异步的方式派发到程序中的，不过它还与特定的模式相关(下一节将介绍相关模式)。如果并不是当前监听的特定模式，这个计时器时间会被忽略，而线程也不会受到通知，直到run llop运行在相应的模式中。</p>

<p>翻译比较辛苦，下面给大家留点作业，让大家感受一下翻译吧。</p>

<p>You can configure timers to fire once or repeatedly. Rescheduling is based on the scheduled fire time, not the actual fire time. If a timer fires while the run loop is executing an application handler method, it waits until the next pass through the run loop to call the timer handler, typically set via @selector(). If firing the handler is delayed to the point in which the next invocation occurs, the timer fires only one event with the delayed event being suppressed.
Run loops can also have observers, which are not monitored and provide a way for objects to receive callbacks as certain activities in the run loop execution occur. These activities include when the run loop is entered or exited, as the run loop goes to sleep or wakes up, and before the run loop processes an input source or timer. They are documented in the CFRunLoopActivity enumeration. Observers can be configured to fire once, which removes the observer after ithas been fired, or repeatedly. To add a run loop observer, use the Core Foundation function CFRunLoopObserverRef().</p>

<h4>Run Loop模型</h4>

<p>Each pass through the run loop is run in a specific mode specified by you. Run loop modes are a convention used by the operating system to filter the sources that are monitored and allowed to deliver events, such as calling a delegate method. Modes include the input sources and timers that should be monitored as well as any observers that should be notified of run loop events.
There are two predefined run loop modes in iOS. NSDefaultRunLoopMode (kCFRunLoopDefaultMode in Core Foundation) is the system default and should typicallybe used when starting run loops and configuring input sources.
NSRunLoopCommonModes (kCFRunLoopCommonModes in Core Foundation) is a collection of modes that is configurable. Assigning NSRunLoopCommonModes to an input source by calling a method such as scheduleInRunLoop:forMode: on an input source instance associates it with all modes currently in the group.
Although NSRunLoopCommonModes is configurable, it is a low-level process that requires calling the Core Foundation function CFRunLoopAddCommonMode(). This automatically registers input sources, timers, and observers with the new mode instead of manually adding them to each new mode. You can define custom run loop modes by specifying a custom string such as @&ldquo;CustomRunLoopMode&rdquo;. For your custom run loop to be effective, you must add at least one input source, timer, or observer.
Although this provides an overview of run loops, Apple provides several in-depth resources onrun loop management that you should review if you develop advanced, network-based, and multi- threaded applications. The developer documentation is available at <a href="https://developer.apple">https://developer.apple</a> .com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/ RunLoopManagement.html. Networking techniques that benefit from run loop integration are discussed in their respective chapters such as Chapter 8, “Low-Level Networking” and Chapter 13, “Ad-Hoc Networking with Bonjour.</p>

<p>相关更多资料请看这里：<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html"><code>RunLoopManagement</code></a></p>

<h3><strong>小结</strong></h3>

<p>对于iOS开发者来说，理解iOS网络框架中的各层，以及应用程序如何与run loop交互是非常重要的。一个优秀的网络架构层会给应用程序提供难以置信的灵活度。如果网络架构层的设计非常糟糕，那么这是很难获得成功和扩展能力的。</p>

<p>本章预览了一下各个网络APIs，并做了一些比较。在这里只是简单的介绍了一下，在后续章节中，会深入讨论。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Octopress搭建一个Github博客]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/08/03/108-creating-a-github-blog-using-octopress/"/>
    <updated>2013-08-03T13:38:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/08/03/108-creating-a-github-blog-using-octopress</id>
    <content type="html"><![CDATA[<p><img src="http://BeyondVincent.github.io/images/2013/08/github_page_and-octopress.png"></p>

<h2>小引</h2>

<p><a href="http://octopress.org/"><code>Octopress</code></a>是利用<a href="http://github.com/mojombo/jekyll"><code>Jekyll</code></a>博客引擎开发的一个博客系统，生成的静态页面能够很好的在github page上展现。号称是hacker专属的一个博客系统(<code>A blogging framework for hackers.</code>)</p>

<p>根据大家的反应，本文我就来介绍一下如何在苹果电脑(OS X 10.8.3)利用Octopress搭建一个Github博客。本文需要读者熟悉一些shell命令，并掌握基本的git操作。</p>

<!--more-->


<h3>目录</h3>

<ul>
<li>1、安装Ruby</li>
<li>2、安装Octopress</li>
<li>3、配置Octopress</li>
<li>4、将博客部署到GitHub上</li>
<li>5、开始写博客</li>
<li>6、更多操作</li>
<li>7、小结</li>
</ul>


<h3>1、安装Ruby</h3>

<p>Octopress需要Ruby环境，RVM(Ruby Version Manager)负责安装和管理Ruby的环境。所以我们先在终端输入如下命令，来安装RVM：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby</span></code></pre></td></tr></table></div></figure>


<p>接着是安装Ruby 1.9.3，在终端依次运行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<p>完成上面的操作之后，运行<code>ruby --version</code>应该可以看到ruby 1.9.3环境已经安装好了。</p>

<p>参考：<a href="http://octopress.org/docs/setup/rvm/">Installing Ruby With RVM</a></p>

<h3>2、安装Octopress</h3>

<p>在安装Octopress之前，请确保你的电脑上已经安装有git了，在终端输入<code>git --version</code>，应该可以看到电脑中的git版本(我电脑上输出:<code>git version 1.7.12.4 (Apple Git-37)</code>)，如果没有显示相关内容，请先安装<a href="http://git-scm.com/">git</a>。</p>

<p>git安装之后，利用git命令将octopress从github上clone到本机，如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</span><span class='line'>ruby --version  # Should report Ruby 1.9.3</span></code></pre></td></tr></table></div></figure>


<p>接着安装相关依赖项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>最后安装默认的Octopress 主题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>参考： <a href="http://octopress.org/docs/setup/">Octopress Setup</a></p>

<h3>3、配置Octopress</h3>

<p>Octopress的作者已经尽量让配置简化了。大多数情况下只需要配置<code>_config.yml</code>和<code>Rakefile</code>文件即可。其中Rakefile是跟博客部署相关，一般情况下并不需要修改这个文件，除非使用了rsync。</p>

<p><em>config.yml是博客重要的一个配置文件，在</em>config.yml文件中有三大配置项：<code>Main Configs</code>、<code>Jekyll &amp; Plugins</code>和<code>3rd Party Settings</code>。</p>

<p>一般，该文件中其中<code>url</code>是必须要填写的，这里的url是在github上创建的一个仓库地址，具体请看第四步中创建的地址。另外再修改一下<code>title</code>、<code>subtitle</code>和<code>author</code>，根据需求，在开启一些第三方组件服务。</p>

<p>关于_config.yml文件中的更多内容，请看这里的内容：<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a></p>

<p>建议：最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。同理，修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉。from<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/"><code>唐巧的博文中—配置</code></a>。</p>

<h3>4、将博客部署到GitHub上</h3>

<p>Github的<a href="http://pages.github.com/"><code>Page service</code></a>可以免费托管博客，并且还可以自定义域名。</p>

<p>首先需要在GitHub上<a href="https://github.com/new"><code>创建一个仓库</code></a>，并将仓库名称按照这样的方式进行命名：<code>username.github.com</code>或<code>organization.github.com</code>。等后面配置完毕之后，我们就可以在浏览器中使用页面地址<code>http://username.github.com</code>来访问我们的博客。一般来说，我们希望在将博客的源码放到source分支下，并把生成的内容提交到master分支。</p>

<p>创建好仓库之后，我们需要利用octopress的一个<code>配置rake任务</code>来自动配置上面创建的仓库：可以让我们方便的部署GitHub page。在终端输入如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>上面的命令会做一些事情(详细介绍看下面给出的参考链接)。其中最主要的就是创建一个<code>_deploy</code>目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。</p>

<p>完成上面的命令之后，我们就可以生成博客并真正的部署到仓库中了。执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>上面的命令首先生成博客文件，并将生成的博客文件拷贝到<code>_deploy/</code>目录下，然后将这些内容添加到git中，并commit和push到仓库的master分支。</p>

<p>现在可以访问<code>http://username.github.com</code>了。注意：有时候可能会有延时，要等几分钟才能打开。</p>

<p>至此，我们的博客已经完成基本的部署，不过博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'Initial source commit'
</span><span class='line'>$ git push origin source</span></code></pre></td></tr></table></div></figure>


<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入<code>rake preview</code>命令，然后就能在浏览器中进行本地预览访问了：<code>http://127.0.0.1:4000/</code>或<code>http://localhost:4000/</code>，效果跟仓库中的一样。</p>

<p>参考：<a href="http://octopress.org/docs/deploying/">Deploying to Github Pages</a></p>

<h3>5、开始写博客</h3>

<p>Octopress为我们提供了一些task来创建博文和页面。博文必须存储在<code>source/_posts</code>目录下，并且需要按照Jekyll的命名规范对文章进行命名：<code>YYYY-MM-DD-post-title.markdown</code>。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<p>通过Octopress提供的task可以正确的按照命名规范创建一个博文，并且在博文中会附带常用的一些yaml元数据。只需要在终端输入如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：<code>source/_posts/2013-08-03-title.markdown</code>。打开这个文件，可以看到里面有如下一些内容了(告诉Jekyll博客引擎如何处理博文和页面)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "title"
</span><span class='line'>date: 2013-08-03 16:36
</span><span class='line'>comments: true
</span><span class='line'>categories: 
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>接着我们就可以在这个文件中写我们的博文啦。完成之后，我们可以预览和部署博文。下面是创建并部署博文的一个完整过程：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["New Post"]
</span><span class='line'>$ rake generate
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -am "Some comment here." 
</span><span class='line'>$ git push origin source
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>参考：<a href="http://octopress.org/docs/blogging/">Blogging Basics</a></p>

<h3>6、更多操作</h3>

<p>在搭建博客的时候，我们可能会对博客做一些配置，例如添加评论、域名解析、分享等。这些内容我写在另外一篇文章中，会经常更新，请前往观看：<a href="http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/"><code>你好！github页面</code></a>。</p>

<h3>7、小结</h3>

<p>本文介绍了如何利用Octopress搭建一个Github博客。大家在搭建的时候，要是遇到问题，可以回复我。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好！github页面]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/27/107-hello-page-of-github/"/>
    <updated>2013-07-27T14:44:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/27/107-hello-page-of-github</id>
    <content type="html"><![CDATA[<p><img src="http://BeyondVincent.github.io/images/2013/07/wordpress_to_octopress.png"></p>

<h3>大家好，我是破船！欢迎大家关注我的小站！</h3>

<p>我写博文经历了这些平台：
百度空间-><a href="http://www.devdiv.com/home.php?mod=space&amp;uid=12&amp;do=blog&amp;view=me&amp;from=space"><code>devdiv</code></a>><a href="http://blog.sina.com.cn/beyondvincent"><code>新浪博客</code></a>&ndash;><a href="http://blog.csdn.net/beyondvincent"><code>CSDN</code></a>&ndash;><code>wordpress</code>&ndash;><code>octopress</code>(现在)</p>

<!--more-->


<p>用wordpress搭建的博客，用了4个月，由于有好多麻烦事(备份、空间和流量等各种不爽)，现在果断在github上配合octopress搭建一个博客。</p>

<p>由于<code>git</code>和<a href="http://en.wikipedia.org/wiki/Markdown"><code>markdown</code></a>对我来说就是小白，所以搭建的时间断断续续持续了约一周。其实网上已经有很好的参考资料了，只要照着弄，很容易就能搭建好的。</p>

<p>这篇文章是第一篇，我用的markdown编辑器是<a href="http://mouapp.com/"><code>Mou</code></a>，感觉不错。</p>

<p>下面是一些在mac机器上用octopress写博文需要用到的操作(持续更新)</p>

<h3>目录</h3>

<ul>
<li>发表并部署博文</li>
<li>添加多说评论功能</li>
<li>起草文章 暂不公开</li>
<li>域名解析</li>
<li>添加百度统计和google analytics</li>
</ul>


<h3>发表并部署博文</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["New Post"]
</span><span class='line'>$ rake generate
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -am "Some comment here." 
</span><span class='line'>$ git push origin source
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h3>添加多说评论功能</h3>

<h4>A 获取<code>short_name</code></h4>

<p>去多说网注册账号，获取站点的short_name</p>

<h4>B 在<code>_config.yml</code>文件中添加如下内容</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># duoshuo comments
</span><span class='line'>duoshuo_comments: true
</span><span class='line'>duoshuo_short_name: yourname</span></code></pre></td></tr></table></div></figure>


<h4>C 在<code>source/_layouts/post.html</code>中添加多说评论模块</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>｛% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %｝
</span><span class='line'>  &lt;section&gt;
</span><span class='line'>    &lt;h1&gt;Comments&lt;/h1&gt;
</span><span class='line'>    &lt;div id="comments" aria-live="polite"&gt;｛% include post/duoshuo1.html %｝&lt;/div&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>｛% endif %｝</span></code></pre></td></tr></table></div></figure>


<h4>D 创建<code>source/_includes/post/duoshuo.html</code>，并填入如下内容</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- Duoshuo Comment BEGIN --&gt;
</span><span class='line'>&lt;div class="ds-thread"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>  var duoshuoQuery = {short_name:"beyondvincent"};
</span><span class='line'>  (function() {
</span><span class='line'>    var ds = document.createElement('script');
</span><span class='line'>    ds.type = 'text/javascript';ds.async = true;
</span><span class='line'>    ds.src = 'http://static.duoshuo.com/embed.js';
</span><span class='line'>    ds.charset = 'UTF-8';
</span><span class='line'>    (document.getElementsByTagName('head')[0] 
</span><span class='line'>    || document.getElementsByTagName('body')[0]).appendChild(ds);
</span><span class='line'>  })();
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;!-- Duoshuo Comment END --&gt;</span></code></pre></td></tr></table></div></figure>


<h4>E 发布到站点</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -am "添加多说评论" 
</span><span class='line'>$ git push origin source
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h3>起草文章暂不公开</h3>

<p>在文章头部添加<code>published: false</code>，就能起到暂时不公开文章了(即使已经部署到了github中)，要公开文章只需要将false修改<code>true</code>即可。</p>

<h3>域名解析</h3>

<p>我们可以给GitHub上的page指定一个域名，具体做法如下2个步骤</p>

<h4>1、给repo配置域名</h4>

<p>在<code>source</code>根目录下新建一个名为CNAME的文件，并把你的域名填写进去，例如<code>beyondvincent.com</code>。这样做的目的是告诉GitHub服务器开始将repo中的page(例如<code>beyondvincent.github.io</code>)指向到某个域名中。</p>

<h4>2、配置DNS(我的域名是在godaddy上购买的)</h4>

<p>添加一条A记录：
<code>@  204.232.175.78</code>
在CNAME中添加一条记录：
<code>http   beyondvincent.github.com</code></p>

<h3>添加百度统计和google analytics</h3>

<p>从百度统计获取脚本，然后添加到文件<code>source/_includes/after_footer.html</code>文件中
从google analytics获取跟踪ID，然后将这个ID添加到<code>_config.yml</code>文件的<code>google_analytics_tracking_id</code>后面即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac和iOS开发资源汇总—更新于2013-08-19]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/18/106/"/>
    <updated>2013-07-18T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/18/106</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/1U55JG9-0.jpg"><img class="alignnone size-full wp-image-1661" alt="1U55JG9-0" src="http://beyondvincent.com/wp-content/uploads/2013/07/1U55JG9-0.jpg" width="590" height="578" /></a></p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>本文主要汇集一些苹果开发的资源，会经常更新，建议大家把这篇文章单独收藏(在浏览器中按<strong><span style="color: #339966;">command+D</span></strong>)。</p>

<!--more-->


<p>今天(2013年7月19日)收录了许多中文网站和博客。大家一定要去感受一下哦。</p>

<p>如果大家有知道不错的站点，可以告诉我。</p>

<p>&nbsp;</p>

<h2><strong><span style="color: #339966;">目录</span></strong></h2>

<p><strong><span style="color: #339966;">1、苹果官方文档</span></strong><br/>
<strong><span style="color: #339966;"> 2、邮件列表</span></strong><br/>
<strong><span style="color: #339966;"> 3、论坛</span></strong><br/>
<strong><span style="color: #339966;"> 4、网站</span></strong><br/>
<strong><span style="color: #339966;"> 5、博客</span></strong><br/>
<strong><span style="color: #339966;"> 6、大会</span></strong><br/>
<strong><span style="color: #339966;"> 7、播客和录像</span></strong></p>

<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">1、苹果官方文档</span></strong></h2>

<p>构建iOS程序：下面的这篇文章介绍了 iOS 程序开发的过程：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://developer.apple.com/library/ios/#referencelibrary/GettingStarted/RoadMapiOS/chapters/RM_YourFirstApp_iOS/Articles/01_CreatingProject.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Start Developing iOS Apps Today</span></a></span></span></strong></p>

<p>构建Mac OS X程序：下面这篇文章介绍了Mac OS X开发的过程：<br/>
<span style="color: #339966;"><strong><span style="text-decoration: underline;"><span style="text-decoration: underline;"><a href="https://developer.apple.com/library/mac/#referencelibrary/GettingStarted/RoadMapOSX/chapters/01_Introduction.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Start Developing Mac Apps Today</span></a></span></span></strong></span></p>

<p>Objective-C：下面的这个链接是苹果官方介绍Objective-C的文档：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Programming with Objective-C</span></a></span></span></strong></p>

<p>Xcode：下面这个链接是苹果官方介绍Xcode用户指南。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://developer.apple.com/library/mac/#documentation/ToolsLanguages/Conceptual/Xcode_User_Guide/000-About_Xcode/about.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Xcode User Guide</span></a></span></span></strong></p>

<h2></h2>

<h2><strong><span style="color: #339966;">2、邮件列表</span></strong></h2>

<p>Cocoa-dev：由苹果负责运维，最初内容是与Mac OS X 中的Cocoa相关，目前在这个list上的许多开发者可以帮助你解决 iOS 相关问题（提问的时候最好先搜索一下，之前是否有人提问过相关问题）。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://lists.apple.com/mailman/listinfo/cocoa-dev" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="https://lists.apple.com/mailman/listinfo/cocoa-dev">https://lists.apple.com/mailman/listinfo/cocoa-dev</a></span></a></span></span></strong></p>

<p>Xcode-user：由苹果负责运维，该邮件列表是跟Xcode相关：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://lists.apple.com/mailman/listinfo/xcode-users" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="https://lists.apple.com/mailman/listinfo/xcode-users%C2%A0">https://lists.apple.com/mailman/listinfo/xcode-users%C2%A0</a></span></a></span></span></strong></p>

<p>Quartz-dev： 有苹果负责运维，该邮件列表主要是讨论Quartz 2D和Core Graphics相关技术：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://lists.apple.com/mailman/listinfo/quartz-dev" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://lists.apple.com/mailman/listinfo/quartz-dev">http://lists.apple.com/mailman/listinfo/quartz-dev</a></span></a></span></span></strong></p>

<p>iPhone SDK开发：这是第三方的一个邮件列表，主要讨论 iOS 开发。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://groups.google.com/group/iphonesdkdevelopment" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://groups.google.com/group/iphonesdkdevelopment">http://groups.google.com/group/iphonesdkdevelopment</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<h2><strong><span style="color: #339966;">3、论坛</span></strong></h2>

<p><strong><span style="color: #ff0000;">英文</span></strong></p>

<p>Learn Cocoa Forum：该论坛是书籍Learn cocoa on the Mac and Beginning iOS Development的官方论坛。活跃度非常不错，有初学者，也有经验丰富的开发者。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://forum.learncocoa.org/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://forum.learncocoa.org/">http://forum.learncocoa.org/</a></span></a></span></span></strong></p>

<p>Cocoa Cafe：这是法国的一个论坛(主要是法语)<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://www.cocoacafe.fr" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.cocoacafe.fr">http://www.cocoacafe.fr</a></span></a></span></span></strong></p>

<p>Apple Developer Forums：这是苹果官方的开发者社区，主要讨论 iOS 和Mac软件开发。许多 iOS 开发初学者和有经验的人(包括苹果的工程师和步道师)，都经常为这个论坛做着贡献。在这里是预发布版的SDK(在NDA限制下)是唯一可以合法讨论的地方。要访问该论坛，需要注册一个Apple ID。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://devforums.apple.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://devforums.apple.com/">http://devforums.apple.com/</a></span></a></span></span></strong></p>

<p>Apple Discussions，Developer Forums：这是苹果的社区论坛(针对Mac和iOS软件开发者)：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://discussions.apple.com/community/developer_forums?categoryID=164" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="https://discussions.apple.com/community/developer_forums?categoryID=164">https://discussions.apple.com/community/developer_forums?categoryID=164</a></span></a></span></span></strong></p>

<p>Apple Discussions，iPhone：这是讨论iPhone的苹果社区论坛<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://discussions.apple.com/community/iphone?categoryID=201" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="https://discussions.apple.com/community/iphone?categoryID=201%C2%A0">https://discussions.apple.com/community/iphone?categoryID=201%C2%A0</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<p><strong><span style="color: #ff0000;">中文</span></strong></p>

<p>CocoaChina：CocoaChina创立于2008年3月，是一个苹果产品和 iOS 开发的中文社区网站，主要为苹果产品开发者提供资讯、信息及服务。<br/>
<span style="text-decoration: underline; color: #339966;"><strong><span style="text-decoration: underline;"><a href="http://www.cocoachina.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.cocoachina.com/">http://www.cocoachina.com/</a></span></a> </span></strong></span></p>

<p>DevDiv：国内早期比较流行的一个移动开发者社区之一，涉猎 iOS、Android和Windows Phone等各移动平台开发。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.devdiv.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.devdiv.com/">http://www.devdiv.com/</a></span></a></span></span></strong></p>

<p>泰然网：成立于2011年9月，由泰然翻译团队，泰然技术团队，泰然管理团队组成。翻译了大量国外优秀文章，同时也有许多经典原创。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.ityran.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.ityran.com/">http://www.ityran.com/</a></span></a></span></span></strong></p>

<p>Cocos2d-x：Cocos2d-x 是一个开源的支持多平台的 2D 手机游戏引擎。国内难得的一个优秀开源项目。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.cocos2d-x.org/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.cocos2d-x.org/">http://www.cocos2d-x.org/</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<h2><strong><span style="color: #339966;">4、网站</span></strong></h2>

<p><span style="color: #ff0000;"><b>英文</b></span></p>

<p>github：当下最牛叉的开源代码库和版本控制系统。<br/>
<span style="color: #339966;"><strong><span style="text-decoration: underline;"><span style="text-decoration: underline;"><a href="https://github.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="https://github.com/">https://github.com/</a></span></a></span></span></strong></span></p>

<p>Stack Overflow：这是针对程序员的社区问答网站。许多有经验的iOS程序员会常驻这里回答问题：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/">http://stackoverflow.com/</a></span></a></span></span></strong></p>

<p>除了访问Stack Overflow主站以外，还可以使用标签来浏览iOS开发的相关主题：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/tagged/objective-c" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/tagged/objective-c">http://stackoverflow.com/questions/tagged/objective-c</a></span></a></span></span></strong><br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/tagged/iphone" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/tagged/iphone">http://stackoverflow.com/questions/tagged/iphone</a></span></a></span></span></strong><br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/tagged/xcode" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/tagged/xcode">http://stackoverflow.com/questions/tagged/xcode</a></span></a></span></span></strong><br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/tagged/ios" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://stackoverflow.com/questions/tagged/ios">http://stackoverflow.com/questions/tagged/ios</a></span></a></span></span></strong></p>

<p>maniacdev：该站点是由软件开发者Johann Dowa维护。内容主要包括：iOS 程序开发库、控件、教程、示例和工具。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://maniacdev.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://maniacdev.com/">http://maniacdev.com/</a></span></a></span></span></strong></p>

<p>Cocoa Controls：在这个站点可以找到许多免费并开源的GUI组件(包括iOS和Mac OS)。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://cocoacontrols.com" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://cocoacontrols.com">http://cocoacontrols.com</a></span></a></span></span></strong></p>

<p>NSHipster： 这个站点介绍Objective-C和Cocoa的相关内容。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://nshipster.com" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://nshipster.com">http://nshipster.com</a></span></a></span></span></strong></p>

<p>iOS Fonts：详细列出了iOS中可用的字体。可以选择不同 iOS 版本支持的字体。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://iosfonts.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://iosfonts.com/">http://iosfonts.com/</a></span></a></span></span></strong></p>

<p>Cocoa Dev Central：从2001年以来，该站点就是Mac OS X编程中最流行的站点之一。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://cocoadevcentral.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://cocoadevcentral.com/">http://cocoadevcentral.com/</a></span></a></span></span></strong></p>

<p>cocoanetics： 网站负责人号称天生就是写Objective-C的，里面的文章更新频率也比较快，好多内容(例如Core data)的介绍都比较深入，值得关注。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.cocoanetics.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.cocoanetics.com/">http://www.cocoanetics.com/</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<p><strong><span style="color: #ff0000;">中文</span></strong></p>

<p>iOS Feed：该站点由许小帅负责维护，许小帅目前任职于腾讯。iOS Feed汇集了许多优秀的iOS开发文章，经常会有新的更新。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://iosfeed.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://iosfeed.com/">http://iosfeed.com/</a></span></a></span></span></strong></p>

<p>Code4App：code4app是一个移动平台的代码库，目前收集了iOS平台几百个代码，并且配有效果图和演示视频。<br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://code4app.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://code4app.com/">http://code4app.com/</a></span></a></strong></span></span></p>

<p>UI4APP：收集了许多iOS应用的截图，并进行分类浏览，方便美工设计找素材、找灵感。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://ui4app.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://ui4app.com/">http://ui4app.com/</a></span></a></span></span></strong></p>

<p>苹果核：该站点由多人一起维护，其中一名是来自天猫的高嘉峻。苹果核主要探讨开发ios开发，介绍mac os应用，谈论apple产品发展，关注apple相关的一切。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://pingguohe.net/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://pingguohe.net/">http://pingguohe.net/</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<h2><strong><span style="color: #339966;">5、博客</span></strong></h2>

<p><strong><span style="color: #ff0000;">英文</span></strong></p>

<p>Matt Gemmell的博客：Matt对Objective-C 开发拥有丰富的经验和观点，这些观点非常值得我们去关注<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.mattgemmell.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.mattgemmell.com/">http://www.mattgemmell.com/</a></span></a></span></span></strong></p>

<p>Cocoa is my Girlfriend：这是有Marcus Zarra带领的一批博客，主要集中在iOS和Cocoa开发的问题上。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://cimgf.com" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://cimgf.com">http://cimgf.com</a></span></a></span></span></strong></p>

<p>Ray Wenderlich的博客：实际上Ray站点发展到现在，已经非常的庞大，感觉有点不想博客了，不过还是将其列在博客范围内。对于iOS开发者这个站点提供了非常好的资源，涉及的主题也非常广泛。虽然许多内容是针对游戏开发者的，但是在这个站你总能发现感兴趣的东西。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.raywenderlich.com" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.raywenderlich.com">http://www.raywenderlich.com</a></span></a></span></span></strong></p>

<p>Wolf Rentzsch的博客：Wolf是一个有丰富经验的Cocoa独立开发者，也是C4独立开发者大会(现在已经解散)的创始人。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rentzsch.tumblr.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://rentzsch.tumblr.com/">http://rentzsch.tumblr.com/</a></span></a></span></span></strong></p>

<p>iDevblogaDay：这是一个有多个作者贡献的博客，阅读这里的内容，会从不同的开发者者身上发现新的见解。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://idevblogaday.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://idevblogaday.com/">http://idevblogaday.com/</a></span></a></span></span></strong></p>

<p>Wil Shipley的博客：在这个星球上，Wil是一个拥有丰富Objective-C开发经验的程序员。他博客中的<strong><em><span style="color: #339966;">Pimp My Code</span></em></strong>系列文章是每一个Objective-C程序都应该阅读的。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://blog.wilshipley.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://blog.wilshipley.com/">http://blog.wilshipley.com/</a></span></a></span></span></strong></p>

<p>Jeff lamarche的博客：Jeff是MartianCraft的创始人，也是Beginning iOS Development系列书籍的作者之一。Jeff是一个非常博学的开发者。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://iphonedevelopment.blogspot.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://iphonedevelopment.blogspot.com/">http://iphonedevelopment.blogspot.com/</a></span></a></span></span></strong></p>

<p>Mike Ash的博客：博客中Mike收集了一些iOS相关的Q&amp;A。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.mikeash.com/pyblog/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.mikeash.com/pyblog/">http://www.mikeash.com/pyblog/</a></span></a></span></span></strong></p>

<p>Joe Conway的博客：Jeo在Big Nerd Ranch带了很长时间，他的博客里面有许多有用的iOS/Cocoa代码和提示。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://stablekernel.com/blog/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://stablekernel.com/blog/">http://stablekernel.com/blog/</a></span></a></span></span></strong></p>

<p>objc.io：深度介绍iOS开发中的最佳实践经验和高级技术。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.objc.io/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.objc.io/">http://www.objc.io/</a></span></a></span></span></strong></p>

<p>iOS Developer Tips：2008年John Muchow就开始写这个博客了。这是第一批关于iPhone开发的博客。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://iosdevelopertips.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://iosdevelopertips.com/">http://iosdevelopertips.com/</a></span></a></span></span></strong></p>

<p>Gregory Hill的博客：里面有许多关于本地化处理的文章。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://blog.appliedis.com/author/gregory-hill/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://blog.appliedis.com/author/gregory-hill/">http://blog.appliedis.com/author/gregory-hill/</a></span></a></span></span></strong></p>

<p>iOS Dev Weekly：这是一些简讯集合的博客，由Dave Verwer负责，订阅之后，每周都会有更新，非常棒。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://iosdevweekly.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://iosdevweekly.com/">http://iosdevweekly.com/</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<p><strong><span style="color: #ff0000;">中文</span></strong></p>

<p>王巍的博客：王巍目前在日本横滨任职于有趣法人。工作内容主要进行Unity3D开发，8小时之外经常进行iOS/Mac开发。他的陈列柜中已有多款应用，其中番茄工作法工具非常棒。<br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://onevcat.com" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://onevcat.com">http://onevcat.com</a></span></a></strong></span></span></p>

<p>池建强的博客： 池建强，70后程序员，Blogger。98年毕业，先后就职于洪恩软件、RocketSofeware和用友软件工程公司（后更名为瑞友科技），现任瑞友科技IT应用研究院副院长。该博客最初每天发送一条Mac技巧，不过目前已经形成了一种技术和人文结合的风格，时而随笔，时而技术。<br/>
<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://macshuo.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://macshuo.com/">http://macshuo.com/</a></span></a></strong></span></span></p>

<p>唐巧的博客： 唐巧是前网易有道员工，现在在粉笔网创业中，负责iOS端的开发。博客中的每篇文章都堪称精华，近期分析了支付宝客户端的插件机制，值得细细品读。<br/>
<span style="color: #339966;"><strong><span style="text-decoration: underline;"><a href="http://blog.devtang.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://blog.devtang.com/">http://blog.devtang.com/</a></span></a></span></strong></span></p>

<p>许小帅的博客：许小帅目前任职于腾讯，他还是iOS Feed站点的负责人。博客中对支付宝钱包插件分析的文章，引起了支付宝开发团队的反思，大家可以去感受一下。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://imallen.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://imallen.com/">http://imallen.com/</a></span></a></span></span></strong></p>

<p>蓝晨钰的博客：晨钰目前就读于中山大学。是一名90后iOS开发者。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://gracelancy.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://gracelancy.com/">http://gracelancy.com/</a></span></a></span></span></strong></p>

<p>萧宸宇的博客：萧宸宇目前任职于Sumi Interactive。他出生于西南一个边陲小镇，梦想着能走出家乡，看看祖国的大好河山。他拥有丰富的 iOS 开发经验，在他的博客中发表了许多 iOS 开发的文章。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://iiiyu.com/ " target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://iiiyu.com/%C2%A0">http://iiiyu.com/%C2%A0</a></span></a></span></span></strong></p>

<p>陶丰平的博客：陶丰平目前任职于花瓣网，喜欢技术，喜欢音乐。他在软件开发领域有丰富的开发经验。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.taofengping.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.taofengping.com/">http://www.taofengping.com/</a></span></a></span></span></strong></p>

<p>乔学士的博客：乔学士目前任职于创业公司拓词，他正在为成为“代码手工艺人”而努力，目前主要进行 iOS 开发。最近他做得非常精彩的一件事就是汇总了WWDC 2013 视频英文字幕下载，大家可以前往他的博客感受一下。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://joeyio.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://joeyio.com/">http://joeyio.com/</a></span></a></span></span></strong></p>

<p>破船的博客：破船在移动领域摸爬滚打多年，经历了Symbian、Windows Mobile、Windows Phone和 iOS 等的洗礼。他希望能充分利用业余时间，努力做一名伪步道师。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://beyondvincent.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://beyondvincent.com/">http://beyondvincent.com/</a></span></a></span></span></strong></p>

<p>陈咏聪的博客：陈咏聪现任职于百度，从事 iOS 相关开发。他热爱Web事业，关注设计、产品、开发。沉迷代码，无法自拔。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://vinqon.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://vinqon.com/">http://vinqon.com/</a></span></a></span></span></strong></p>

<p>骆仕恺的博客：骆仕恺目前任职于爱折客 / 爱美味。他主要从事 iOS 和Java开发。拥有丰富的 iOS 开发经验。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://luosky.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://luosky.com/">http://luosky.com/</a></span></a></span></span></strong></p>

<p>耿健桓的博客：耿健桓目前在清华大学攻读硕士，之前他是著名站点知乎的 iOS 技术主管。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://dlog.dismory.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://dlog.dismory.com/">http://dlog.dismory.com/</a></span></a></span></span></strong></p>

<p>李择一的博客：李择一目前任职于百度，他在移动开发领域积累了丰富的经验，特别是 iOS 开发。最近他在博客中发表关于OC中block的追究非常有深度，大家一定要去感受一下。<br/>
<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://cnblogs.com/biosli" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://cnblogs.com/biosli">http://cnblogs.com/biosli</a></span></a></span></strong></span></p>

<p>王轲的博客：王轲是一名 iOS 独立开发者，也是IndieBros Studio创始人。在博客中有几篇关于 iOS 性能优化的文章，值得大家去看看。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.iwangke.me/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.iwangke.me/">http://www.iwangke.me/</a></span></a></span></span></strong></p>

<p>杨宇建的博客： 杨宇建目前任职于载信软件。在他的博客中有许多 iOS 开发的文章，都是干货。<br/>
<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://www.cnblogs.com/easonoutlook/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.cnblogs.com/easonoutlook/">http://www.cnblogs.com/easonoutlook/</a></span></a></span></strong></span></p>

<p>连栩的博客： 连栩目前工作在加拿大温哥华，运营着自己的公司 Beyondcow，他是一名 OSX、iOS 程序员同时也是用户体验，交互界面设计师。在开发的软件 Miao 是一款全功能 Mac 微博客户端。他的博客中有许多Cocoa开发的文章，值得大家去品读。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://lianxu.me/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://lianxu.me/">http://lianxu.me/</a></span></a></span></span></strong></p>

<p>高嘉峻的博客：高嘉峻目前任职于天猫。是一名资深80后，号称会写代码的猪。最近他的博客中出现了两篇关于iOS中单元测试的文章，非常棒。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://jiajun.org/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://jiajun.org/">http://jiajun.org/</a></span></a></span></span></strong></p>

<p>webfrogs的博客：目前在北京当一枚程序猿，有幸成为80后的尾巴。目前行走在iOS开发的道路上，用博客记载一路上的所见所闻所想。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://webfrogs.me/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://webfrogs.me/">http://webfrogs.me/</a></span></a></span></span></strong></p>

<p>余书懿的博客：目前任职于豆豆。他喜欢苹果,痴情技术! 专注于移动互联网,做出好产品改变世界^^!<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://blog.csdn.net/ysy441088327/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://blog.csdn.net/ysy441088327/">http://blog.csdn.net/ysy441088327/</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<h2><strong><span style="color: #339966;">6、大会</span></strong></h2>

<p>WWDC：苹果开发者大会是一年一度的盛会，苹果通常会在这里发布新的东西，并且会提供许多开发资源，值得关注。<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/wwdc/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="https://developer.apple.com/wwdc/">https://developer.apple.com/wwdc/</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<h2><strong><span style="color: #339966;">7、播客和录像</span><span style="color: #339966;"><br /> </span></strong></h2>

<p>Core intuition：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.coreint.org/podcast.xml" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.coreint.org/podcast.xml">http://www.coreint.org/podcast.xml</a></span></a></span></span></strong></p>

<p>调试<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://feeds.feedburner.com/debugshow" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://feeds.feedburner.com/debugshow">http://feeds.feedburner.com/debugshow</a></span></a></span></span></strong></p>

<p>Edge Cases<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.edgecasesshow.com/rss.xml" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://www.edgecasesshow.com/rss.xml">http://www.edgecasesshow.com/rss.xml</a></span></a></span></span></strong></p>

<p>发展前景<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developingperspective.com/feed/podcast/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://developingperspective.com/feed/podcast/">http://developingperspective.com/feed/podcast/</a></span></a></span></span></strong></p>

<p>iDeveloper博客：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://feeds.feedburner.com/IdeveloperLive" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://feeds.feedburner.com/IdeveloperLive">http://feeds.feedburner.com/IdeveloperLive</a></span></a></span></span></strong></p>

<p>Software Indie：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://softwareindie.com/feed/podcast" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://softwareindie.com/feed/podcast">http://softwareindie.com/feed/podcast</a></span></a></span></span></strong></p>

<p>NSScreenCast：<br/>
<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://nsscreencast.com/" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://nsscreencast.com/">http://nsscreencast.com/</a></span></a></span></span></strong></p>

<p>&nbsp;</p>

<h2><strong><span style="color: #339966;">参考</span></strong></h2>

<p><strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.davemark.com/?p=1829" target="_blank"><span style="color: #339966; text-decoration: underline;">Resources for Mac and iOS Developers</span></a></span></span></strong></p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>原创●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-18</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC中并发编程的相关API和面临的挑战(2)]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/17/105/"/>
    <updated>2013-07-17T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/17/105</id>
    <content type="html"><![CDATA[<p>本文由<span style="text-decoration: underline;"><a href="http://beyondvincent.com/" target="_blank"><strong><span style="color: #339966; text-decoration: underline;">破船</span></strong></a></span>译自<span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.objc.io/issue-2/concurrency-apis-and-pitfalls.html" target="_blank"><span style="color: #339966; text-decoration: underline;">objc</span></a></span></strong></span>转载请注明出处！</p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p><strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://beyondvincent.com/?p=1638" target="_blank"><span style="color: #339966; text-decoration: underline;">上一篇文章</span></a></span></span></strong>介绍了OC中并发编程的相关API，本文我们接着来看看并发编程中面临的一些挑战。</p>

<!--more-->


<h2><strong><span style="color: #339966;">目录</span></strong></h2>

<p><span style="color: #339966;"><b>1、介绍</b></span><br/>
<strong><span style="color: #339966;">2、OS X和iOS中的并发编程</span></strong><br/>
<strong><span style="color: #339966;">    2.1、Threads</span></strong><br/>
<strong><span style="color: #339966;">    2.2、Grand Central Dispatch</span></strong><br/>
<strong><span style="color: #339966;">    2.3、Operation Queues</span></strong><br/>
<strong><span style="color: #339966;">    2.4、Run Loops</span></strong><br/>
<strong><span style="color: #339966;"> 3、并发编程中面临的挑战</span></strong><br/>
<strong><span style="color: #339966;">    3.1、资源共享</span></strong><br/>
<strong><span style="color: #339966;">    3.2、互斥</span></strong><br/>
<strong><span style="color: #339966;">    3.3、死锁</span></strong><br/>
<strong><span style="color: #339966;">    3.4、饥饿</span></strong><br/>
<strong><span style="color: #339966;">    3.5、优先级反转</span></strong><br/>
<strong><span style="color: #339966;"> 4、小结</span></strong></p>

<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">1和</span></strong><strong><span style="color: #339966;">2两部分内容请看</span></strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://beyondvincent.com/?p=1638" target="_blank"><span style="color: #339966; text-decoration: underline;">上一篇文章</span></a></span></span>。****</h2>

<h2><span style="color: #339966;"><strong>3、并发编程中面临的挑战</strong></span></h2>

<p>使用并发编程会带来许多陷进。尽管开发者做得足够到位了，还是难以观察并行执行中相互作用的多任务的不同状态。问题往往发生在一些不确定性（不可预见性）的地方，在调试相关并发代码时会感觉到很无助。</p>

<p>关于并发编程的不可预见性有一个非常典型的例子：在1995年，NASA(美国宇航局)发送了火星探测器，但是当探测器成功着陆的时候，任务嘎然而止，火星探测器莫名其妙的不停重启——在计算机领域内，遇到的这中现象被定为为优先级反转，也就是说低优先级的线程一直阻塞着高优先级的线程。稍后我们会看到更多相关介绍。通过该示例，可以告诉我们即使拥有丰富的资源和大量优秀工程师，但是也会遭遇使用并发编程带来的陷阱。</p>

<h3><span style="color: #339966;">3.1、资源共享</span></h3>

<p>并发编程中许多问题的根源就是在多线程中访问共享资源。资源可以是一个属性、一个对象，通用的内存、网络设备和文件等等。在多线程中任意共享的资源都有一个潜在的冲突，开发者必须防止相关冲突的发生。</p>

<p>为了演示冲突问题，我们来看一个关于资源的简单示例：利用一个整型值作为计数器。在程序运行过程中，有两个并行线程A和B，这两个线程都尝试着同时增加计数器的值。问题来了，通过C或OC写的代码(增加计数器的值)不仅仅是一条指令，而是包括好多指令——要想增加计数器的值，需要从内存中读取出当前值，然后再增加计数器的值，最后还需要就爱那个这个增加的值写回内存中。</p>

<p>我们可以试着想一下，如果两个线程同时做上面涉及到的操作，会发生什么问题。例如，线程A和B都从内存中读取出了计数器的值，假设为17，然后线程A将计数器的值加1，并将结果18写回到内存中。同时，线程B也将计数器的值加1，并将结果18写回到内存中。实际上，此时计数器的值已经被破坏掉了——因为计数器的值17被加1了两次，应该为19，但是内存中的值为18。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/race-condition@2x.png"><img class="alignnone size-full wp-image-1651" alt="race-condition@2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/race-condition@2x.png" width="1148" height="638" /></a></p>

<p>&nbsp;</p>

<p>这个问题成为资源竞争，或者叫做<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Race_conditions#Software" target="_blank"><span style="color: #339966; text-decoration: underline;">race condition</span></a></span></span></strong>，在多线程里面访问一个共享的资源，如果没有一种机制来确保线程A结束访问一个共享资源之前，线程B就开始访问该共享资源，那么资源竞争的问题总是会发生。试想一下，如果如果程序在内存中访问的资源不是一个简单的整型，而是一个复杂的数据结构，可能会发生这样的现象：当第一个线程正在读写这个数据结构时，第二个线程也来读这个数据结构，那么获取到的数据可能是新旧参半。为了防止出现这样的问题，在多线程访问共享资源时，需要一种互斥的机制。</p>

<p>在实际的开发中，情况甚至要比上面介绍的复杂，因为现代CPU为了对代码运行达到最优化，对改变从内存中读写数据的顺序（乱序执行）。</p>

<h3><span style="color: #339966;"> 3.2、互斥</span></h3>

<p><span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Mutex" target="_blank"><span style="color: #339966; text-decoration: underline;">互斥</span></a></span></strong></span>访问的意思就是同一时刻，只允许一个线程访问某个资源。为了保证这一点，每个希望访问共享资源的线程，首先需要获得一个共享资源的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Lock_%28computer_science%29" target="_blank"><span style="color: #339966; text-decoration: underline;">互斥锁</span></a></span></span></strong>，一旦某个线程对资源完成了读写操作，就释放掉这个互斥锁，这样别的线程就有机会访问该共享资源了。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/locking@2x.png"><img class="alignnone size-full wp-image-1652" alt="locking@2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/locking@2x.png" width="1248" height="766" /></a></p>

<p>除了确保互斥锁的访问，还需要解决代码无序执行所带来的问题。如果不能确保CPU访问内存的顺序跟编程时的代码指令一样，那么仅仅依靠互斥锁的访问是不够的。为了解决由CPU的优化策略引起的代码无序执行，需要引入内存屏障(<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Memory_barrier" target="_blank"><span style="color: #339966; text-decoration: underline;">memory barrier</span></a></span></span></strong>)。通过设置内存屏障，来确保无序执行时能够正确跨越设置的屏障。</p>

<p>当然，互斥锁的实现是需要自由的竞争条件。这实际上是非常重要的一个保证，并且需要在现代CPU上使用特殊的指令。更多关于原子操作(atomic operation)，请阅读Daniel写的文章：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.objc.io/issue-2/low-level-concurrency-apis.html" target="_blank"><span style="color: #339966; text-decoration: underline;">底层并发技术</span></a></span></span></strong>。</p>

<p>从语言层面来说，在Objective-C中将属性以atomic的形式来声明，就能支持互斥锁了。实际上，默认情况下，属性是atomic的。将一个属性声明为atomic表示每次访问该属性都会进行加锁和解锁操作。虽然最把稳的做法就是将所有的属性都声明为atomic，但是这也会付出一定的代价。</p>

<p>获取资源上的锁会引发一定的性能代价。获取和释放锁需要自由的竞争条件(race-condition free)，这在多核系统中是很重要的。另外，在获取锁的时候，线程有时候需要等待——因为其它的线程已经获得了资源的锁。这种情况下，线程会进入休眠状态，当其它线程释放掉相关资源的锁时，休眠的线程会得到通知。其实所有这些相关操作都是非常昂贵且复杂的。</p>

<p>这有一些不同类型的锁。当没有竞争时，有些锁是很廉价的(cheap)，但是在竞争情况下，性能就会打折扣。同等条件下，另外一些锁则比较昂贵(expensive)，但是在竞争情况下，会表现更好(锁的竞争是这样产生的：当一个或者多个线程尝试获取一个已经被别的线程获取了的锁)。</p>

<p>在这里有一个东西需要进行权衡：获取和释放锁所带来的开销。开发者需要确保代码中有获取锁和释放锁的语句。同时，如果获取锁之后，要执行一大段代码，这将带来风险：其它线程可能因为资源的竞争而无法工作（需要释放掉相关的锁才行）。</p>

<p>我们经常能看到并行运行的代码，但实际上由于共享资源中配置了相关的锁，所以有时候只有一个线程是出于激活状态的。要想预测一下代码在多核上的调度情况，有时候也显得很重要。我们可以使用Instrument的CPU strategy view来检查是否有效的利用了CPU的可用核数，进而得出更好的想法，以此来优化代码。</p>

<h3><span style="color: #339966;"> 3.3、死锁</span></h3>

<p>互斥解决了资源竞争的问题，但同时这也引入了一个新的问题：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Deadlock" target="_blank"><span style="color: #339966; text-decoration: underline;">死锁</span></a></span></span></strong>。当多个线程在相互等待着对方的结束时，就会发生死锁，这是程序可能会被卡住。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/dead-lock@2x.png"><img class="alignnone size-full wp-image-1653" alt="dead-lock@2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/dead-lock@2x.png" width="906" height="717" /></a></p>

<p>看看下面的代码——交换两个变量的值：</p>

<pre class="wp-code-highlight prettyprint linenums:1">void swap(A, B)
{
    lock(lockA);
    lock(lockB);
    int a = A;
    int b = B;
    A = b;
    B = a;
    unlock(lockB);
    unlock(lockA);
}</pre>


<p>大多数时候，这能够正常运行。但是当两个线程同时调用上面这个方法呢——使用两个相反的值：</p>

<pre class="wp-code-highlight prettyprint linenums:1">swap(X, Y); // thread 1
swap(Y, X); // thread 2</pre>


<p>此时程序可能会由于死锁而被终止。线程1获得了X的一个锁，线程2获得了Y的一个锁。 接着它们会同时等待另外一把锁，但是永远都不会获得。</p>

<p>记住：在线程之间共享更多的资源，会使用更多的锁，同时也会增加死锁的概率。这也是为什么我们需要尽量减少线程间资源共享，并确保共享的资源尽量简单的原因之一。建议阅读以下<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.objc.io/issue-2/low-level-concurrency-apis.html" target="_blank"><span style="color: #339966; text-decoration: underline;">底层并发编程API</span></a></span></span></strong>中的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.objc.io/issue-2/low-level-concurrency-apis.html#async" target="_blank"><span style="color: #339966; text-decoration: underline;">doing things asynchronously</span></a></span></span></strong>。</p>

<p>&nbsp;</p>

<h3><span style="color: #339966;">3.4、饥饿</span></h3>

<p>当你认为已经足够了解并发编程面临的陷阱 时，拐角处又出现了新的问题。锁定的共享资源会引起读写问题。大多数情况下，限制资源一次只能有一个线程进行访问，这是非常浪费的，比如一个读取锁只允许读，而不对资源进行写操作，这种情况下，同时可能会有另外一个线程等着着获取一个写锁。</p>

<p>为了解决这个问题，更好的方法不是简单使用读/写锁，例如给定一个<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock" target="_blank"><span style="color: #339966; text-decoration: underline;">writer preference</span></a></span></span></strong>，或者使用<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Read-copy-update" target="_blank"><span style="color: #339966; text-decoration: underline;">read-copy-update</span></a></span></span></strong>算法。Daniel在<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.objc.io/issue-2/low-level-concurrency-apis.html#multiple-readers-single-writer" target="_blank"><span style="color: #339966; text-decoration: underline;">底层并发技术文章</span></a></span></span></strong>中有相关介绍。</p>

<h3><span style="color: #339966;"> 3.5、优先级反转</span></h3>

<p>本节开头介绍了美国宇航局发射的火星探测器在火星上遇到的并发问题。现在我们就来看看为什么那个火星探测器会失败，以及为什么有时候我们的程序也会遇到相同的问题——该死的优先级反转。</p>

<p>优先级反转是指程序在运行时低优先级的任务阻塞了高优先级的任务，有效的反转了任务的优先级。由于GCD提供了后台运行队列(拥有不同的优先级)，包括I/O队列，所以通过GCD我们可以很好的来了解一下优先级反转的可能性。</p>

<p>高优先级和低优先级的任务之间在共享一个资源时，就可能发生优先级反转。当低优先级的任务获得了共享资源的锁时，该任务应该迅速完成，并释放掉锁，然后让高优先级的任务在没有明显的延时下继续执行。然而当低优先级阻塞着高优先级期间(低优先级获得的时间又比较少)，如果有一个中优先级的任务(该任务不需要那个共享资源)，那么可能会抢占低优先级任务，而被执行——因为此时高优先级任务是被阻塞的，所以中优先级任务是目前所有可运行任务中优先级最高的。此时，中优先级任务就会阻塞着低优先级任务，导致低优先级任务不能释放掉锁，也就会引起高优先级任务一直在等待锁的释放。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/priority-inversion@2x.png"><img class="alignnone size-full wp-image-1654" alt="priority-inversion@2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/priority-inversion@2x.png" width="1018" height="700" /></a></p>

<p>在我们的实际代码中，可能不会像火星探测器那样，遇到优先级反转时，不同的重启。</p>

<p>解决这个问题的方法，通常就是不要使用不同的优先级——将高优先级的代码和低优先级的代码修改为相同的优先级。当使用GCD时，总是使用默认的优先级队列。如果使用不同的优先级，就可能会引发事故。</p>

<p>虽然有些文章上说，在不同的队列中使用不同的优先级，这听起来不错，但是这回增加并发编程的复杂度和不可预见性。如果编程中，在高优先级任务中突然没有理由的卡住了，可能你会想起本文，以及称为优先级反转的问题，甚至还会想起美国宇航局的工程师也遇到这样的问题。</p>

<h2><span style="color: #339966;">4、小结</span></h2>

<p>希望通过本文你能够了解到并发编程带来的复杂性和相关问题。并发编程中，看起来，无论是多么简单的API，由此产生的问题会变得非常的难以观测，并且要想调试这类问题，往往都是比较困难的。</p>

<p>另外，并发实际上是一个非常棒的功能——它充分利用了现代多核CPU的强大计算能力。在开发中，关键的一点就是尽量让并发模型简单，这样可以限制锁的数量。</p>

<p>我们建议采纳的安全模式是这样的：从主线程中提取出使用到的数据，并利用一个操作队列在后台处理相关的数据，然后将后台处理的结果反馈到主队列中。使用这种方式，开发者不需要自己负责任何的锁，这也就减少了犯错误的概率。</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-17</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC中并发编程的相关API和面临的挑战(1)]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/16/104/"/>
    <updated>2013-07-16T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/16/104</id>
    <content type="html"><![CDATA[<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://www.objc.io/issue-2/concurrency-apis-and-pitfalls.html" target="_blank"><span style="color: #339966; text-decoration: underline;">objc</span></a></span></strong></span>转载请注明出处！</p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p><a href="http://www.objc.io/">http://www.objc.io/</a> 站点主要以杂志的形式，深入挖掘在OC中的最佳编程实践和高级技术，每个月探讨一个主题，每个主题都会有几篇相关的文章出炉，2013年7月份的主题是并发编程，今天晚上我就挑选其中的第2篇文章(<a href="http://www.objc.io/issue-2/concurrency-apis-and-pitfalls.html"><code>Concurrent Programming: APIs and Challenges</code></a>)进行翻译，与大家分享一下主要内容。由于内容比较多，我将分两部分翻译(API和难点)完成，翻译中，如有错误，还请指正。</p>

<!--more-->


<h2><strong><span style="color: #339966;">目录</span></strong></h2>

<p><span style="color: #339966;"><b>1、介绍</b></span><br/>
<strong><span style="color: #339966;">2、OS X和iOS中的并发编程</span></strong><br/>
<strong><span style="color: #339966;">    2.1、Threads</span></strong><br/>
<strong><span style="color: #339966;">    2.2、Grand Central Dispatch</span></strong><br/>
<strong><span style="color: #339966;">    2.3、Operation Queues</span></strong><br/>
<strong><span style="color: #339966;">    2.4、Run Loops</span></strong><br/>
<strong><span style="color: #339966;"> 3、并发编程中面临的挑战</span></strong><br/>
<strong><span style="color: #339966;">    3.1、资源共享</span></strong><br/>
<strong><span style="color: #339966;">    3.2、互斥</span></strong><br/>
<strong><span style="color: #339966;">    3.3、死锁</span></strong><br/>
<strong><span style="color: #339966;">    3.4、饥饿</span></strong><br/>
<strong><span style="color: #339966;">    3.5、优先级反转</span></strong><br/>
<strong><span style="color: #339966;"> 4、小结</span></strong></p>

<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">1、介绍</span></strong></h2>

<p><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"> <a href="http://en.wikipedia.org/wiki/Concurrency_%28computer_science%29"><span style="color: #339966; text-decoration: underline;">并发</span></a></span></strong></span>的意思就是同时运行多个任务，这些任务可以在单核CPU上以<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://en.wikipedia.org/wiki/Preemption_%28computing%29"><span style="color: #339966; text-decoration: underline;">分时(时间共享)</span></a></span></span></strong>的形式同时运行，或者在多核CPU上以真正的并行来运行多任务。</p>

<p>OS X和iOS提供了几种不同的API来支持并发编程。每种API都具有不同的功能和一些限制，一般是根据不同的任务使用不同的API。这些API在系统中处于不同的地方。并发编程对于开发者来说非常的强大，但是作为开发者需要担负很大的责任，来把任务处理好。</p>

<p>实际上，并发编程是一个很有挑战的主题，它有许多错综复杂的问题和陷阱，当开发者在使用类似<strong><span style="color: #339966;">GCD</span></strong>或<strong><span style="color: #339966;">NSOperationQueue</span></strong> API时，很容易遗忘这些问题和陷阱。本文首先介绍一下OS X和iOS中不同的并发编程API，然后深入了解并发编程中开发者需要面临的一些挑战。</p>

<h2><strong><span style="color: #339966;">2、OS X和iOS中的并发编程</span></strong></h2>

<p>在移动和桌面操作系统中，苹果提供了相同的并发编程API。 本文会介绍<strong><span style="color: #339966;">pthread</span></strong>和<strong><span style="color: #339966;">NSThread</span></strong>、<strong><span style="color: #339966;">Grand Central Dispatch(GCD)</span></strong>、<strong><span style="color: #339966;">NSOperationQueue</span></strong>，以及<strong><span style="color: #339966;">NSRunLoop</span></strong>。NSRunLoop列在其中，有点奇怪，因为它并没有被用来实现真正的并发，不过NSRunLoop与并发编程有莫大的关系，值得我们去了解。</p>

<p>由于高层API是基于底层API构建的，所以首先将从底层的API开始介绍，然后逐步介绍高层API，不过在具体编程中，选择API的顺序刚好相反：因为大多数情况下，选择高层的API不仅可以完成底层API能完成的任务，而且能够让并发模型变得简单。</p>

<p>如果你对这里给出的建议(API的选择)上有所顾虑，那么你可以看看本文的相关内容：<strong><span style="color: #339966;">并发编程面临的挑战</span></strong>，以及Peter Steinberger写的关于<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://www.objc.io/issue-2/thread-safe-class-design.html" target="_blank"><span style="color: #339966; text-decoration: underline;">线程安全</span></a></span></span></strong>的文章。</p>

<h3><strong><span style="color: #339966;">2.1、Threads</span></strong></h3>

<p>线程(thread)是组成进程的子单元，操作系统的调度器可以对线程进行单独的调度。实际上，所有的并发编程API都是构建于线程之上的——包括GCD和操作队列(operation queues)。</p>

<p>多线程可以在单核CPU上同时运行(可以理解为同一时间)——操作系统将时间片分配给每一个线程，这样就能够让用户感觉到有多个任务在同时进行。如果CPU是多核的，那么线程就可以真正的以并发方式被执行，所以完成某项操作，需要的总时间更少。</p>

<p>开发者可以通过Instrument中的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/AnalysingCPUUsageinYourOSXApp/AnalysingCPUUsageinYourOSXApp.html" target="_blank"><span style="color: #339966; text-decoration: underline;">CPU strategy view</span></a></span></span></strong>来观察代码被执行时在多核CPU中的调度情况。</p>

<p>需要重点关注的一件事：开发者无法控制代码在什么地方以及什么时候被调度，以及无法控制代码执行多长时间后将被暂停，以便轮到执行别的任务。线程调度是非常强大的一种技术，但是也非常复杂(稍后会看到)。</p>

<p>先把线程调度的复杂情况放一边，开发者可以使用<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://en.wikipedia.org/wiki/POSIX_Threads" target="_blank"><span style="color: #339966; text-decoration: underline;">POSIX线程</span></a></span></span></strong>API，或者Objective-C中提供的对该API的封装——<strong><span style="color: #339966;">NSThread</span></strong>，来创建自己的线程。下面这个小示例是利用<strong><span style="color: #339966;">pthread</span></strong>来查找在一百万个数字中的最小值和最大值。其中并发执行了4个线程。从该示例复杂的代码中，可以看出为什么我们不希望直接使用pthread。</p>

<pre class="wp-code-highlight prettyprint linenums:1">struct threadInfo {
    uint32_t * inputValues;
    size_t count;
};

struct threadResult {
    uint32_t min;
    uint32_t max;
};

void * findMinAndMax(void *arg)
{
    struct threadInfo const * const info = (struct threadInfo *) arg;
    uint32_t min = UINT32_MAX;
    uint32_t max = 0;
    for (size_t i = 0; i &lt; info&gt;count; ++i) {
        uint32_t v = info&gt;inputValues[i];
        min = MIN(min, v);
        max = MAX(max, v);
    }
    free(arg);
    struct threadResult * const result = (struct threadResult *) malloc(sizeof(*result));
    result&gt;min = min;
    result&gt;max = max;
    return result;
}

int main(int argc, const char * argv[])
{
    size_t const count = 1000000;
    uint32_t inputValues[count];

    // Fill input values with random numbers:
    for (size_t i = 0; i &lt; count; ++i) {
        inputValues[i] = arc4random();
    }

    // Spawn 4 threads to find the minimum and maximum:
    size_t const threadCount = 4;
    pthread_t tid[threadCount];
    for (size_t i = 0; i &lt; threadCount; ++i) {         struct threadInfo * const info = (struct threadInfo *) malloc(sizeof(*info));         size_t offset = (count / threadCount) * i;         info&gt;inputValues = inputValues + offset;
        info&gt;count = MIN(count - offset, count / threadCount);
        int err = pthread_create(tid + i, NULL, &findMinAndMax, info);
        NSCAssert(err == 0, @"pthread_create() failed: %d", err);
    }
    // Wait for the threads to exit:
    struct threadResult * results[threadCount];
    for (size_t i = 0; i &lt; threadCount; ++i) {
        int err = pthread_join(tid[i], (void **) &(results[i]));
        NSCAssert(err == 0, @"pthread_join() failed: %d", err);
    }
    // Find the min and max:
    uint32_t min = UINT32_MAX;
    uint32_t max = 0;
    for (size_t i = 0; i &lt; threadCount; ++i) {         min = MIN(min, results[i]&gt;min);
        max = MAX(max, results[i]&gt;max);
        free(results[i]);
        results[i] = NULL;
    }

    NSLog(@"min = %u", min);
    NSLog(@"max = %u", max);
    return 0;
}</pre>


<p><strong><span style="color: #339966;">NSThread</span></strong>是Objective-C对<strong><span style="color: #339966;">pthread</span></strong>的一个封装。通过封装，在Cocoa环境中，可以让代码看起来更加亲切。例如，开发者可以利用NSThread的一个子类来定义一个线程，在这个子类的中封装了需要运行的代码。针对上面的那个例子，我们可以定义一个这样的NSThread子类：</p>

<pre class="wp-code-highlight prettyprint linenums:1">@interface FindMinMaxThread : NSThread
@property (nonatomic) NSUInteger min;
@property (nonatomic) NSUInteger max;
- (instancetype)initWithNumbers:(NSArray *)numbers;
@end

@implementation FindMinMaxThread {
    NSArray *_numbers;
}

- (instancetype)initWithNumbers:(NSArray *)numbers 
{
    self = [super init];
    if (self) {
        _numbers = numbers;
    }
    return self;
}

- (void)main
{
    NSUInteger min;
    NSUInteger max;
    // process the data
    self.min = min;
    self.max = max;
}
@end</pre>


<p>要想启动一个新的线程，需要创建一个线程对象，然后调用它的<strong><span style="color: #339966;">start</span></strong>方法：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSSet *threads = [NSMutableSet set];
NSUInteger numberCount = self.numbers.count;
NSUInteger threadCount = 4;
for (NSUInteger i = 0; i &lt; threadCount; i++) {
    NSUInteger offset = (count / threadCount) * i;
    NSUInteger count = MIN(numberCount - offset, numberCount / threadCount);
    NSRange range = NSMakeRange(offset, count);
    NSArray *subset = [self.numbers subarrayWithRange:range];
    FindMinMaxThread *thread = [[FindMinMaxThread alloc] initWithNumbers:subset];
    [threads addObject:thread];
    [thread start];
}</pre>


<p>现在，当4个线程结束的时候，我们检测到线程的isFinished属性。不过最好还是远离上面的代码吧——最主要的原因是，在编程中，直接使用线程（无论是pthread，还是NSThread）都是难以接受的。</p>

<p>使用线程会引发的一个问题就是：在开发者自己的代码，或者系统内部的框架代码中，被激活的线程数量很有可能会成倍的增加——这对于一个大型工程来说，是很常见的。例如，在8核CPU中，你创建了8个线程，然后在这些线程中调用了框架代码，这些代码也创建了同样的线程(其实它并不知道你已经创建好线程了)，这样会很快产生成千上万个线程，最终导致你的程序被终止执行——线程实际上并不是免费的咖啡，每个线程的创建都会消耗一些内容，以及相关的内核资源。</p>

<p>下面，我将介绍两个基于队列的并发编程API：GCD和operation queue。它们通过集中管理一个线程池(被没一个任务协同使用)，来解决上面遇到的问题。</p>

<p><strong style="font-size: 1.17em;"><span style="color: #339966;">2.2、Grand Central Dispatch</span></strong></p>

<p>为了让开发者更加容易的使用设备上的多核CPU，苹果在OS X和iOS 4中引入了Grand Central Dispatch(GCD)。在下一篇文章中会更加详细的介绍GCD：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.objc.io/issue-2/low-level-concurrency-apis.html" target="_blank"><span style="color: #339966; text-decoration: underline;">low-level concurrency APIs</span></a></span></span></strong>。</p>

<p>通过GCD，开发者不用再直接跟线程打交道了，只需要向队列中添加block代码即可，GCD在后端管理着一个线程池。GCD不仅决定着哪个线程(block)将被执行，它还根据可用的系统资源对线程池中的线程进行管理——这样可以不通过开发者来集中管理线程，缓解大量线程的创建，做到了让开发者远离线程的管理。</p>

<p>默认情况下，GCD公开有5个不同的队列：运行在主线程中的main queue，3个不同优先级的后台队列，以及一个优先级更低的后台队列(用于I/O)。另外，开发者可以创建自定义队列：串行或者并行队列。自定义队列非常强大，在自定义队列中被调度的所有block都将被放入到系统的线程池的一个全局队列中。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/gcd-queues@2x.png"><img class="alignnone size-full wp-image-1639" alt="gcd-queues@2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/gcd-queues@2x.png" width="1256" height="726" /></a></p>

<p>这里队列中，可以使用不同优先级，这听起来可能非常简单，不过，强烈建议，在大多数情况下使用默认的优先级就可以了。在队列中调度具有不同优先级的任务时，如果这些任务需要访问一些共享的资源，可能会迅速引起不可预料到的行为，这样可能会引起程序的突然停止——运行时，低优先级的任务阻塞了高优先级任务。更多相关内容，在本文的<strong><span style="color: #339966;">优先级反转</span></strong>中会有介绍。</p>

<p>虽然GCD是稍微偏底层的一个API，但是使用起来非常的简单。不过这也容易使开发者忘记并发编程中的许多注意事项和陷阱。读者可以阅读本文后面的：并发编程中面临的挑战，这样可以注意到一些潜在的问题。本期的另外一篇文章：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.objc.io/issue-2/low-level-concurrency-apis.html" target="_blank"><span style="color: #339966; text-decoration: underline;">Low-level Concurrency API</span></a></span></span></strong>，给出了更加深入的解释，以及一些有价值的提示。</p>

<h3><strong><span style="color: #339966;"> 2.3、Operation Queues</span></strong></h3>

<p>操作队列(operation queue)是基于GCD封装的一个队列模型。GCD提供了更加底层的控制，而操作队列在GCD之上实现了一些方便的功能，这些功能对于开发者来说会更好、更安全。</p>

<p>类NSOperationQueue有两个不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。任何情况下，在这两种队列中运行的任务，都是由NSOperation组成。</p>

<p>定义自己的操作有两种方式：重写main或者start方法，前一种方法非常简单，但是灵活性不如后一种。对于重写main方法来说，开发者不需要管理一些状态属性(例如isExecuting和isFinished)——当main返回的时候，就可以假定操作结束。</p>

<pre class="wp-code-highlight prettyprint linenums:1">@implementation YourOperation
    - (void)main
    {
        // do your work here ...
    } 
@end</pre>


<p>如果你希望拥有更多的控制权，以及在一个操作中可以执行异步任务，那么就重写start方法：</p>

<pre class="wp-code-highlight prettyprint linenums:1">@implementation YourOperation
    - (void)start
    {
        self.isExecuting = YES;
        self.isFinished = NO;
        // start your work, which calls finished once it&#039;s done ...
    }

    - (void)finished
    {
        self.isExecuting = NO;
        self.isFinished = YES;
    }
@end</pre>


<p>注意：这种情况下，需要开发者手动管理操作的状态。 为了让操作队列能够捕获到操作的改变，需要将状态属性以KVO的方式实现。并确保状态改变的时候发送了KVO消息。</p>

<p>为了满足操作队列提供的取消功能，还应该检查isCancelled属性，以判断是否继续运行。</p>

<pre class="wp-code-highlight prettyprint linenums:1">- (void)main
{
    while (notDone && !self.isCancelled) {
        // do your processing
    }
}</pre>


<p>当开发者定义好操作类之后，就可以很容易的将一个操作添加到队列中：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSOperationQueue *queue = [[NSOperationQueue alloc] init];
YourOperation *operation = [[YourOperation alloc] init];
[queue  addOperation:operation];</pre>


<p>另外，开发者也可以将block添加到队列中。这非常的方便，例如，你希望在主队列中调度一个一次性任务：</p>

<pre class="wp-code-highlight prettyprint linenums:1">[[NSOperationQueue mainQueue] addOperationWithBlock:^{
    // do something...
}];</pre>


<p>如果重写operation的description方法，可以很容易的标示出在某个队列中当前被调度的所有operation。</p>

<p>除了提供基本的调度操作或block外，操作队列还提供了一些正确使用GCD的功能。例如，可以通过maxConcurrentOperationCount属性来控制一个队列中可以有多少个操作参与并发执行，以及将队列设置为一个串行队列。</p>

<p>另外还有一个方便的功能就是根据队列中operation的优先级对其进行排序，这不同于GCD的队列优先级，它只会影响到一个队列中所有被调度的operation的执行顺序。如果你需要进一步控制operation的执行顺序(除了使用5个标准的优先级)，还可以在operation之间指定依赖，如下：</p>

<pre class="wp-code-highlight prettyprint linenums:1">[intermediateOperation addDependency:operation1];
[intermediateOperation addDependency:operation2];
[finishedOperation addDependency:intermediateOperation];</pre>


<p>上面的代码可以确保operation1和operation在intermediateOperation之前执行，也就是说，在finishOperation之前被执行。对于需要明确的执行顺序时，操作依赖是非常强大的一个机制。 它可以让你创建一些操作组，并确保这些操作组在所依赖的操作之前被执行，或者在并发队列中以串行的方式执行operation。</p>

<p>从本质上来看，操作队列的性能比GCD要低，不过，大多数情况下，可以忽略不计，所以操作队列是并发编程的首选API。</p>

<h3><strong><span style="color: #339966;"> 2.4、Run Loops</span></strong></h3>

<p>实际上，Run loop并不是一项并发机制(例如GCD或操作队列)，因为它并不能并行执行任务。不过在主dispatch/operation队列中，run loop直接配合着任务的执行，它提供了让代码异步执行的一种机制。</p>

<p>Run loop比起操作队列或者GCD来说，更加容易使用，因为通过run loop，开发者不必处理并发中的复杂情况，就能异步的执行任务。</p>

<p>一个run loop总是绑定到某个特定的线程中。main run loop是与主线程相关的，在每一个Cocoa和CocoaTouch程序中，这个main run loop起到核心作用——它负责处理UI时间、计时器，以及其它内核相关事件。无论什么时候使用计时器、NSURLConnection或者调用performSelector:withObject:afterDelay:，run loop都将在后台发挥重要作用——异步任务的执行。</p>

<p>无论什么时候，依赖于run loop使用一个方法，都需要记住一点：run loop可以运行在不同的模式中，每种模式都定义了一组事件，供run loop做出响应——这其实是非常聪明的一种做法：在main run loop中临时处理某些任务。</p>

<p>在iOS中非常典型的一个示例就是滚动，在进行滚动时，run loop并不是运行在默认模式中的，因此，run loop此时并不会做出别的响应，例如，滚动之前在调度一个计时器。一旦滚动停止了，run loop会回到默认模式，并执行添加到队列中的相关事件。如果在滚动时，希望计时器能被触发，需要将其在NSRunLoopCommonModes模式下添加到run loop中。</p>

<p>其实，一般情况下都没有必要去配置使用非主线的其他线程的runloop，若有繁重的工作不想卡在主线程还有很多别的方法可以使用。相关内容，Chris写了一篇文章，可以去看看：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.objc.io/issue-2/common-background-practices.html" target="_blank"><span style="color: #339966; text-decoration: underline;">common background practices</span></a></span></span></strong>。</p>

<p>如果你真需要在别的线程中添加一个run loop，那么不要忘记在run loop中至少添加一个input source。如果run loop中没有input source，那么每次运行这个run loop，都会立即退出。</p>

<p>关于并发编程中面临的挑战，会在下一篇文章中出现。</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-16</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7新特征汇总[07]Xcode 5中非常期待的6个功能]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/15/103/"/>
    <updated>2013-07-15T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/15/103</id>
    <content type="html"><![CDATA[<p>提醒：这里是新特征汇总博文链接：<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/2013/06/11/ios7%E6%96%B0%E7%89%B9%E5%BE%81%E6%B1%87%E6%80%BB/" target="_blank"><span style="color: #339966; text-decoration: underline;">iOS7新特征汇总</span></a></strong></span></span></p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-2.jpg"><img class="alignnone size-full wp-image-1595" alt="QQ20130715-2" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-2.jpg" width="1069" height="598" /></a></p>

<p>&nbsp;</p>

<h2><strong><span style="color: #339966;">小引：</span></strong></h2>

<p>自从北京时间2013年06月11日苹果发布Xcode 5 Developer Preview 1，到现在(2013年7约15日)已经过去一个月，苹果也放出了Xcode 5 Developer Preview 3，速度还是蛮快的，希望体验的同学也可以去苹果官网下载。</p>

<p>今晚看了一下WWDC2013的session：<strong><span style="color: #ff0000;">What’s New in Xcode 5</span></strong>。那就来说说Xcode 5里面一些值得期待的东西吧。由于Xcode中的新东西比较多，我这里挑选了6个非常好的新东西，供大家了解，如果需要了解更多内容，请移步到上面说的session中。</p>

<p>另：在看视频过程中，要特别感谢<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://joeyio.com/" target="_blank"><span style="color: #339966; text-decoration: underline;">乔学士先生</span></a></span></span></strong>汇总的<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="https://github.com/qiaoxueshi/WWDC_2013_Video_Subtitle" target="_blank"><span style="color: #339966; text-decoration: underline;">WWDC2013英文字幕</span></a></span></strong></span>。大家可以想象一下，本来英语就不好的拉，要是没有字幕，要想看懂老外讲的内容，那该痛上加痛哈。</p>

<!--more-->


<h2><strong><span style="color: #339966;">目录</span></strong></h2>

<p><strong><span style="color: #339966;">0、介绍</span></strong><br/>
<strong><span style="color: #339966;"> 1、Toolbar减小30%</span></strong><br/>
<strong><span style="color: #339966;"> 2、源码控制</span></strong><br/>
<strong><span style="color: #339966;"> 3、自动配置</span></strong><br/>
<strong><span style="color: #339966;"> 4、代码文档能力</span></strong><br/>
<strong><span style="color: #339966;"> 5、Datatip</span></strong><br/>
<strong><span style="color: #339966;"> 6、Debug 仪表</span></strong><br/>
<strong><span style="color: #339966;">7、破船有话要说</span></strong></p>

<p>&nbsp;</p>

<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">0、介绍</span></strong></h2>

<p>该session(What&#8217;s New in Xcode 5)介绍了Xcode 5里面为开发者带来的许多新内容，使用过Xcode的同学可能都已经知道，Xcode就是一个完整的开发工具包，可以用来开发在Mac、iPhone和iPad上面的运行的软件。Xcode提供了Instrument 分析工具、iOS模拟器以及操作系统(iOSOS X)相关的一些框架等。</p>

<p>下面就来看看这些值得期待的东西吧。</p>

<h3><strong><span style="color: #339966;">1、Toolbar减小30%</span></strong></h3>

<p>如下图所示，这样做的目的主要就是让Xcode能够尽可能多的显示与编码相关的内容，让开发者专心写代码。从图中也可以看出，Xcode 5与iOS 7的设计理念有相通之处——扁平化。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-1.jpg"><img class="alignnone size-full wp-image-1594" alt="QQ20130715-1" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-1.jpg" width="1213" height="698" /></a></p>

<p>&nbsp;</p>

<p>如下图所示，我们可以看看Toolbar在Xcode 4和Xcode 5中的对比(左边为Xcode 4，右边为Xcode 5)</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-3.jpg"><img class="alignnone size-full wp-image-1596" alt="QQ20130715-3" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-3.jpg" width="729" height="383" /></a></p>

<p>&nbsp;</p>

<h3><strong><span style="color: #339966;">2、源码控制</span></strong></h3>

<p>在Xcode 5中，可以从一个已有的工程中check out代码，然后进行开发。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-5.jpg"><img class="alignnone size-full wp-image-1598" alt="QQ20130715-5" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-5.jpg" width="1123" height="603" /></a></p>

<p>可以方便的浏览和选择Rep。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-6.jpg"><img class="alignnone size-full wp-image-1599" alt="QQ20130715-6" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-6.jpg" width="934" height="558" /></a></p>

<p>&nbsp;</p>

<p>在菜单中，有一个Source Control，可以方便的对代码进行Commit、Push、Pull、选择分支、创建分支等操作。如下图所示：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-7.jpg"><img class="alignnone size-full wp-image-1601" alt="QQ20130715-7" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-7.jpg" width="1220" height="507" /></a></p>

<p>&nbsp;</p>

<p>另外，还可以方便的查找到某行代码是谁修改的，如下图：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-8.jpg"><img class="alignnone size-full wp-image-1602" alt="QQ20130715-8" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-8.jpg" width="687" height="275" /></a></p>

<p>&nbsp;</p>

<h3><strong><span style="color: #339966;">3、自动配置</span></strong></h3>

<p>只需要在Xcode账号中输入Apple ID，Xcode就能够帮助开发者完成一些配置项(iCloud、Game Center、Passbook和Maps等)，作为开发者只需要简单的打开或者关闭相关功能即可，Xcode会自动的发送provisioning profile、创建entitlement、更新Info.plist文件、甚至是链接到所需要的框架——所有这些繁琐的事情都不再需要开发者亲自操作了。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-9.jpg"><img class="alignnone size-full wp-image-1603" alt="QQ20130715-9" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-9.jpg" width="979" height="710" /></a></p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-10.jpg"><img class="alignnone size-full wp-image-1604" alt="QQ20130715-10" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-10.jpg" width="1105" height="553" /></a></p>

<p>&nbsp;</p>

<h3><strong><span style="color: #339966;">4、代码文档能力</span></strong></h3>

<p>从现在开始，Xcode可以从api中提取出文档注释了。相信这是好多开发者都期望有的功能。如下图所示：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-11.jpg"><img class="alignnone size-full wp-image-1605" alt="QQ20130715-11" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-11.jpg" width="1054" height="469" /></a></p>

<p>&nbsp;</p>

<h3><strong><span style="color: #339966;">5、Datatip</span></strong></h3>

<p>在利用Xcode调试代码的时候，通过Datatip可以可以非常方便的查看变量的值。</p>

<p>Datatip可以显示出来自LLDB的概要信息，以及打印出某个变量的描述信息(不用再跑到consle中输入PO啦)，如下图：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-13.jpg"><img class="alignnone size-full wp-image-1607" alt="QQ20130715-13" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-13.jpg" width="1093" height="593" /></a></p>

<p>当然，图文信息也可以方便的显示出来，如下所示：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-14.jpg"><img class="alignnone size-full wp-image-1608" alt="QQ20130715-14" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-14.jpg" width="1018" height="565" /></a></p>

<p>&nbsp;</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-15.jpg"><img class="alignnone size-full wp-image-1609" alt="QQ20130715-15" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-15.jpg" width="1112" height="648" /></a></p>

<p>&nbsp;</p>

<h3><strong><span style="color: #339966;">6、Debug 仪表</span></strong></h3>

<p>通过Debug仪表可以显示出程序运行时，CPU、内存等实际发生的事情，这样可以非常容易的查出并修正潜在的bug。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-16.jpg"><img class="alignnone size-full wp-image-1610" alt="QQ20130715-16" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-16.jpg" width="876" height="657" /></a> <a href="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-17.jpg"><img class="alignnone size-full wp-image-1611" alt="QQ20130715-17" src="http://beyondvincent.com/wp-content/uploads/2013/07/QQ20130715-17.jpg" width="997" height="668" /></a></p>

<p>&nbsp;</p>

<p><strong><span style="color: #339966;">7、破船有话要说</span></strong></p>

<p>还记得使用Xcode 3版本开发iOS程序的时候，感觉这个工具不好使用，当时的IB和Xcode还是分开的，打开个xib文件，IB也要启动半天，更别说界面与代码的整体开发效率了。现如今看到苹果对Xcode做了很多改进，使用越来越方便，开发效率也大大提升，这对大多数开发者来说，绝对是福利！！！</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>原创●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-15</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block剧终：Objective-C中的闭包性和匿名函数]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/12/102/"/>
    <updated>2013-07-12T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/12/102</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/blocks-1024x576.jpg"><img class="alignnone size-full wp-image-1586" alt="blocks-1024x576" src="http://beyondvincent.com/wp-content/uploads/2013/07/blocks-1024x576.jpg" width="1024" height="576" /></a></p>

<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://www.xs-labs.com/en/archives/articles/objc-blocks/" target="_blank"><span style="color: #339966; text-decoration: underline;">xs-labs</span></a></span></span></strong>转载请注明出处！</p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>还记得昨天我给大家推荐的文章吗：<span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.xs-labs.com/en/archives/articles/objc-blocks/" target="_blank"><span style="color: #339966; text-decoration: underline;">Closure and anonymous functions in Objective-C</span></a></span></strong></span>。今天手痒，还想继续敲几个字，索性我就把这篇文章敲出来，以此对block说声代码里见吧。</p>

<!--more-->


<h2><strong><span style="color: #339966;">目录</span></strong></h2>

<p><strong><span style="color: #339966;">1、关于</span></strong><br/>
<strong><span style="color: #339966;">    1.1匿名函数</span></strong><br/>
<strong><span style="color: #339966;">    1.2闭包性</span></strong></p>

<p><strong><span style="color: #339966;">2、Objective-C中的实现</span></strong><br/>
<strong><span style="color: #339966;">    2.1将block当做参数来传递</span></strong><br/>
<strong><span style="color: #339966;">    2.2闭包性</span></strong><br/>
<strong><span style="color: #339966;">    2.3内存管理</span></strong><br/>
<strong><span style="color: #339966;">    2.4示例</span></strong></p>

<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">1、关于</span></strong></h2>

<p>许多脚本语言都支持<strong><span style="color: #339966;">lambda表达式</span></strong>和<strong><span style="color: #339966;">匿名函数</span></strong>。这两个概念经常与<strong><span style="color: #339966;">闭包性</span></strong>(<strong><span style="color: #339966;">closure</span></strong>)相关。例如在JavaScript、ActionScript或PHP(5.3之后)中都有相关的概念。</p>

<p>其实在Objective-C语言中也提供了这两个概念的实现：叫做<strong><span style="color: #339966;">block</span></strong>。</p>

<p>自从Mac OS X 10.6之后，就可以使用block了，其实这样归功于Clang。</p>

<h3><strong><span style="color: #339966;">1.1 匿名函数</span></strong></h3>

<p>就如名字暗示的一样，匿名函数实际上就是一个没有名字或者标示(<strong><span style="color: #339966;">identifier</span></strong>)的函数。匿名函数只有内容(也可以叫做body)，我们可以将其存储在一个变量中，以便之后使用，或者将其当做一个参数传递给另外一个函数使用。</p>

<p>在脚本语言的回调中经常使用到这个概念。</p>

<p>例如，在下面的JavaScript中，有一个名为<strong><span style="color: #339966;">foo</span></strong>的标准函数，接收一个callback当做参数，在函数中，调用了这个callback：</p>

<pre class="wp-code-highlight prettyprint linenums:1">function foo( callback )
{
    callback();
}</pre>


<p>这里有可能是定义了另外一个标准函数， 然后将这个标准函数当做参数传递给上面的函数：</p>

<pre class="wp-code-highlight prettyprint linenums:1">function bar()
{
    alert( &#039;hello, world&#039; );
}

foo( bar );</pre>


<p>不过这样一来，<strong><span style="color: #339966;">bar</span></strong>函数就会被声明在全局范围内，这就会带来一个风险：被另外一个相同名称的函数覆盖(<strong><span style="color: #339966;">override</span></strong>)了。</p>

<p>但是别担心，JavaScript语言允许callback函数在调用的时候才进行声明：</p>

<pre class="wp-code-highlight prettyprint linenums:1">foo
{
    function()
    {
        alert( &#039;hello, world&#039; );
    }
);</pre>


<p>在上面，可以看到这个callback实际上并没有标示(identifier)。它也不会存在于全局范围，因此也不会与别的已有函数产生冲突。</p>

<p>我们也可以把callback存储到一个变量中，同样也不回存在于全局范围，不过我们可以通过这个变量对这个callback进行重复利用：</p>

<pre class="wp-code-highlight prettyprint linenums:1">myCallback = function()
{
    alert( &#039;hello, world&#039; );
};

foo( myCallback );</pre>


<h3><strong><span style="color: #339966;"> 1.2闭包性</span></strong></h3>

<p>闭包性这个概念是允许一个函数访问其所声明上下文中的变量，甚至是在不同的运行上下文中。</p>

<p>下面我们再来看看JavaScript的相关代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">function foo( callback )
{
    alert( callback() );
}

function bar()
{
    var str = &#039;hello, world&#039;;

    foo
    (
        function()
        {
            return str;
        }
    );
}

bar();</pre>


<p>上面的代码中，callback被从bar函数的运行上下文中传递给了foo函数，该callback函数返回变量str的值。</p>

<p>不过在这里请注意，变量str是声明在bar函数中的，也就是说这个变量仅存于bar函数中。</p>

<p>而callback是在另外一个不同的函数中被执行的(跟变量str不在一起)，我们这是可能会猜测foo函数中什么也不会显示出来。</p>

<p>但是，在这里引入了闭包性这个概念。</p>

<p>也就是说在不同的函数中(运行上下文中)，一个函数可以访问到变量所声明上下文中的内容。</p>

<p>因此上面的代码中，callback可以访问到str变量——即使这个callback所在的foo函数不能直接访问这个str变量。</p>

<p>&nbsp;</p>

<h2><span style="color: #339966;"><strong>2、Objective-C中的实现</strong></span></h2>

<p>实际上闭包性和匿名函数在Objective-C中是可以使用的，只不过Objective-C是构建于C语言之上，属于强类型编译语言，所以跟上面介绍的解释性脚本语言有许多不同之处。</p>

<p>注意：block其实在纯C或C++(以及Objective-C++)中都是可用的。</p>

<p>在标准C函数中，定义block(匿名函数)之前需要先声明原型。</p>

<p>block的语法有一点点棘手，不过要是熟悉函数指针的话，就非常容易理解了。</p>

<p>下面是block的原型：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString * ( ^ myBlock )( int );</pre>


<p>上面的代码是声明了一个block(^)原型，名字就叫做myBlock，携带一个int参数，返回只为NSString类型的指针。</p>

<p>下面来看看block的定义：</p>

<pre class="wp-code-highlight prettyprint linenums:1">myBlock = ^( int number )
{
    return [ NSString stringWithFormat: @"Passed number: %i", number ];
};</pre>


<p>如上所示，将一个函数体赋值给了myBlock变量，其接收一个名为number的参数。该函数返回一个NSString对象。</p>

<p><strong><span style="color: #ff0000;">注意：不要忘记block后面的分号。</span></strong></p>

<p>在脚本语言中是可以忽略掉分号的，但是在编译性语言(如Objective-C)是必须有的。</p>

<p>如果没有写这个分号，编译器会产生一个错误，当然也不会生成可执行文件。</p>

<p>定义好block之后，就可以像使用标准函数一样使用它了：</p>

<pre class="wp-code-highlight prettyprint linenums:1">myBlock(5);</pre>


<p>下面是完整的Objective-C程序源代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#import &lt;Cocoa/Cocoa.h&gt;

int main( void )
{
    NSAutoreleasePool * pool;
    NSString * ( ^ myBlock )( int );

    pool    = [ [ NSAutoreleasePool alloc ] init ];
    myBlock = ^( int number )
    {
        return [ NSString stringWithFormat: @"Passed number: %i", number ];
    };

    NSLog( @"%@", myBlock(5) );

    [ pool release ];

    return EXIT_SUCCESS;
}</pre>


<p>我们可以用下面的命令来编译(在Terminal中)：</p>

<pre class="wp-code-highlight prettyprint linenums:1">gcc -Wall -framework Cocoa -o test test.m</pre>


<p>上面的命令会根据test.m源代码文件生成一个名为name的可执行文件。可以用下面的命令来运行这个可执行文件：</p>

<pre class="wp-code-highlight prettyprint linenums:1">./test</pre>


<p>如果不把block赋值给变量的话，可以忽略掉block原型的声明，例如直接将block当做参数进行传递。如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">someFunction( ^ NSString * ( void ) { return @"hello, world" } );</pre>


<p>注意，上面这种情况必须声明返回值的类型——这里是返回NSString对象。</p>

<h3><span style="color: #339966;"><strong>2.1将block当做参数来传递</strong></span></h3>

<p>之前说过了，block可以当做参数传递给某个C函数。</p>

<p>如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">void logBlock( NSString * ( ^ theBlock )( int ) )
{
    NSLog( @"Block returned: %@", theBlock() );
}</pre>


<p>由于Objective-C是强制类型语言，所以作为函数参数的block也必须要指定返回值的类型，以及相关参数类型(如果需要的话)。</p>

<p>其实在Objective-C方法中也是一样的：</p>

<pre class="wp-code-highlight prettyprint linenums:1">- ( void )logBlock: ( NSString * ( ^ )( int ) )theBlock;</pre>


<h3><span style="color: #339966;"><strong>2.2闭包性</strong></span></h3>

<p>之前有说过，闭包性在Objective-C中是可用的，只不过其行为跟解释性语言有所不同罢了。</p>

<p>我们来看看下面的程序：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#import &lt;Cocoa/Cocoa.h&gt;

void logBlock( int ( ^ theBlock )( void ) )
{
    NSLog( @"Closure var X: %i", theBlock() );
}

int main( void )
{
    NSAutoreleasePool * pool;
    int ( ^ myBlock )( void );
    int x;

    pool = [ [ NSAutoreleasePool alloc ] init ];
    x    = 42;

    myBlock = ^( void )
    {
        return x;
    };

    logBlock( myBlock );

    [ pool release ];

    return EXIT_SUCCESS;
}</pre>


<p>上面的代码在main函数中声明了一个整型，并赋值42，另外还声明了一个block，该block会将42返回。</p>

<p>然后将block传递给logBlock函数，该函数会显示出返回的值42。</p>

<p>即使是在函数logBlock中执行block，而block又声明在main函数中，但是block仍然可以访问到x变量，并将这个值返回。</p>

<p><strong><span style="color: #ff0000;">注意：block同样可以访问全局变量，即使是static。</span></strong></p>

<p>下面来看看第一点不同之处：通过block进行闭包的变量是const的。也就是说不能在block中直接修改这些变量。</p>

<p>来看看当block试着增加x的值时，会发生什么：</p>

<pre class="wp-code-highlight prettyprint linenums:1">myBlock = ^( void )
{
    x++

    return x;
};</pre>


<p>编译器会生成一个错误：大概意思是在block中x变量是只读的。</p>

<p>不过也别担心，为了允许在block中修改变量，也是可以做到的：用__block关键字来声明变量即可。</p>

<p>基于之前的代码，给x变量添加__block关键字，如下：</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block int x;</pre>


<h3><span style="color: #339966;"><strong>2.3内存管理</strong></span></h3>

<p>从C语言的角度来看，实际上block是一个结构体，可以被拷贝和销毁的。有两个函数可以使用：Block_copy和Block_destroy()。</p>

<p>而在Objective-C中，block可以接收retain、release和copie消息，这就跟普通对象一样。如果一个block需要被存储下来供以后使用，这些消息是非常重要的(例如，将block存储到一个类的实例变量中)。例如，为了避免错误的使用block，对block进行retain是非常有必要的。</p>

<p><span style="color: #339966;"><strong>2.4示例</strong></span></p>

<p>Block可以用在许多不同的环境中，这样可以让代码更加简单，以及减少函数声明的数量。</p>

<p>下面有一个实例：</p>

<p>我们将给NSArrary类添加一个static方法(类方法)，该方法通过一个callback，根据另外一个数组中的内容产生一个新的数组。</p>

<p>在PHP程序员眼里，该方法就如一个array_filter()。</p>

<p>首先，需要为NSArray类声明一个category。（通过category可以给已有的类添加新方法）。</p>

<pre class="wp-code-highlight prettyprint linenums:1">@interface NSArray( BlockExample )

+ ( NSArray * )arrayByFilteringArray: ( NSArray * )source withCallback: ( BOOL ( ^ )( id ) )callback;

@end</pre>


<p>上面，声明了一个方法，该方法返回一个NSArray对象，另外接收两个参数：NSArray对象，以及一个callback (为block)。</p>

<p>在callback中会判断根据传入数组参数中的每一个元素。并将返回一个boolean值，以确定当前array中的元素是否需要存储到返回的数组中。</p>

<p>block只有一个参数，代表数组中的某个元素。</p>

<p>我们来看看该方法的具体实现：</p>

<pre class="wp-code-highlight prettyprint linenums:1">@implementation NSArray( BlockExample )

+ ( NSArray * )arrayByFilteringArray: ( NSArray * )source withCallback: ( BOOL ( ^ )( id ) )callback
{
    NSMutableArray * result;
    id               element;

    result = [ NSMutableArray arrayWithCapacity: [ source count ] ];

    for( element in source ) {

        if( callback( element ) == YES ) {

            [ result addObject: element ];
        }
    }

    return result;
}

@end</pre>


<p>上面的代码中，首先是创建了一个可以动态改变尺寸的数组：NSMutableArray，然后根据source array的数目来初始化该数组。</p>

<p>然后对source array中的每个元素进行迭代， 如果callback返回值为YES的话，就将该元素添加到result数组中。</p>

<p>下面是使用该方法的一个完整示例：利用callback构建一个数组：该数组中只包含source array中为NSString类型的元素：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#import &lt;Cocoa/Cocoa.h&gt;

@interface NSArray( BlockExample )

+ ( NSArray * )arrayByFilteringArray: ( NSArray * )source withCallback: ( BOOL ( ^ )( id ) )callback;

@end

@implementation NSArray( BlockExample )

+ ( NSArray * )arrayByFilteringArray: ( NSArray * )source withCallback: ( BOOL ( ^ )( id ) )callback
{
    NSMutableArray * result;
    id               element;

    result = [ NSMutableArray arrayWithCapacity: [ source count ] ];

    for( element in source ) {

        if( callback( element ) == YES ) {

            [ result addObject: element ];
        }
    }

    return result;
}

@end

int main( void )
{
    NSAutoreleasePool * pool;
    NSArray           * array1;
    NSArray           * array2;

    pool   = [ [ NSAutoreleasePool alloc ] init ];
    array1 = [ NSArray arrayWithObjects: @"hello, world", [ NSDate date ], @"hello, universe", nil ];
    array2 = [ NSArray
                    arrayByFilteringArray: array1
                    withCallback:          ^ BOOL ( id element )
                    {
                        return [ element isKindOfClass: [ NSString class ] ];
                    }
             ];

    NSLog( @"%@", array2 );

    [ pool release ];

    return EXIT_SUCCESS;
}</pre>


<p>本文由<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-12</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度围观block：第三集]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/11/101/"/>
    <updated>2013-07-11T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/11/101</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/blocks1.png"><img class="alignnone size-full wp-image-1580" alt="blocks1" src="http://beyondvincent.com/wp-content/uploads/2013/07/blocks1.png" width="396" height="177" /></a></p>

<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/" target="_blank"><span style="color: #339966; text-decoration: underline;">galloway</span></a></span></strong></span>转载请注明出处！</p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>本文是深度围观block的第三篇文章，也是最后一篇。希望读者阅读了之后，对block有更加深入的理解，同时也希望之前对汇编语言恐惧或者陌生的读者转变看法，其实只要你用心去看，去学，很容易就搞懂的。</p>

<p>另外由于block具有闭包性，我们也可以将其当做匿名函数，所以大家如果想要了解更多关于OC中的闭包性和匿名函数就来看看这篇文章吧：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.xs-labs.com/en/archives/articles/objc-blocks/" target="_blank"><span style="color: #339966; text-decoration: underline;">Closure and anonymous functions in Objective-C</span></a></span></span></strong>。</p>

<!--more-->


<h2><strong><span style="color: #339966;">目录</span></strong></h2>

<ul>
<li><strong><span style="color: #339966;">介绍</span></strong></li>
<li><strong><span style="color: #339966;">已知内容</span></strong></li>
<li><strong><span style="color: #339966;">Block_copy()</span></strong></li>
<li><strong><span style="color: #339966;">Block_release()</span></strong></li>
<li><strong><span style="color: #339966;"><strong style="color: #333333;"><span style="color: #339966;">何去何从</span></strong></span></strong></li>
</ul>


<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">介绍</span></strong></h2>

<p>本文话费了很长时间才出炉。实际上，几个月之前就已经打好草稿了，只不过一直忙于写我的这本书:<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.effectiveobjectivec.com/" target="_blank"><span style="color: #339966; text-decoration: underline;">Effective Objective-C 2.0</span></a></span></span></strong>，所以没有时间完成本文。</p>

<p>接着之前的两篇文章：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://beyondvincent.com/2013/07/09/%e6%b7%b1%e5%ba%a6%e5%9b%b4%e8%a7%82block%ef%bc%9a%e7%ac%ac%e4%b8%80%e9%9b%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">深度围观block：第一集</span></a></span></span></strong>和<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://beyondvincent.com/2013/07/10/%e6%b7%b1%e5%ba%a6%e5%9b%b4%e8%a7%82block%ef%bc%9a%e7%ac%ac%e4%ba%8c%e9%9b%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">深度围观block：第二集</span></a></span></span></strong>，本文将更进一步了解当block被拷贝时发生了什么。可能你已经听过这样的说辞“block开始于栈”，以及“如果你希望将block保存下来，以便后续使用，那么必须对block进行拷贝”。那么，这是为什么呢？而在拷贝过程中实际又会发生什么情况？我一直在思考拷贝block时是利用了什么机制。就如之前介绍的block在进行值拷贝时发生了什么。本文我将揭晓这些疑问。</p>

<h2><strong><span style="color: #339966;">已知内容</span></strong></h2>

<p>通过<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/2013/07/09/%e6%b7%b1%e5%ba%a6%e5%9b%b4%e8%a7%82block%ef%bc%9a%e7%ac%ac%e4%b8%80%e9%9b%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">第一集</span></a></strong></span></span>和<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/2013/07/10/%e6%b7%b1%e5%ba%a6%e5%9b%b4%e8%a7%82block%ef%bc%9a%e7%ac%ac%e4%ba%8c%e9%9b%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">第二集</span></a></strong></span></span>两篇文章，我们可以知道block的内存布局如下图所示：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/block_layout.png"><img class="alignnone size-full wp-image-1575" alt="block_layout" src="http://beyondvincent.com/wp-content/uploads/2013/07/block_layout.png" width="500" height="500" /></a></p>

<p>在<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><strong><a href="http://beyondvincent.com/2013/07/10/%e6%b7%b1%e5%ba%a6%e5%9b%b4%e8%a7%82block%ef%bc%9a%e7%ac%ac%e4%ba%8c%e9%9b%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">第二集</span></a></strong></span></span>中，我们也知道了当block初始化的时候，会在栈中创建像上图这样的一个结构。由于这个结构是在栈上，而在栈空间是会被重复使用的。那么如果我们想要在以后继续使用该block，就必须要对block进行拷贝操作。拷贝操作需要调用<strong><span style="color: #339966;">Block_copy()</span></strong>函数，或者可以理解为给block发送一个<strong><span style="color: #339966;">copy</span></strong>消息(因为block可以看成一个Objective-C对象)，这也会调用<strong><span style="color: #339966;">Block_copy()</span></strong>函数。</p>

<p>下面我们就来看看Block_copy()函数都做了什么。</p>

<h2><strong><span style="color: #339966;">Block_copy()</span></strong></h2>

<p>我们首先来看看<strong><span style="color: #339966;">Block.h</span></strong>文件，在这里面可以看到如下定义：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#define Block_copy(...) ((__typeof(__VA_ARGS__))_Block_copy((const void *)(__VA_ARGS__)))

void *_Block_copy(const void *arg);</pre>


<p>可以看出，<strong><span style="color: #339966;">Block_copy()</span></strong>实际上就是一个宏定义(<strong><span style="color: #339966;">#define</span></strong>)，该宏定义将传入的参数(<strong><span style="color: #339966;">const void *</span></strong>)做强制类型转换，然后再传给<strong><span style="color: #339966;">_Block_copy()</span></strong>。我们也可以在实现文件<strong><span style="color: #339966;">runtime.c</span></strong>中找到<strong><span style="color: #339966;">_Block_copy()</span></strong>的原型：</p>

<pre class="wp-code-highlight prettyprint linenums:1">void *_Block_copy(const void *arg) {
    return _Block_copy_internal(arg, WANTS_ONE);
}</pre>


<p>上面的方法调用了<strong><span style="color: #339966;">_Block_copy_internal()</span></strong>函数，并传入block本身(arg)以及<strong><span style="color: #339966;">WANTS_ONE</span></strong>。要弄白具体意思，需要查看_Block_copy_internal方法的实现，该方法也是在<strong><span style="color: #339966;">runtime.c</span></strong>文件中。如下代码所示(已经去除掉了一些无关的内容：主要是垃圾回收相关)：</p>

<pre class="wp-code-highlight prettyprint linenums:1">static void *_Block_copy_internal(const void *arg, const int flags) {
    struct Block_layout *aBlock;
    const bool wantsOne = (WANTS_ONE & flags) == WANTS_ONE;

    // 1
    if (!arg) return NULL;

    // 2
    aBlock = (struct Block_layout *)arg;

    // 3
    if (aBlock-&gt;flags & BLOCK_NEEDS_FREE) {
        // latches on high
        latching_incr_int(&aBlock-&gt;flags);
        return aBlock;
    }

    // 4
    else if (aBlock-&gt;flags & BLOCK_IS_GLOBAL) {
        return aBlock;
    }

    // 5
    struct Block_layout *result = malloc(aBlock&gt;descriptor-&gt;size);
    if (!result) return (void *)0;

    // 6
    memmove(result, aBlock, aBlock-&gt;descriptor-&gt;size); // bitcopy first

    // 7
    result-&gt;flags &= ~(BLOCK_REFCOUNT_MASK);    // XXX not needed
    result-&gt;flags |= BLOCK_NEEDS_FREE | 1;

    // 8
    result-&gt;isa = _NSConcreteMallocBlock;

    // 9
    if (result-&gt;flags & BLOCK_HAS_COPY_DISPOSE) {
        (*aBlock-&gt;descriptor-&gt;copy)(result, aBlock); // do fixup
    }

    return result;
}</pre>


<p>下面来看看该方法都做了些什么事情：</p>

<p>1、如果传入的参数是<strong><span style="color: #339966;">NULL</span></strong>则直接返回<strong><span style="color: #339966;">NULL</span></strong>。这样可以保证传入一个<strong><span style="color: #339966;">NULL</span></strong> block时函数的安全性。</p>

<p>2、将参数强制转换为一个指针，该指针指向一个<strong><span style="color: #339966;">Block_layout</span></strong>结构对象。实际上在<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://beyondvincent.com/2013/07/09/%e6%b7%b1%e5%ba%a6%e5%9b%b4%e8%a7%82block%ef%bc%9a%e7%ac%ac%e4%b8%80%e9%9b%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">第一集</span></a></span></span></strong>中就介绍了Block_layout结构：这是一个内部使用的数据结构，该结构组成一个block，其中包含一个block的实现函数，以及另外几个元数据。</p>

<p>3、 如果block的flags包含BLOCK_NEEDS_FREE，说明这是一个堆block(a heap block)。这种情况下，需要做的事情就是增加引用计数(reference count)，然后将同一个的block返回。</p>

<p>4、如果block是一个全局block(参考<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/2013/07/09/%e6%b7%b1%e5%ba%a6%e5%9b%b4%e8%a7%82block%ef%bc%9a%e7%ac%ac%e4%b8%80%e9%9b%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">第一集</span></a></strong></span></span>)，那么不用做任何事情，直接返回同一个block即可——因为全局block是一个单例(singleton)。</p>

<p>5、如果到这一步了，可以肯定该block肯定被分配在栈上。这种情况，需要将block拷贝到堆上。这也是最有趣的一部分。首先是利用malloc()函数在堆上创建block对应size大小的内存空间。如果失败了，就返回<strong><span style="color: #339966;">NULL</span></strong>，否则继续往下执行。</p>

<p>6、 利用<strong><span style="color: #339966;">memmove()</span></strong>函数将分配在栈中的block按位拷贝至刚刚在堆上分配的空间中。按位拷贝可以确保block中的所有元数据都能准确的进行拷贝，例如block的descriptor。</p>

<p>7、接着需要更新一下block的flags。第一行代码是确保引用计数被设置为0。后面紧跟的注释表示这不是必须的——估计此时引用计数已经是0了。我猜测这行代码的作用是为了防止潜在的bug，会引起引用计数不为0的情况。第二行代码是设置<strong><span style="color: #339966;">BLOCK_NEEDS_FREE</span></strong>标志，这标示该block是一个堆block，当引用计数变为0时，需要<strong><span style="color: #339966;">free</span></strong>掉。后面紧跟的<strong><span style="color: #339966;">| 1</span></strong>是将block的引用计数设置为1。</p>

<p>8、将block的<strong><span style="color: #339966;">isa</span></strong>指针设置为 <span style="color: #339966;"><strong>_NSConcreteMallocBlock</strong></span>，这就意味着该block是一个堆block。</p>

<p>9、最后，如果block有一个拷贝辅助函数(a copy helper function)，那么就调用它。如果有必要的话，表一起会生成一个拷贝辅助函数。例如block需要拷贝对象的时候，拷贝辅助函数会retain住已经拷贝的对象。</p>

<p>思路很清晰吧！现在你应该知道当block被拷贝时会发什么了！下面还需要了解一下当release时又回发生什么？</p>

<h2><strong><span style="color: #339966;">Block_release</span></strong></h2>

<p>与Block_copy对应的是Block_release()。同样，Block_release()也是一个宏定义，如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#define Block_release(...) _Block_release((const void *)(__VA_ARGS__))</pre>


<p>实际上，跟<strong><span style="color: #339966;">Block_copy()</span></strong>类似，<strong><span style="color: #339966;">Block_release()</span></strong>会为我们把参数进行强制类型转换。这样开发者就不用亲自来处理转换的事情了。</p>

<p>下面我们来看看<strong><span style="color: #339966;">_Block_release()</span></strong>函数(为了看起来清晰点，我对代码重排了一下，并移除了垃圾回收相关的代码)：</p>

<pre class="wp-code-highlight prettyprint linenums:1">void _Block_release(void *arg) {
    // 1
    struct Block_layout *aBlock = (struct Block_layout *)arg;
    if (!aBlock) return;

    // 2
    int32_t newCount;
    newCount = latching_decr_int(&aBlock-&gt;flags) & BLOCK_REFCOUNT_MASK;

    // 3
    if (newCount &gt; 0) return;

    // 4
    if (aBlock-&gt;flags & BLOCK_NEEDS_FREE) {
        if (aBlock-&gt;flags & BLOCK_HAS_COPY_DISPOSE)(*aBlock-&gt;descriptor-&gt;dispose)(aBlock);
        _Block_deallocator(aBlock);
    }

    // 5
    else if (aBlock-&gt;flags & BLOCK_IS_GLOBAL) {
        ;
    }

    // 6
    else {
        printf("Block_release called upon a stack Block: %p, ignored\n", (void *)aBlock);
    }
}</pre>


<p>来看看他们都做了些什么：</p>

<p>1、 首先将参数强制转换为<strong><span style="color: #339966;">Block_layout</span></strong>结构。如果传入的是<strong><span style="color: #339966;">NULL</span></strong>，那么为了函数的安全起见，将直接返回。</p>

<p>2、将block的引用计数标志位减1(还记得<strong><span style="color: #339966;">Block_copy()</span></strong>中将这个引用计数标志位设置为1吗？)。</p>

<p>3、如果newCount大于0，说明还有别的对象引用了这个block，所以并不需要立即释放block，只需简单的返回即可。</p>

<p>4、否则，如果flags中包含<strong><span style="color: #339966;">BLOCK_NEEDS_FREE</span></strong>，那么说明这个block是分配到堆上的，并且如果引用计数为0，那么需要释放这个block。首先是调用了block的dispose辅助函数，该函数跟copy辅助函数相反，负责做相反的操作，例如释放掉所有在block中拷贝的变量等。最后使用<strong><span style="color: #339966;">_Block_deallocator</span></strong>函数释放掉block，如果你去<strong><span style="color: #339966;">runtime.c</span></strong>文件中看看，会发现该函数的尾部是一个指向<strong><span style="color: #339966;">free</span></strong>的函数指针，也就是释放掉<strong><span style="color: #339966;">malloc</span></strong>分配的内存。</p>

<p>5、如果block是全局的，那么什么事情也不用做。</p>

<p>6、如果代码执行到这里了，会发生一些奇怪的事情：因为正在尝试将栈上的block释放掉，所以这行代码是为了提醒开发者的。在程序实际运行过程中，永远不会看到这里的提示。</p>

<p>Coool！就是这些了，没有更多，也没有再复杂的东西了！</p>

<h2><strong><span style="color: #339966;">何去何从</span></strong></h2>

<p>本文也是我深度围观block的最后一篇。其中有一些内容也可也在我的这本书中找到：<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://www.effectiveobjectivec.com/" target="_blank"><span style="color: #339966; text-decoration: underline;">Effective Objective-C 2.0</span></a></strong></span></span>。这一系列文章介绍了如何有效的使用block，并且如果你对block感兴趣的话，这系列的内容也可以帮助你更加深入的了解block。</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-11</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度围观block：第二集]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/10/100/"/>
    <updated>2013-07-10T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/10/100</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/blocks.png"><img class="alignnone size-full wp-image-1571" alt="blocks" src="http://beyondvincent.com/wp-content/uploads/2013/07/blocks.png" width="561" height="233" /></a></p>

<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/" target="_blank"><span style="color: #339966; text-decoration: underline;">galloway</span></a></span></strong></span>转载请注明出处！</p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>今天翻译了第二篇，这个翻译是比较痛苦(其实不止这篇，所有的都是)， 不比单纯的阅读，许多地方需要查阅资料，并细心的遣词造句，还得注意词不达意的地方(例如文中的<strong><span style="color: #339966;">A block that captures scope</span></strong>我翻译为<strong><span style="color: #339966;">block的拷贝范围</span></strong>，总感觉缺了一些作者原意，功力有限啊)。所以，我劝大家要是能看原文尽量去看原文吧，我这翻译的权当参考。</p>

<!--more-->


<h2><strong><span style="color: #339966;">目录</span></strong></h2>

<ul>
<li><strong><span style="color: #339966;">介绍</span></strong></li>
<li><strong><span style="color: #339966;">block类型</span></strong></li>
<li><strong><span style="color: #339966;">block的拷贝范围</span></strong></li>
<li><strong><span style="color: #339966;">block拷贝对象的类型</span></strong></li>
<li><strong><span style="color: #339966;">何去何从</span></strong></li>
</ul>


<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">介绍</span></strong></h2>

<p>本文接着上一篇文章(<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://beyondvincent.com/2013/07/09/%E6%B7%B1%E5%BA%A6%E5%9B%B4%E8%A7%82block%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%9B%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">深度围观block：第一集</span></a></span></span></strong>)，继续从编译器的角度深度围观block。在本文中，将介绍block并不是一成不变的，以及block在栈上的构成。</p>

<h2><strong><span style="color: #339966;">block类型</span></strong></h2>

<p>在<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://beyondvincent.com/2013/07/09/%E6%B7%B1%E5%BA%A6%E5%9B%B4%E8%A7%82block%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%9B%86/" target="_blank"><span style="color: #339966; text-decoration: underline;">第一篇</span></a></span></span></strong>文章中，我们已经看到block有一个<strong><span style="color: #339966;">_NSConcreteGlobalBlock</span></strong>这样的类。由于所有变量都是已知的，所以在编译期间，block的结构(structure)和描述(descriptor)都将全部被初始化。关于block这里有几种不同的类型，每种类型都有对应的类。为了简单起见，这里只考虑其中三种：</p>

<ol>
<li><strong><span style="color: #339966;">_NSConcreteGlobalBlock</span></strong>是定义一个全局的block，在编译器就已经完成相关初始化任务。这种类型的block不会涉及到任何拷贝，例如一个空的block。</li>
<li><strong><span style="color: #339966;">_NSConcreteStackBlock</span></strong>是一个分配在栈上的block。这里是所有最终被拷贝到堆(heap)上的block的开始。</li>
<li><strong><span style="color: #339966;">_NSConcreteMallocBlock</span></strong>是分配到堆(heap)上的block。拷贝完一个block之后，这就会结束。当block的引用计数变为0，该block就会被释放。</li>
</ol>


<h2><strong><span style="color: #339966;">block拷贝范围</span></strong></h2>

<p>这次我们来看看另外一些代码，如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#import &lt;dispatch/dispatch.h&gt;

typedef void(^BlockA)(void);
void foo(int);

__attribute__((noinline))
void runBlockA(BlockA block) {
    block();
}

void doBlockA() {
    int a = 128;
    BlockA block = ^{
        foo(a);
    };
    runBlockA(block);
}</pre>


<p>为了让block拷贝一些内容，上面的代码中调用了<strong><span style="color: #339966;">foo</span></strong>函数，并给这个函数传递了一个变量。再说一下，本文涉及到的汇编代码是与armv7相关指令。下面是其中一部分汇编指令：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.globl  _runBlockA
    .align  2
    .code   16                      @ @runBlockA
    .thumb_func     _runBlockA
_runBlockA:
    ldr     r1, [r0, #12]
    bx      r1</pre>


<p>上面的汇编代码与<strong><span style="color: #339966;">runBlockA</span></strong>函数相关，这跟第一篇文章中的相同——都是调用了block中的<strong><span style="color: #339966;">invoke</span></strong>函数。接着是<strong><span style="color: #339966;">doBlockA</span></strong>汇编代码，如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.globl  _doBlockA
    .align  2
    .code   16                      @ @doBlockA
    .thumb_func     _doBlockA
_doBlockA:
    push    {r7, lr}
    mov     r7, sp
    sub     sp, #24
    movw    r2, :lower16:(L__NSConcreteStackBlock$non_lazy_ptr-(LPC1_0+4))
    movt    r2, :upper16:(L__NSConcreteStackBlock$non_lazy_ptr-(LPC1_0+4))
    movw    r1, :lower16:(___doBlockA_block_invoke_0-(LPC1_1+4))
LPC1_0:
    add     r2, pc
    movt    r1, :upper16:(___doBlockA_block_invoke_0-(LPC1_1+4))
    movw    r0, :lower16:(___block_descriptor_tmp-(LPC1_2+4))
LPC1_1:
    add     r1, pc
    ldr     r2, [r2]
    movt    r0, :upper16:(___block_descriptor_tmp-(LPC1_2+4))
    str     r2, [sp]
    mov.w   r2, #1073741824
    str     r2, [sp, #4]
    movs    r2, #0
LPC1_2:
    add     r0, pc
    str     r2, [sp, #8]
    str     r1, [sp, #12]
    str     r0, [sp, #16]
    movs    r0, #128
    str     r0, [sp, #20]
    mov     r0, sp
    bl      _runBlockA
    add     sp, #24
    pop     {r7, pc}</pre>


<p>看看，这跟之前的代码有所不同了。看起来这不仅仅是从一个全局的符号中加载block，而且还做了额外的一些事情。乍一看这么多代码让人有点无从下手，不过认真看，还是很容易理解的。从上面的代码可以看出，编译器已经忽略了对代码排序的优化，为了方便阅读代码，我对上面的汇编代码重新进行排序(当然，请相信我，这不会影响任何功能)。下面是我重排好的代码效果：</p>

<pre class="wp-code-highlight prettyprint linenums:1">_doBlockA:
        // 1
        push    {r7, lr}
        mov     r7, sp

        // 2
        sub     sp, #24

        // 3
        movw    r2, :lower16:(L__NSConcreteStackBlock$non_lazy_ptr-(LPC1_0+4))
        movt    r2, :upper16:(L__NSConcreteStackBlock$non_lazy_ptr-(LPC1_0+4))
LPC1_0:
        add     r2, pc
        ldr     r2, [r2]
        str     r2, [sp]

        // 4
        mov.w   r2, #1073741824
        str     r2, [sp, #4]

        // 5
        movs    r2, #0
        str     r2, [sp, #8]

        // 6
        movw    r1, :lower16:(___doBlockA_block_invoke_0-(LPC1_1+4))
        movt    r1, :upper16:(___doBlockA_block_invoke_0-(LPC1_1+4))
LPC1_1:
        add     r1, pc
        str     r1, [sp, #12]

        // 7
        movw    r0, :lower16:(___block_descriptor_tmp-(LPC1_2+4))
        movt    r0, :upper16:(___block_descriptor_tmp-(LPC1_2+4))
LPC1_2:
        add     r0, pc
        str     r0, [sp, #16]

        // 8
        movs    r0, #128
        str     r0, [sp, #20]

        // 9
        mov     r0, sp
        bl      _runBlockA

        // 10
        add     sp, #24
        pop     {r7, pc}</pre>


<p>下面我们来看看这些代码都做了什么：</p>

<ol>
<li>开场白。首先将 <strong><span style="color: #339966;">r7</span></strong> push到栈上面——因为r7会被覆盖，而r7寄存器中的内容在跨函数调用时是需要用到的。<strong><span style="color: #339966;">lr</span></strong>是链接寄存器(link register)，该寄存器中存储着当这个函数返回时需要执行下一条指令的地址。接着mov这条指令的作用是把栈指针保存到r7<strong><span style="color: #339966;">寄存器</span></strong>中。</li>
<li>从栈指针所处位置开始减去24，也就是在栈空间上开辟24字节来存储数据。</li>
<li>这里涉及到的代码是为了对符号<strong><span style="color: #339966;">L__NSConcreteStackBlock$non_lazy_ptr</span></strong>进行寻址，由于跟pc(program counter)相关联，所以无论代码处于二进制文件中任何位置，当最终链接时，都能对该符号做到正确的寻址。</li>
<li>将值<strong><span style="color: #339966;">1073741824</span></strong>存储到栈指针 + 4 的位置。</li>
<li>将值<strong><span style="color: #339966;"></span></strong>存储到栈指针 + 8 的位置。现在，将要发生什么可能已经变得逐渐清晰了——在栈上创建了一个<strong><span style="color: #339966;">Block_layout</span></strong>结构的对象！到现在为止，已经设置了该结构的3个值：<strong><span style="color: #339966;">isa</span></strong>指针，<strong><span style="color: #339966;">flags</span></strong>和<strong><span style="color: #339966;">reserved</span></strong>值。</li>
<li>将<strong><span style="color: #339966;">___doBlockA_block_invoke_0</span></strong>存储至栈指针 + 12的位置。这是block结构中的<strong><span style="color: #339966;">invoke</span></strong>。</li>
<li>将<strong><span style="color: #339966;">___block_descriptor_tmp</span></strong>存储至栈指针 + 16的位置。这是block结构中的<strong><span style="color: #339966;">descriptor</span></strong>。</li>
<li>将值<strong><span style="color: #339966;">128</span></strong>存储到栈指针 + 20的位置。如果回头看看<strong><span style="color: #339966;">Block_layout</span></strong>结构，可以看到里面只应该有5个值。那么在这个block结构体后面存储的128是什么呢？——注意到这个<strong><span style="color: #339966;">128</span></strong>实际上就是在block中拷贝的变量的值。所以这肯定就是存储block使用到的值的地方——在<strong><span style="color: #339966;">Block_layout</span></strong>结构尾部。</li>
<li>现在栈指针指向了已经完成初始化之后的block结构，在这里的汇编指令是将栈指针装载到<strong><span style="color: #339966;">r0</span></strong>中，然后调用<strong><span style="color: #339966;">runBlockA</span></strong>函数。(记住：在ARM EABI中，<strong><span style="color: #339966;">r0</span></strong>中存储的内容被当做函数的第一个参数)。</li>
<li>最后将栈指针加上24，这样就能够把最开始减去的24(在栈上开辟的24位空间)收回来。接着将栈中的两个值pop到<strong><span style="color: #339966;">r7</span></strong>和<strong><span style="color: #339966;">pc</span></strong>寄存器中。这里pop到<strong><span style="color: #339966;">r7</span></strong>中的，跟最开始从r7中push至栈中的内容是一致的，而<strong><span style="color: #339966;">pc</span></strong>的值则是最开始push <strong><span style="color: #339966;">lr</span></strong>到栈中的值，这样当函数返回时，可以让CPU能够正确的继续执行后续指令。</li>
</ol>


<p>Cooool！如果你一直认真看到这里，那么相信你的收获已经非常多了！</p>

<p>下面我们再看看block中的invoke函数和descriptor。希望跟第一集中的不要有太大差别。如下汇编代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.align  2
    .code   16                      @ @__doBlockA_block_invoke_0
    .thumb_func     ___doBlockA_block_invoke_0
___doBlockA_block_invoke_0:
    ldr     r0, [r0, #20]
    b.w     _foo

    .section        __TEXT,__cstring,cstring_literals
L_.str:                                 @ @.str
    .asciz   "v4@?0"

    .section        __TEXT,__objc_classname,cstring_literals
L_OBJC_CLASS_NAME_:                     @ @"\01L_OBJC_CLASS_NAME_"
    .asciz   "\001P"

    .section        __DATA,__const
    .align  2                       @ @__block_descriptor_tmp
___block_descriptor_tmp:
    .long   0                       @ 0x0
    .long   24                      @ 0x18
    .long   L_.str
    .long   L_OBJC_CLASS_NAME_</pre>


<p>看着没错，跟第一集中的没多大区别。唯一不同的就是block descriptor中的<strong><span style="color: #339966;">size</span></strong>——现在是<strong><span style="color: #339966;">24</span></strong>(之前是<strong><span style="color: #339966;">20</span></strong>)。这是因为block拷贝了一个整型值，所以block的结构需要24个字节，而不再是标准的20个字节了。在之前的代码中，我们已经分析了在创建block时，多出的4个字节被添加到block结构的尾部。<br/>
在实际的block函数中，例如<strong><span style="color: #339966;">___doBlockA_block_invoke_0</span></strong>，可以看到从block结构尾部读取出相关值，如<strong><span style="color: #339966;">r0 + 20</span></strong>，就是在block中拷贝的变量。</p>

<h2><strong><span style="color: #339966;">block拷贝对象的类型</span></strong></h2>

<p>下面我们来看看如果block拷贝的是别的对象类型(例如 <strong><span style="color: #339966;">NSString</span></strong>)，而不是integer，会发生什么呢？如下代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#import &lt;dispatch/dispatch.h&gt;

typedef void(^BlockA)(void);
void foo(NSString*);

__attribute__((noinline))
void runBlockA(BlockA block) {
    block();
}

void doBlockA() {
    NSString *a = @"A";
    BlockA block = ^{
        foo(a);
    };
    runBlockA(block);
}</pre>


<p>由于<strong><span style="color: #339966;">doBlockA</span></strong>变化不大，所以在此不深入介绍。这里感兴趣的是根据上面代码创建的block descriptor结构：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.section        __DATA,__const
    .align  4                       @ @__block_descriptor_tmp
___block_descriptor_tmp:
    .long   0                       @ 0x0
    .long   24                      @ 0x18
    .long   ___copy_helper_block_
    .long   ___destroy_helper_block_
    .long   L_.str1
    .long   L_OBJC_CLASS_NAME_</pre>


<p>注意看上面的汇编代码中有指向两个函数(<strong><span style="color: #339966;"><em>__copy_helper_block</em></span></strong>和<strong><span style="color: #339966;"><em>__destroy_helper_block</em></span></strong>)的指针。下面是这两个函数的定义：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.align  2
    .code   16                      @ @__copy_helper_block_
    .thumb_func     ___copy_helper_block_
___copy_helper_block_:
    ldr     r1, [r1, #20]
    adds    r0, #20
    movs    r2, #3
    b.w     __Block_object_assign

    .align  2
    .code   16                      @ @__destroy_helper_block_
    .thumb_func     ___destroy_helper_block_
___destroy_helper_block_:
    ldr     r0, [r0, #20]
    movs    r1, #3
    b.w     __Block_object_dispose</pre>


<p>这里我先假设当block被拷贝和销毁时，都会调用这里的函数。那么被block拷贝的对象肯定会发生reatain和release。上面的代码中，可以看出如果r0和r1包含有效数据时，拷贝函数接收两个参数(<strong><span style="color: #339966;">r0</span></strong>和<strong><span style="color: #339966;">r1</span></strong>)。而销毁函数接收一个参数。可以看出所有的拷贝和销毁任务都应该是由<strong><span style="color: #339966;">__Block_object_assign</span></strong>和<strong><span style="color: #339966;">__Block_object_dispose</span></strong>两个函数完成的。这两个函数位于block的运行时代码中(是LLVM里面<strong><span style="color: #339966;">compiler-rt</span></strong>工程的一部分)。<br/>
如果你希望了解一下block运行时相关代码，可以来这里下载源码：<strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://compiler-rt.llvm.org" target="_blank"><span style="color: #339966; text-decoration: underline;"><a href="http://compiler-rt.llvm.org">http://compiler-rt.llvm.org</a></span></a></span></span></strong>。特别关注一下里面的<strong><span style="color: #339966;">runtime.c</span></strong>文件。</p>

<h2><strong><span style="color: #339966;">何去何从</span></strong></h2>

<p>在下一集中我将调查<strong><span style="color: #339966;">Block_copy</span></strong>相关代码，并看看相关工作处理情况，以此来深度围观一下block运行时。通过下一集的学习，你也将会深入了解拷贝和销毁函数(也就是本文中我们刚刚看到的在block拷贝对象时使用的函数)。</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-10</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度围观block：第一集]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/09/99/"/>
    <updated>2013-07-09T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/09/99</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/blocks_2x.png"><img class="alignnone size-full wp-image-1563" alt="blocks_2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/blocks_2x.png" width="1140" height="420" /></a></p>

<p>&nbsp;</p>

<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/" target="_blank"><span style="color: #339966; text-decoration: underline;">galloway</span></a></span></strong></span>转载请注明出处！</p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>还记得之前的两篇文章吗：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://beyondvincent.com/2013/06/19/ios%e6%b1%87%e7%bc%96%e6%95%99%e7%a8%8b%ef%bc%9aarm/" target="_blank"><span style="color: #339966; text-decoration: underline;">iOS汇编教程：ARM(1)</span></a></span></span></strong>和<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://beyondvincent.com/2013/06/20/ios%e6%b1%87%e7%bc%96%e6%95%99%e7%a8%8b%ef%bc%9aarm2/" target="_blank"><span style="color: #339966; text-decoration: underline;">iOS汇编教程：ARM(2)</span></a></span></strong></span>，里面介绍了Objective-C生成的汇编代码。本文介绍的内容也跟汇编相关，只不过是与block相关，如果对汇编有不了解的，可以先去看看那两篇带有启蒙性质的文章哟。本文将从汇编的角度来介绍block相关知识。另外，如果你对block还不了解的话，建议你先去看看我的上一篇文章：<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://beyondvincent.com/2013/07/08/%e5%88%9d%e5%a7%8bblock/" target="_blank"><span style="color: #339966; text-decoration: underline;">初识block</span></a></span></span></strong>。</p>

<!--more-->


<p><strong style="font-size: 1.5em;"><span style="color: #339966;">目录：</span></strong></p>

<ul>
<li><strong><span style="color: #339966;">简介</span></strong></li>
<li><strong><span style="color: #339966;">基础知识</span></strong></li>
<li><strong><span style="color: #339966;">深入一个简单示例</span></strong></li>
<li><span style="color: #339966;"><b>源码在这里</b></span></li>
<li><span style="color: #339966;"><b>何去何从</b></span></li>
</ul>


<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">简介</span></strong></h2>

<p>今天我们从编译器的角度观察一下block内部是如何工作的。这里说的block是指苹果为C语言增加的具有闭包性(closure)的一个功能，block已经是clang/LLVM编译器所支持的一部分了。我一直在想block是什么，以及它是如何奇迹般的出现在Objective-C对象中(开发者可以像处理实例对象一样，对block进行<strong><span style="color: #339966;">copy</span></strong>、<span style="color: #339966;"><strong>retain</strong></span>、<strong><span style="color: #339966;">release</span></strong>)。本文我首先深入的介绍一点关于block的那些事。</p>

<h2><strong><span style="color: #339966;">基础知识</span></strong></h2>

<p>用过block的开发者都知道，下面的代码就是一个block：</p>

<pre class="wp-code-highlight prettyprint linenums:1">void(^block)(void) = ^{
    NSLog(@"I&#039;m a block!");
};</pre>


<p>上面的代码中创建了一个名为<strong><span style="color: #339966;">block</span></strong>的变量，并把一个简单的block代码赋值给这个变量。代码很简单，不是吗？不！！！在这里我想要搞清楚编译器对这点代码都做了些什么。<br/>
更进一步，下面的代码我给block传递了一个变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">void(^block)(int a) = ^{
    NSLog(@"I&#039;m a block! a = %i", a);
};</pre>


<p>而下面的代码是从block中返回一个值：</p>

<pre class="wp-code-highlight prettyprint linenums:1">int(^block)(void) = ^{
    NSLog(@"I&#039;m a block!");
    return 1;
};</pre>


<p>作为一个封闭的包，block将所处的上下文封装到了block中：</p>

<pre class="wp-code-highlight prettyprint linenums:1">int a = 1;
void(^block)(void) = ^{
    NSLog(@"I&#039;m a block! a = %i", a);
};</pre>


<p>编译器对上面这些代码具体是如何处理的——这才是我所感兴趣的。</p>

<h2><strong><span style="color: #339966;">深入一个简单示例</span></strong></h2>

<p>首先我的思路是看看编译器是如何编译一个非常简单的block。来看看如下代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#import &lt;dispatch/dispatch.h&gt;

typedef void(^BlockA)(void);

__attribute__((noinline))
void runBlockA(BlockA block) {
    block();
}

void doBlockA() {
    BlockA block = ^{
        // Empty block
    };
    runBlockA(block);
}</pre>


<p>之所以要用上面这样的代码，是因为我想看看block是如何创建的，以及如何调用一个block。如果block的创建和调用都在一个函数里面，那么优化器(optimiser)可能会对代码做优化处理，导致我们看不到任何感兴趣的东西，所以我给<strong><span style="color: #339966;">runBlockA</span></strong>函数添加了<strong><span style="color: #339966;">noinline</span></strong>，这样优化器就不会在<strong><span style="color: #339966;">doBlockA</span></strong>函数中对runBlockA的调用做内联优化处理。</p>

<p>上面代码通过编译器编译之后(armv7，03)，会得到如下汇编指令：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.globl  _runBlockA
    .align  2
    .code   16                      @ @runBlockA
    .thumb_func     _runBlockA
_runBlockA:
@ BB#0:
    ldr     r1, [r0, #12]
    bx      r1</pre>


<p>上面的汇编代码是对应<strong><span style="color: #339966;">runBlockA</span></strong>函数——这相当的简单。注意观察之前的源码，可以知道这个函数只是简单的调用了block。在ARM EABI中，将<strong><span style="color: #339966;">r0</span></strong>(寄存器r0)设置为第一个参数。第一条指令(r1)是将存储在地址为<strong><span style="color: #339966;">r0 + 12</span></strong>的值装载到寄存器<strong><span style="color: #339966;">r1</span></strong>中。这可以理解为指针的解引用——读12个字节到寄存器中。然后跳转到这个地址执行后面的指令。注意，这里使用了<strong><span style="color: #339966;">r1</span></strong>，而<strong><span style="color: #339966;">r0</span></strong>没有被修改，仍然是原来的block。所以这里很有可能是利用第一个参数来调用block。<br/>
据此，可以确定block在结构中的一些排序规则：block被当做执行的函数时存储在某个结构中，并占据了12个字节。当传递一个block时，指向这些结构的一个指针被传递进来了。</p>

<p>下面来看看<strong><span style="color: #339966;">doBlockA</span></strong>函数：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.globl  _doBlockA
    .align  2
    .code   16                      @ @doBlockA
    .thumb_func     _doBlockA
_doBlockA:
    movw    r0, :lower16:(___block_literal_global-(LPC1_0+4))
    movt    r0, :upper16:(___block_literal_global-(LPC1_0+4))
LPC1_0:
    add     r0, pc
    b.w     _runBlockA</pre>


<p>OK，上面的代码也不复杂——这是关于pc(program counter)的相关加载。你可以将其看做是把变量<strong><span style="color: #339966;">___block_literal_global</span></strong>的地址加载到<strong><span style="color: #339966;">r0</span></strong>中。然后调用<strong><span style="color: #339966;">runBlockA</span></strong>函数。因为从之前的源码中，可以知道我们把block传递给了<strong><span style="color: #339966;">runBlockA</span></strong>，所以这里的<strong><span style="color: #339966;">___block_literal_global</span></strong>一定就是那个被传递的block对象了。<br/>
到目前为止，我们对上面的源码的运作有一些眉目了！不过这里的<strong><span style="color: #339966;">___block_literal_global</span></strong>是什么呢？继续看汇编代码，可以找到如下这样的内容：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.align  2                       @ @__block_literal_global
___block_literal_global:
    .long   __NSConcreteGlobalBlock
    .long   1342177280              @ 0x50000000
    .long   0                       @ 0x0
    .long   ___doBlockA_block_invoke_0
    .long   ___block_descriptor_tmp</pre>


<p>Cool！上面的汇编代码看起来像是一个结构体。在结构体中又5个值，每个值有4个字节(long)。这肯定就是<strong><span style="color: #339966;">RunBlockA</span></strong>调用中涉及到的那个block对象。再细看一下，12个字节所在处就像一个函数指针：<strong><span style="color: #339966;">___doBlockA_block_invoke_0</span></strong>。这也是<strong><span style="color: #339966;">runBlockA</span></strong>函数中跳转执行的那个分支(bx r1)。</p>

<h2></h2>

<p>那么上面的汇编代码中<strong><span style="color: #339966;">__NSConcreteGlobalBlock</span></strong>又是何物？OK，现在先不介绍这个，后面会做介绍哦！下面我们来看看另外两个感兴趣的东西：<strong><span style="color: #339966;">___doBlockA_block_invoke_0</span></strong>和<strong><span style="color: #339966;">___block_descriptor_tmp</span></strong>，这两个东东同样出现在了汇编代码中：</p>

<pre class="wp-code-highlight prettyprint linenums:1">.align  2
    .code   16                      @ @__doBlockA_block_invoke_0
    .thumb_func     ___doBlockA_block_invoke_0
___doBlockA_block_invoke_0:
    bx      lr

    .section        __DATA,__const
    .align  2                       @ @__block_descriptor_tmp
___block_descriptor_tmp:
    .long   0                       @ 0x0
    .long   20                      @ 0x14
    .long   L_.str
    .long   L_OBJC_CLASS_NAME_

    .section        __TEXT,__cstring,cstring_literals
L_.str:                                 @ @.str
    .asciz   "v4@?0"

    .section        __TEXT,__objc_classname,cstring_literals
L_OBJC_CLASS_NAME_:                     @ @"\01L_OBJC_CLASS_NAME_"
    .asciz   "\001"</pre>


<p>上面的代码中<strong><span style="color: #339966;">___doBlockA_block_invoke_0</span></strong>看起来有点像block的实现部分，只不过这里的block是空的，所以会立即返回(刚开始我们就期望编译一个空的block哦)。<br/>
接着看看<strong><span style="color: #339966;">___block_descriptor_tmp</span></strong>。这里可以看到另外一个数据结构——有4个值。其中第2个是<strong><span style="color: #339966;">20</span></strong>，这表示<strong><span style="color: #339966;">___block_literal_global</span></strong>的大小。接着是一个名为<strong><span style="color: #339966;">.str</span></strong>的C字符串，它的值为<strong><span style="color: #339966;">v4@?0</span></strong>，看起来有点像某个类型的编码形式。这可能是block 类型的编码(例如返回void和不携带任何参数)。上面代码中别的一些值我暂时还不清楚。</p>

<h2><strong><span style="color: #339966;">源码在这里</span></strong></h2>

<p>没错，这里有源代码！这是LLVM中<strong><span style="color: #339966;">compiler-rt</span></strong>项目的一部分。查看代码，我发现在<span style="color: #339966;"><strong><span style="text-decoration: underline;"><a href="https://llvm.org/svn/llvm-project/compiler-rt/trunk/BlocksRuntime/Block_private.h" target="_blank"><span style="color: #339966; text-decoration: underline;">Block_private.h</span></a></span></strong></span>文件中，有如下相关代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">struct Block_descriptor {
    unsigned long int reserved;
    unsigned long int size;
    void (*copy)(void *dst, void *src);
    void (*dispose)(void *);
};

struct Block_layout {
    void *isa;
    int flags;
    int reserved;
    void (*invoke)(void *, ...);
    struct Block_descriptor *descriptor;
    /* Imported variables. */
};</pre>


<p>这看起来很熟悉吧！其中<strong><span style="color: #339966;">Block_layout</span></strong>结构体就是<strong><span style="color: #339966;">___block_literal_global</span></strong>，而<strong><span style="color: #339966;">Block_descriptor</span></strong>结构体则是<strong><span style="color: #339966;">__block_descriptor_tmp</span></strong>。细看Block_descriptor中的第2个变量size正如我之前描述的一样(表示___block_literal_global的大小)。在<strong><span style="color: #339966;">Block_descriptor</span></strong>中的第3和第4个值有点奇怪。这看起来有点想函数指针，但是在上面的汇编代码中看起来更像是两个字符串。现在我忽略掉这个细节。</p>

<p><strong><span style="color: #339966;"> Block_layout</span></strong>中的<span style="color: #339966;"><strong>isa</strong></span>肯定就是<strong><span style="color: #339966;">__NSConcreteGlobalBlock</span></strong>，这也将确定block如何能够模拟Objective-C对象。如果<strong><span style="color: #339966;">__NSConcreteGlobalBlock</span></strong>是一个<strong><span style="color: #339966;">Class</span></strong>，那么Objective-C消息派送系统会将block对象当做一个普通的对象来处理。这跟如何处理toll-free bridging工作类似。更多相关toll-free bridging信息，可以阅读Mike Ash写的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://www.mikeash.com/pyblog/friday-qa-2010-01-22-toll-free-bridging-internals.html" target="_blank"><span style="color: #339966; text-decoration: underline;">一篇优秀文章</span></a></span></span></strong>。</p>

<p>将所有的代码片段拼凑起来，编译器做的工作内容看起来如下所示：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#import &lt;dispatch/dispatch.h&gt;

__attribute__((noinline))
void runBlockA(struct Block_layout *block) {
    block-&gt;invoke();
}

void block_invoke(struct Block_layout *block) {
    // Empty block function
}

void doBlockA() {
    struct Block_descriptor descriptor;
    descriptor-&gt;reserved = 0;
    descriptor-&gt;size = 20;
    descriptor-&gt;copy = NULL;
    descriptor-&gt;dispose = NULL;

    struct Block_layout block;
    block-&gt;isa = _NSConcreteGlobalBlock;
    block-&gt;flags = 1342177280;
    block-&gt;reserved = 0;
    block-&gt;invoke = block_invoke;
    block-&gt;descriptor = descriptor;

    runBlockA(&amp;block);
}</pre>


<p>非常不错！通过上面的介绍，我们可以了解很多关于block内部的东西。</p>

<h2><strong><span style="color: #339966;">何去何从</span></strong></h2>

<p>下一步我将介绍携带一个参数的block，以及从封闭范围内拷贝一个变量的block。这些内容跟本文介绍的又稍显不同！期待吧！</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-09</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识block]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/08/98/"/>
    <updated>2013-07-08T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/08/98</id>
    <content type="html"><![CDATA[<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/blocks.html" target="_blank"><span style="color: #339966; text-decoration: underline;">rypress</span></a></span></span></strong>转载请注明出处！</p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>本周末微博上朋友发了一个关于block的MV，只能说老外太逗了。大家也可以去看看怎么回事：<a href="http://blog.bignerdranch.com/3001-cocoa-got-blocks/" target="_blank"> <strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;">Cocoa Got Blocks</span></span></strong></a>。虽然之前也有接触过block，不过没有深入完整的学习过，借此机会来学习一下，顺便翻译几篇block相关的文章，本文是第一篇，算是block的入门。本文的最后延伸阅读给出了4篇相关文章，不出意外的话，本周大家能看到对应的中文版。</p>

<!--more-->


<h2><strong><span style="color: #339966;">目录：</span></strong></h2>

<ul>
<li><strong><span style="color: #339966;">Block简介</span></strong></li>
<li><strong><span style="color: #339966;">Block的创建</span></strong></li>
<li><strong><span style="color: #339966;">不带参数的Block</span></strong></li>
<li><strong><span style="color: #339966;">Block的闭包性(closure)</span></strong></li>
<li><strong><span style="color: #339966;">修改非局部变量</span></strong></li>
<li><strong><span style="color: #339966;">Block作为函数的参数</span></strong></li>
<li><strong><span style="color: #339966;">定义Block类型</span></strong></li>
<li><strong><span style="color: #339966;">总结</span></strong></li>
<li><strong><span style="color: #339966;">延伸阅读</span></strong></li>
</ul>


<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">Block简介</span></strong></h2>

<p>我们可以把Block当做Objective-C的匿名函数。Block允许开发者在两个对象之间将任意的语句当做数据进行传递，往往这要比引用定义在别处的函数直观。另外，block的实现具有封闭性(closure)，而又能够很容易获取上下文的相关状态信息。</p>

<hr />

<h2><strong><span style="color: #339966;">Block的创建</span></strong></h2>

<p>实际上，block使用了与<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/functions.html" target="_blank"><span style="color: #339966; text-decoration: underline;">函数</span></a></span></strong></span>相同的机制：可以像声明函数一样，来声明一个bock变量；可以利用定义一个函数的方法来定义一个block；也可以将block当做一个函数来调用。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// main.m
#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // Declare the block variable
        double (^distanceFromRateAndTime)(double rate, double time);

        // Create and assign the block
        distanceFromRateAndTime = ^double(double rate, double time) {
            return rate * time;
        };
        // Call the block
        double dx = distanceFromRateAndTime(35, 1.5);

        NSLog(@"A car driving 35 mph will travel "
              @"%.2f miles in 1.5 hours.", dx);
    }
    return 0;
}</pre>


<p>在上面的代码中，利用插入符(^)将distanceFromRateAndTime变量标记为一个block。就像声明函数一样，需要包含返回值的类型，以及参数的类型，这样编译器才能安全的进行强制类型转换。插入符(^)跟指针(例如 int *aPointer)前面的星号(*)类似——只是在声明的时候需要使用，之后用法跟普通的变量一样。</p>

<p>block的定义本质上跟函数一样——只不过不需要函数名。block以签名字符串开始：<sup>double</sup>(double rate, double time)标示返回一个double，以及接收两个同样为double的参数(如果不需要返回值，可以忽略掉)。在签名后面是一个大括弧({})，在这个括弧里面可以编写任意的语句代码，这跟普通的函数一样。</p>

<p>当把block赋值给distanceFromRateAndTime后，我们就可以像调用函数一样调用这个变量了。</p>

<h2><strong><span style="color: #339966;">不带参数的Block</span></strong></h2>

<p>如果block不需要任何的参数，那么可以忽略掉参数列表。另外，在定义block的时候，返回值的类型也是可选的，所以这样情况下，block可以简写为^ { … }：</p>

<pre class="wp-code-highlight prettyprint linenums:1">double (^randomPercent)(void) = ^ {
    return (double)arc4random() / 4294967295;
};
NSLog(@"Gas tank is %.1f%% full",
      randomPercent() * 100);</pre>


<p>在上面的代码中，利用内置的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man3/arc4random.3.html" target="_blank"><span style="color: #339966; text-decoration: underline;">arc4random()</span></a></span></span></strong>方法返回一个32位的整型随机数——为了获得0-1之间的一个值，通过除以arc4random()方法能够获取到的最大值(4294967295)。</p>

<p>到现在为止，block看起来可能有点像利用一种复杂的方式来定义一个方法。事实上，block是被设计为闭包的(closure)——这就提供了一种新的、令人兴奋的编程方式。</p>

<h2><strong><span style="color: #339966;">Block的闭包性(closure)</span></strong></h2>

<p>在block内部，可以像普通函数一样访问数据：局部变量、传递给block的参数，全局变量/函数。并且由于block具有<span style="color: #ff0000;"><strong>闭包性</strong></span>，所以还能访问<strong><span style="color: #ff0000;">非局部变量(non-local variable)</span></strong>。非局部变量定义在block之外，但是在block内部有它的作用域。例如，getFullCarName可以使用定义在block前面的make变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString *make = @"Honda";
NSString *(^getFullCarName)(NSString *) = ^(NSString *model) {
    return [make stringByAppendingFormat:@" %@", model];
};
NSLog(@"%@", getFullCarName(@"Accord"));    // Honda Accord</pre>


<p>非局部变量会以const变量被拷贝并存储到block中，也就是说block对其是只读的。如果尝试在block内部给make变量赋值，会抛出编译器错误。</p>

<div id="attachment_1546" class="wp-caption alignnone" style="width: 340px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/07/const-non-local-variables.png"><img class="size-full wp-image-1546" alt="const-non-local-variables" src="http://beyondvincent.com/wp-content/uploads/2013/07/const-non-local-variables.png" width="330" height="170" /></a><p class="wp-caption-text">
    以const拷贝的方式访问非局部变量
  </p>
</div>


<p>&nbsp;</p>

<p>以const拷贝的方式访问非局部变量，意味着block实际上并不是真正的访问了非局部变量——只不过在block中创建了非局部变量的一个快照。当定义block时，无论非局部变量的值是什么，都将被冻结，并且block会一直使用这个值，即使在之后的代码中修改了非局部变量的值。下面通过代码来看看，在创建好block之后，修改make变量的值，会发生什么：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString *make = @"Honda";
NSString *(^getFullCarName)(NSString *) = ^(NSString *model) {
    return [make stringByAppendingFormat:@" %@", model];
};
NSLog(@"%@", getFullCarName(@"Accord"));    // Honda Accord

// Try changing the non-local variable (it won&#039;t change the block)
make = @"Porsche";
NSLog(@"%@", getFullCarName(@"911 Turbo")); // Honda 911 Turbo</pre>


<p>block的闭包性为block与上下文交互的时候带来极大的便利性，当block需要额外的数据时，可以避免使用参数——只需要简单的使用非局部变量即可。</p>

<h2><strong><span style="color: #339966;">修改非局部变量</span></strong></h2>

<p>冻结中的非局部变量是一个常量值，这也是一种默认的安全行为——因为这可以防止在block中的代码对非局部变量做了意外的修改。那么如果我们希望在block中对非局部变量值进行修改要如何做呢——用__block存储修饰符(storage modifier)来声明非局部变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block NSString *make = @"Honda";</pre>


<p>这将告诉block对非局部变量做引用处理，在block外部make变量和内部的make变量创建一个直接的链接(direct link)。现在就可以在block外部修改make，然后反应到block内部，反过来，也是一样。</p>

<div id="attachment_1547" class="wp-caption alignnone" style="width: 270px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/07/mutable-non-local-variables.png"><img class="size-full wp-image-1547" alt="mutable-non-local-variables" src="http://beyondvincent.com/wp-content/uploads/2013/07/mutable-non-local-variables.png" width="260" height="150" /></a><p class="wp-caption-text">
    通过引用的方式访问非局部变量
  </p>
</div>


<p>这跟普通函数中的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/functions.html#static-local-variables" target="_blank"><span style="color: #339966; text-decoration: underline;">静态局部变量(static local variable)</span></a></span></span></strong>类似，用__block修饰符声明的变量可以记录着block多次调用的结果。例如下面的代码创建了一个block，在block中对i进行累加。</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block int i = 0;
int (^count)(void) = ^ {
    i += 1;
    return i;
};
NSLog(@"%d", count());    // 1
NSLog(@"%d", count());    // 2
NSLog(@"%d", count());    // 3</pre>


<h2></h2>

<h2><strong><span style="color: #339966;">Block作为函数的参数</span></strong></h2>

<p>把block存储在变量中有时候非常有用，比如将其用作函数的参数。这可以解决类似函数指针能解决的问题，不过我们也可以定义内联的block，这样代码更加易读。<br/>
例如下面Car interface中声明了一个方法，该方法用来计算汽车的里程数。这里并没有强制要求调用者给该方法传递一个常量速度，相反可以改方法接收一个block——该block根据具体的时间来定义汽车的速度。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.h
#import &lt;Foundation/Foundation.h&gt;

@interface Car : NSObject

@property double odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(double (^)(double time))speedFunction
                   steps:(int)numSteps;

@end</pre>


<p>上面代码中block的数据类型是double (^)(double time)，也就是说block的调用者需要传递一个double类型的参数，并且该block的返回值为double类型。注意：上面代码中的语法基本与本文开头介绍的block变量声明相同，只不过没有变量名字。<br/>
在函数的实现里面可以通过speedFunction来调用block。下面的示例通过算法计算出汽车行驶的大约距离。其中steps参数是由调用者确定的一个准确值。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.m
#import "Car.h"

@implementation Car

@synthesize odometer = _odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(double (^)(double time))speedFunction
                   steps:(int)numSteps {
    double dt = duration / numSteps;
    for (int i=1; i&lt;=numSteps; i++) {
        _odometer += speedFunction(i*dt) * dt;
    }
}

@end</pre>


<p>在下面的代码中，有一个main函数，在main函数中block定义在另一个函数的调用过程中。虽然理解其中的语法需要话几秒钟时间，不过这比起另外声明一个函数，再定义withVariableSpeed参数要更加直观。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// main.m
#import &lt;Foundation/Foundation.h&gt;
#import "Car.h"

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        Car *theCar = [[Car alloc] init];

        // Drive for awhile with constant speed of 5.0 m/s
        [theCar driveForDuration:10.0
               withVariableSpeed:^(double time) {
                           return 5.0;
                       } steps:100];
        NSLog(@"The car has now driven %.2f meters", theCar.odometer);

        // Start accelerating at a rate of 1.0 m/s^2
        [theCar driveForDuration:10.0
               withVariableSpeed:^(double time) {
                           return time + 5.0;
                       } steps:100];
        NSLog(@"The car has now driven %.2f meters", theCar.odometer);
    }
    return 0;
}</pre>


<p>上面利用一个简单的示例演示了block的通用性。在iOS的SDK中有许多API都利用了block的其它一些功能。<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/NSArray.html" target="_blank"><span style="color: #339966; text-decoration: underline;">NSArray</span></a></span></span></strong>的sortedArrayUsingComparator:方法可以使用一个block对元素进行排序，而<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/uiview/uiview.html" target="_blank"><span style="color: #339966; text-decoration: underline;">UIView</span></a></span></span></strong>的animateWithDuration:animations:方法使用了一个block来定义动画的最终状态。此外，block在并发编程中具有强大的作用。</p>

<h2><strong><span style="color: #339966;">定义Block类型</span></strong></h2>

<p>由于block数据类型的语法会很快把函数的声明搞得难以阅读，所以经常使用typedef对block的签名(signature)做处理。例如，下面的代码创建了一个叫做SpeedFunction的新类型，这样我们就可以对withVariableSpeed参数使用一个更加有语义的数据类型。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.h
#import &lt;Foundation/Foundation.h&gt;

// Define a new type for the block
typedef double (^SpeedFunction)(double);

@interface Car : NSObject

@property double odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(SpeedFunction)speedFunction
                   steps:(int)numSteps;

@end</pre>


<p>许多标准的Objective-C框架也使用了这样的技巧，例如<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_DataTypes/Reference/reference.html#//apple_ref/doc/c_ref/NSComparator" target="_blank"><span style="color: #339966; text-decoration: underline;">NSComparator</span></a></span></span></strong>。</p>

<h2><strong><span style="color: #339966;">总结</span></strong></h2>

<p>Block不仅提供了C函数同样的功能，而且block看起来更加直观。block可以定义为内联(inline)，这样在函数内部调用的时候就非常方便，由于block具有闭包性(closure)，所以block可以很容易获得上下文信息，而又不会对这些数据产生负面影响。</p>

<h2><strong><span style="color: #339966;">延伸阅读</span></strong></h2>

<ul>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 1</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 2</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 3 (Block_copy)</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.xs-labs.com/en/archives/articles/objc-blocks/" target="_blank"><span style="color: #339966; text-decoration: underline;">Closure and anonymous functions in Objective-C</span></a></span></strong></span></li>
</ul>


<p>&nbsp;</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-08</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打造轻量化的View Controller]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/05/97/"/>
    <updated>2013-07-05T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/05/97</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/JC4Yc.png"><img class="alignnone size-full wp-image-1538" alt="JC4Yc" src="http://beyondvincent.com/wp-content/uploads/2013/07/JC4Yc.png" width="800" height="322" /></a></p>

<p>&nbsp;</p>

<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://www.objc.io/issue-1/lighter-view-controllers.html" target="_blank"><span style="color: #339966; text-decoration: underline;">objc</span></a></span></strong></span>转载请注明出处！</p>

<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>很早以前就看到了这篇文章，该文是<strong><span style="color: #339966;">Lighter View Controllers</span></strong>中比较重要的一篇，来自<strong><span style="color: #339966;"><a href="http://www.objc.io/%EF%BC%8C">http://www.objc.io/%EF%BC%8C</a></span></strong>该站点的目标是致力于介绍Objective-C中最佳的实践技能和高级技术，以期刊的形式发表，每期一个主题，第一期就是以Lighter View Controllers为主。共有5篇文章，由于老破船精力有限，可能不会全部翻译，感兴趣的读者可以前往官方站点，进行阅读，千万别苦等破船进港时，万一等到花谢草枯了，可不好哟。</p>

<p><strong><span style="color: #339966;">友情提醒</span></strong>：大家平常除了写代码，会有锻炼身体吗？明天就是周末了，记得少加班，多锻炼身体哟，这周我只打了一次篮球，运动量有点少了，计划明天早上去跑10公里。</p>

<h2><span style="color: #ff0000;"><strong>本文目录如下：</strong></span></h2>

<ul>
<li><strong><span style="color: #339966;">简介</span></strong></li>
<li><strong><span style="color: #339966;">剥离Data Source和其它Protocols</span></strong></li>
<li><strong><span style="color: #339966;">将业务逻辑移至Model Layer</span></strong></li>
<li><strong><span style="color: #339966;">创建Store类</span></strong></li>
<li><strong><span style="color: #339966;">将Web Service逻辑移至Model Layer</span></strong></li>
<li><strong><span style="color: #339966;">将View代码移至View Layer</span></strong></li>
<li><strong><span style="color: #339966;">与别的对象进行通讯</span></strong></li>
<li><strong><span style="color: #339966;">小结</span></strong></li>
<li><strong><span style="color: #339966;">延伸阅读</span></strong></li>
</ul>


<h2><strong><span style="color: #339966;">简介</span></strong></h2>

<p>在iOS工程中，view controllers经常是最大的文件，引起这样的主要原因是开发者在view controllers中编写了大量非必须代码，实际上，view controllers可以重用其中的许多代码。下面我们就来看看，有什么好的办法可以对view controllers进行瘦身，加强代码的可重用性(reusable)，并将代码放到适当的地方。<br/>
提醒：本文涉及到的<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="https://github.com/objcio/issue-1-lighter-view-controllers" target="_blank"><span style="color: #339966; text-decoration: underline;">示例工程</span></a></span></strong></span>已经放到GitHub上了。</p>

<h2><strong><span style="color: #339966;">剥离Data Source和其它Protocols</span></strong></h2>

<p>对view controllers瘦身最佳的方法之一就是将UITableViewDataSource涉及到的代码从view controllers中抽取出来，并封装到自己的一个类中。如果不止在一个view controllers中使用到UITableViewDataSource，那么会提高封装出来这个类的可重用性。<br/>
译者注：此处有一个前提条件原作者没有说明，我们需要注意一下——这里的view controllers是使用到了UITableView。</p>

<p>下面我们来看一个例子，在上面给出的示例工程中，有一个类PhotosViewController，里面原本有如下3个方法：</p>

<pre class="wp-code-highlight prettyprint linenums:1"># pragma mark Pragma

- (Photo*)photoAtIndexPath:(NSIndexPath*)indexPath {
return photos[(NSUInteger)indexPath.row];
}

- (NSInteger)tableView:(UITableView*)tableView
numberOfRowsInSection:(NSInteger)section {
return photos.count;
}

- (UITableViewCell*)tableView:(UITableView*)tableView
cellForRowAtIndexPath:(NSIndexPath*)indexPath {
PhotoCell* cell = [tableView dequeueReusableCellWithIdentifier:PhotoCellIdentifier
forIndexPath:indexPath];
Photo* photo = [self photoAtIndexPath:indexPath];
cell.label.text = photo.name;
return cell;
}</pre>


<p>上面3个方法中都涉及到了数组，并且在最后一个方法中利用索引(indexPatha)给UITableViewCell指定了相应的图片(view controllers管理着这些图片资源)。下面我们就来试着把与数组相关的代码封装到我们自己的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://github.com/objcio/issue-1-lighter-view-controllers/blob/master/PhotoData/ArrayDataSource.h" target="_blank"><span style="color: #339966; text-decoration: underline;">一个类</span></a></span></span></strong>中。<br/>
如下代码所示，这里通过一个block来配置UITableViewCell，当然，也可以使用delegate对UITableViewCell进行配置，这主要取决于开发者。</p>

<pre class="wp-code-highlight prettyprint linenums:1">@implementation ArrayDataSource

- (id)itemAtIndexPath:(NSIndexPath*)indexPath {
return items[(NSUInteger)indexPath.row];
}

- (NSInteger)tableView:(UITableView*)tableView
numberOfRowsInSection:(NSInteger)section {
return items.count;
}

- (UITableViewCell*)tableView:(UITableView*)tableView
cellForRowAtIndexPath:(NSIndexPath*)indexPath {
id cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier
forIndexPath:indexPath];
id item = [self itemAtIndexPath:indexPath];
configureCellBlock(cell,item);
return cell;
}

@end</pre>


<p>有了上面这个自定义的类，我们就可以把view controllers中的那3个方法移除掉，并创建自定义类的一个示例对象，然后将其设置为table view的data source，如下代码所示。</p>

<pre class="wp-code-highlight prettyprint linenums:1">void (^configureCell)(PhotoCell*, Photo*) = ^(PhotoCell* cell, Photo* photo) {
cell.label.text = photo.name;
};
photosArrayDataSource = [[ArrayDataSource alloc] initWithItems:photos
cellIdentifier:PhotoCellIdentifier
configureCellBlock:configureCell];
self.tableView.dataSource = photosArrayDataSource;</pre>


<p>现在，当每次希望将数组中的内容显示到table view中时，不必再考虑如何将index path映射到数组中的准确位置了，只需要重新上面的代码即可。另外，我们也可以在自定义类中，实现另外的一些方法(例如tableView:commitEditingStyle:forRowAtIndexPath:)，以共享给所有的table view controllers。</p>

<p>这也会带来一个好处：可以单独的对自定义的这个类进行测试，而不用担心要重新写一些测试代码。其实，如果我们写的代码跟这里的情况类似，那么也可以这样做。</p>

<p>今年我在工作中写的一个应用程序，大量使用了Core Data。我也创建了类似的类。该类实现了动画更新的所有逻辑，section header处理，以及相关删除操作等。你可以创建该类的一个示例，然后设置一下对其调用的方法，以及配置cell的一个block，剩下的任务就能自动处理了。</p>

<p>此外，上面介绍的这种方法可以延伸到别的protocols，这能够给程序开发中带来很大的灵活性。例如UICollectionViewDataSource，在开发过程中，如果希望用UICollectionView替换已有的UITableView，我们几乎不需要对view controllers做很大的改动，甚至还能使我们的data source同时支持两种protocols(UITableViewDataSource和UICollectionViewDataSource)。</p>

<h2><strong><span style="color: #339966;">将业务逻辑移至Model Layer</span></strong></h2>

<p>下面的示例代码(另外一个工程)位于view controller，作用是找出针对用户active priority的一个列表。</p>

<pre class="wp-code-highlight prettyprint linenums:1">- (void)loadPriorities {
NSDate* now = [NSDate date];
NSString* formatString = @"startDate &lt;= %@ AND endDate &gt;= %@";
NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];
NSSet* priorities = [self.user.priorities filteredSetUsingPredicate:predicate];
self.priorities = [priorities allObjects];
}</pre>


<p>实际上，如果把这个方法移至User类的一个category中，会让代码更加清晰。此时，在View Controller.m文件中看起来应该是这样的：</p>

<pre class="wp-code-highlight prettyprint linenums:1">- (void)loadPriorities {
self.priorities = [user currentPriorities];
}

而在User+Extensions.m中则如下代码：
- (NSArray*)currentPriorities {
NSDate* now = [NSDate date];
NSString* formatString = @"startDate &lt;= %@ AND endDate &gt;= %@";
NSPredicate* predicate = [NSPredicate predicateWithFormat:formatString, now, now];
return [[self.priorities filteredSetUsingPredicate:predicate] allObjects];
}</pre>


<p>实际开发中，有一些代码很难将其移至model对象中，但是，很明显这些代码与model是相关的，针对这样的情况，我们可以单独为其写一个类，例如下面的store类。</p>

<h2><strong><span style="color: #339966;">创建Store类</span></strong></h2>

<p>本文给出示例工程的第一版代码中，有一部分代码是用来从文件中加载数据，并对其进行解析的，这些代码是在view controller中：</p>

<pre class="wp-code-highlight prettyprint linenums:1">- (void)readArchive {
NSBundle* bundle = [NSBundle bundleForClass:[self class]];
NSURL *archiveURL = [bundle URLForResource:@"photodata"
withExtension:@"bin"];
NSAssert(archiveURL != nil, @"Unable to find archive in bundle.");
NSData *data = [NSData dataWithContentsOfURL:archiveURL
options:0
error:NULL];
NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:data];
_users = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@"users"];
_photos = [unarchiver decodeObjectOfClass:[NSArray class] forKey:@"photos"];
[unarchiver finishDecoding];
}</pre>


<p>实际上，view controller不应该关心这些事情的。在示例工程中，我创建了一个Store类来做这些事情——通过将这些代码从view controller中剥离出来，不仅可以对其重用和单独测试，另外还能对view controller瘦身。Store类专注于数据的加载、缓存，以及对数据库进行配置。这里的Store也经常叫做service layer或者repository。</p>

<h2><strong><span style="color: #339966;">将Web Service逻辑移至Model Layer</span></strong></h2>

<p>这里的方法实际上跟上面介绍的非常类似：不要在view controller中做web service逻辑处理，而是将相关的逻辑处理封装到不同的类中。然后我们的view controller通过callback handler(例如一个completion block)来调用这些类的方法。<br/>
这样做带来的一个好处就是我们可以方便在这些封装类中做缓存和错误处理。</p>

<h2><strong><span style="color: #339966;">将View代码移至View Layer</span></strong></h2>

<p>切记不要在view controller中构建复杂的view结构。可选方案是：要么利用interface builder，或者就是将view的构建封装到一个UIView子类中。例如，如果你要构建一个date picker控件，可以基于DatePickerView类来构建，而不要把所有构建逻辑都放入view controller中。这样不仅能增加控件的可重用性，还能让代码简单化。<br/>
如果你喜欢用interface builder，那么也同样可以在interface builder中做这些事情。我们的一些开发者可能认为只有view controller才能在interface builder中使用，其实我们可以通过加载一个单独的nib文件，来加载我们在nib文件中定制的view。在本文给出的示例工程中，我创建了一个PhotoCell.xib文件，该文件中定制了一个photo cell：</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/07/photocell.png"><img class="alignnone size-full wp-image-1539" alt="photocell" src="http://beyondvincent.com/wp-content/uploads/2013/07/photocell.png" width="1168" height="838" /></a></p>

<p>如上图所示，我在这个view中创建了两个属性：photoDateLable和photoTitleLable(注意：在这里的xib文件中没有使用File&#8217;s Owner object)，并将这两个属性连接到制定的subview中。<br/>
上面介绍的技巧同样可以方便的用于别的一些custom view。</p>

<h2><strong><span style="color: #339966;">与别的对象进行通讯</span></strong></h2>

<p>在view controller中与别的view controller、model和view通讯是非常频繁的。虽然这确实是由controller负责的，不过，我们还是希望用最少的代码来完成相关的事情。<br/>
目前已经有许多技术可以用于view controller和model对象之间的通讯(例如KVO)，不过view controller之间通讯的技术貌似不太明朗。<br/>
我们可能会经常遇到这样的问题：一个view controller有许多状态需要与其它多个view controller进行勾兑。通常，需要把这些状态封装到一个单独的对象中，然后将其传送到对应的view controller中，在这些view controller中对这些状态进行观察并修改即可——这样带来的优点是所有的状态都在一个地方，开发者不用纠结于delegate的callback。<br/>
实际上，关于对象间的通讯是一个复杂的topic，在今后的文章中，我们可能会对其进行深度分析。<span style="color: #339966;"><br /> </span></p>

<h2><strong><span style="color: #339966;">小结</span></strong></h2>

<p>上面我们学习了一些对view controller瘦身的技巧。这些技巧并不强求用与所有的地方，其实只有一个目标：编写可维护的代码。大家通过了解这些方法，可以知道有更多的方法来应对复杂的view controller，让其看起来更加清晰。</p>

<h2><strong><span style="color: #339966;">延伸阅读</span></strong></h2>

<ul>
<li><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/BasicViewControllers/BasicViewControllers.html"><span style="color: #339966; text-decoration: underline;">View Controller Programming Guide for iOS</span></a></span></span></li>
<li><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html"><span style="color: #339966; text-decoration: underline;">Cocoa Core Competencies: Controller Object</span></a></span></span></li>
<li><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://subjective-objective-c.blogspot.de/2011/08/writing-high-quality-view-controller.html"><span style="color: #339966; text-decoration: underline;">Writing high quality view controllers</span></a></span></span></li>
<li><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://programmers.stackexchange.com/questions/184396/mvcs-model-view-controller-store"><span style="color: #339966; text-decoration: underline;">Stack Overflow: Model View Controller Store</span></a></span></span></li>
<li><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://speakerdeck.com/trianglecocoa/unburdened-viewcontrollers-by-jay-thrash"><span style="color: #339966; text-decoration: underline;">Unburdened View Controllers</span></a></span></span></li>
<li><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="http://programmers.stackexchange.com/questions/177668/how-to-avoid-big-and-clumsy-uitableviewcontroller-on-ios"><span style="color: #339966; text-decoration: underline;">Stack Overflow: How to avoid big and clumsy UITableViewControllers on iOS</span></a></span></span></li>
</ul>


<p>&nbsp;</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-05</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 8开发31日]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/03/96/"/>
    <updated>2013-07-03T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/03/96</id>
    <content type="html"><![CDATA[<h1>关于Windows 8开发31日翻译</h1>

<p>Windows 8 开发31日(31 Days of Windows 8)是由Jeff Blankenburg和Clark Sell原创的。</p>

<p>官方站点：<a href="http://31daysofwindows8.com/">http://31daysofwindows8.com/</a></p>

<p>涉及到两个版本： XAML/C#（由Jeff Blankenburg撰写） HTML5/JS （由Clark Sell撰写）</p>

<p>其中涉及到的资源和相关代码请到这里下载： <a href="https://github.com/csell5/31DaysOfWindows8">https://github.com/csell5/31DaysOfWindows8</a></p>

<p>在这里，由于破船对HTML5/JS不熟悉，所以只翻译XAML/C#相关主题。建议大家前往看原创内容，如果看不明白，再来这里看我翻译的相关内容。如果翻译不正确的地方，可以通过下面的联系方式告诉破船。</p>

<p>&nbsp;</p>

<h1>译文下载地址：<span style="text-decoration: underline;"><strong><span style="color: #ff0000; text-decoration: underline;"><a href="https://github.com/BeyondVincent/31-Days-of-Windows-8" target="_blank"><span style="color: #ff0000; text-decoration: underline;">第二版</span></a><span style="font-size: 13px;"><br /> </span></span></strong></span></h1>

<h1><span style="font-size: 13px;">2012年曾在</span><a style="font-size: 13px;" href="http://www.devdiv.com/forum.php"><a href="http://www.devdiv.com/forum.php">http://www.devdiv.com/forum.php</a></a><span style="font-size: 13px;"> 社区发布过第一版。根据读者的反馈，对第一版中的内容做了一些更新修正。</span></h1>

<h1>联系破船</h1>

<p>你可以发邮件与破船取得联系: <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x42;&#x65;&#x79;&#x6f;&#x6e;&#100;&#86;&#x69;&#x6e;&#x63;&#x65;&#110;&#x74;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#66;&#101;&#121;&#111;&#x6e;&#100;&#x56;&#105;&#110;&#99;&#101;&#x6e;&#x74;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></p>

<p>还可以关注破船的微博: 新浪微博:<a href="http://www.weibo.com/beyondvincent">www.weibo.com/beyondvincent</a></p>

<p>这里是破船的个人博客，欢迎光临：<a href="http://beyondvincent.com/">http://beyondvincent.com/</a></p>

<p>破船祝你阅读愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7新特征汇总[06]What&#8217;s New in Cocoa Touch学习笔记]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/07/03/95/"/>
    <updated>2013-07-03T00:00:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/07/03/95</id>
    <content type="html"><![CDATA[<p>提醒：这里是新特征汇总博文链接：<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/2013/06/11/ios7%E6%96%B0%E7%89%B9%E5%BE%81%E6%B1%87%E6%80%BB/" target="_blank"><span style="color: #339966; text-decoration: underline;">iOS7新特征汇总</span></a></strong></span></span></p>

<p>今晚看了一下WWDC2013的session：<strong><span style="color: #ff0000;">What&#8217;s New in Cocoa Touch</span></strong></p>

<p>该session介绍了iOS 7中Cocoa Touch里面新增的许多内容。</p>

<p>下面是一些学习笔记，供大家参考一下（<strong><span style="color: #339966;">由于是边看边记录，如有文字录入错误，还请见谅</span></strong>）：</p>

<h2><strong><span style="color: #339966;">1、Multitasking</span></strong></h2>

<p><span style="color: #339966;">Background fetching</span><br/>
you must call this at launch<br/>
<span style="color: #339966;">Remote notification</span><br/>
Method: didReceiveRemoteNotification<br/>
call the completion handler when fetch is complete<br/>
<span style="color: #339966;">Background transfers</span><br/>
Method: handleEventsForBackgroundURLSession<br/>
NSURLSession replace API for NSURLConnection<br/>
Data upload download task<br/>
session have identifiers</p>

<h2><strong><span style="color: #339966;">2、view and image</span></strong></h2>

<p><span style="color: #339966;"> Image Rendering Modes</span><br/>
Creating image with redering mode<br/>
method: imageWithRenderingMode:<br/>
param: UIImageRenderingMode<br/>
<span style="color: #339966;">Tint</span><br/>
New UIView property<br/>
@property (nonatomic, retain) UIColor *tintColor;<br/>
Dimming adjustment behavior<br/>
@property (nonatomic) UIViewTintAdjustmentMode tintAdjustmentMode;<br/>
Finding out about changes<br/>
&ndash;(void) intColorDidChange;<br/>
<span style="color: #339966;">View Animation</span><br/>
No animations!<br/>
+(void)performWithoutAnimation:<br/>
Keyframes<br/>
+(void)animationKeyframesWithDuration<br/>
+(void)addKeyframeWithRelativeStartTime:<br/>
UIViewKeyframeAnimationOptions</p>

<h2><strong><span style="color: #339966;">3、Motion Effects</span></strong></h2>

<p>Applies relative values to key paths of a target view<br/>
Affected by device &#8220;pose&#8221; or position<br/>
Affects animatable properties only</p>

<p>class: UIInterpolatingMotionEffect<br/>
initialization——initWithKeyPath:<br/>
UIMotionEffect<br/>
abstract superclass<br/>
one method<br/>
keyPathsAndRelativeValuesForViewerOffset:<br/>
UIOffset: CGFloat horizontal, vertical;<br/>
<span style="color: #339966;">UIView</span><br/>
adding and removing motion effects<br/>
addMotionEffect:<br/>
removeMotionEffect:<br/>
@property (copy, nonatomic) NSArray *motionEffects;</p>

<h2><strong><span style="color: #339966;">4、Collection Views</span></strong></h2>

<p><span style="color: #339966;"> Transitions between layouts</span><br/>
method: setCollectionViewLayout: animated: completion<br/>
<span style="color: #339966;">UICollectionViewTransitionLayout</span></p>

<h2><strong><span style="color: #339966;">5、View Controllers</span></strong></h2>

<p><span style="color: #339966;"> Layout</span><br/>
wantsFullScreenLayout<br/>
deprecated in iOS 7.0<br/>
extended edges<br/>
content size<br/>
@property (nonatomic) CGSize preferredContentSize;<br/>
status bar appearance<br/>
new behavior for the status bar<br/>
new status bar style<br/>
UIStatusBarStyleDefault<br/>
UIStatusBarStyleLightContent (new)<br/>
// UIStatusBarStyleBlackTranslucent<br/>
// UIStatusBarStyleBlackOpaque</p>

<h2><strong><span style="color: #339966;">6、Custom Transitions</span></strong></h2>

<p>bounded &#8220;canned&#8221; transition<br/>
interactive, user-driven transition<br/>
new delegate method on UIViewController<br/>
UIViewControllerTransitioningDelegate<br/>
UIViewControllerAnimatedTransitioning<br/>
UIViewControllerInteractiveTransitioning<br/>
UIViewControllerContextTransitioning<br/>
ref: WWDC2013 Custom Transitions Using View Controllers</p>

<h2><strong><span style="color: #339966;">7、State Restoration</span></strong></h2>

<p><span style="color: #339966;"> Ignoring Snapshots</span><br/>
&ndash;(void)ignoreSnapshotOnNextApplicationLaunch;<br/>
<span style="color: #339966;">Other Objects</span><br/>
Non-view and non-view controller can now participate<br/>
method: registerObjectForStateRestoration:<br/>
<span style="color: #339966;">Bluetooth State Restoration</span></p>

<h2><strong><span style="color: #339966;">8、AirDrop</span></strong></h2>

<p>Adopt <span style="color: #339966;">UIActivityItemSourceProtocol</span><br/>
Update application&#8217;s info.plist to create, register, and export UTI for custom document formats<br/>
New Documents/Inbox directory</p>

<p><strong style="font-size: 1.5em;"><span style="color: #339966;">9、Dynamics</span></strong></p>

<p><span style="color: #339966;"><span style="color: #333333;">Fluid, responsive animations</span></span></p>

<p>Enhances the interactions in you application<br/>
Concentration on behaviors</p>

<p>class: UIDynamicAnimator<br/>
UIDynamicBehavior<br/>
UIDynamicItem</p>

<p><span style="color: #339966;">supported behaviors</span><br/>
UIAttachmentBehavior<br/>
UICollisionBehavior<br/>
UIGravityBehavior<br/>
UIPushBehavior<br/>
UISnapBehavior<br/>
UDynamicItemBehavior</p>

<h2><strong><span style="color: #339966;">10、Text</span></strong></h2>

<p><span style="color: #339966;"> Dynamic type sizing</span><br/>
@property(nonatomic, readonly) NSString * preferredContentSizeCategory;<br/>
<span style="color: #339966;">UIFont</span><br/>
Font scaling based on content size category<br/>
preferredFontForTextStyle:<br/>
<span style="color: #339966;">Text Kit</span><br/>
Objective-C API<br/>
class: NSTextStorage<br/>
NSLayoutManager<br/>
NSTextContainer<br/>
UITextView UITextField UILable<br/>
additional class<br/>
NSTextAttachment</p>

<h2><strong><span style="color: #339966;">11、More New Feathures</span></strong></h2>

<p><span style="color: #339966;"> Multipeer Connectivity</span><br/>
Local network discovery<br/>
seesion management<br/>
encryptyed sessions<br/>
file transfers<br/>
<span style="color: #339966;">SpriteKit</span><br/>
iOS 、OS X<br/>
High-performance sprite-based game framework<br/>
image atlas support<br/>
UIKit and AppKit integration<br/>
<span style="color: #339966;">Game Controller</span><br/>
Buttons<br/>
Analog joysticks<br/>
Multiple controllers<br/>
<span style="color: #339966;">MapKit</span><br/>
Directions<br/>
3D cameras<br/>
Map tile overlays<br/>
Map snapshots<br/>
Geodesic polylines</p>

<p><span style="color: #339966;">CoreLocation</span><br/>
Bluetooth LE beacons<br/>
advertising<br/>
ranging<br/>
New region types<br/>
Region monitoring<br/>
<span style="color: #339966;">Accessibility</span><br/>
Guided Access API<br/>
<span style="color: #339966;">GameCenter</span><br/>
new turn-based game API<br/>
turns tabs<br/>
mode for bidding<br/>
leader board improvements<br/>
system integrity features</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>原创●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-03</time></p>
]]></content>
  </entry>
  
</feed>
