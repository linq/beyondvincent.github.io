<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS翻译 | 破船之家]]></title>
  <link href="http://BeyondVincent.github.io/blog/categories/iosfan-yi/atom.xml" rel="self"/>
  <link href="http://BeyondVincent.github.io/"/>
  <updated>2013-10-27T20:38:37+08:00</updated>
  <id>http://BeyondVincent.github.io/</id>
  <author>
    <name><![CDATA[破船(BeyondVincent)]]></name>
    <email><![CDATA[beyondvincent@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sprite Kit教程：制作一个通用程序 1]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/10/27/118-sprite-kit-tutorial-making-a-universal-app-part-1/"/>
    <updated>2013-10-27T20:30:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/10/27/118-sprite-kit-tutorial-making-a-universal-app-part-1</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/10/24.png"></p>

<!--more-->


<p>注：本文译自<a href="http://www.raywenderlich.com/49695/sprite-kit-tutorial-making-a-universal-app-part-1"><code>Sprite Kit Tutorial: Making a Universal App: Part 1</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li><a href="#msgs">UI规划：概述</a></li>
<li><a href="#msxj">UI规划：小结</a></li>
<li><a href="#ks">开始</a></li>
<li><a href="#wltj">纹理图集</a></li>
<li><a href="#bjsb">背景设置</a></li>
<li><a href="#asfz">鼹鼠的放置</a></li>
<li><a href="#tcas">弹出鼹鼠</a></li>
<li><a href="#hqhc">何去何从</a></li>
</ul>


<p>本文将介绍如何制作一个通用程序(打鼹鼠的游戏)——可以在iPhone和iPad上运行(包括retina显示的支持。)</p>

<p>学习本文之前，需要掌握以下知识：</p>

<p><a href="http://beyondvincent.com/blog/2013/10/12/114-spritekit-tutorial-for-beginners-3/"><code>Sprite Kit教程：初学者 1</code></a>
<a href="http://beyondvincent.com/blog/2013/09/29/113-spritekit-tutorial-for-beginners-2/"><code>Sprite Kit教程：初学者 2</code></a>
<a href="http://beyondvincent.com/blog/2013/09/26/113-spritekit-tutorial-for-beginners-1/"><code>Sprite Kit教程：初学者 3</code></a></p>

<p>英文原文在这里：<a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners"><code>Sprite Kit Tutorial for Beginners</code></a></p>

<p><a href="http://beyondvincent.com/blog/2013/10/16/115-spritekit-tutorial-animations-and-texture-atlases-1/"><code>Sprite Kit教程：动画和纹理图集 1</code></a>
<a href="http://beyondvincent.com/blog/2013/10/16/116-spritekit-tutorial-animations-and-texture-atlases-2/"><code>Sprite Kit教程：动画和纹理图集 2</code></a></p>

<p>英文原文在这里：<a href="http://www.raywenderlich.com/45152/sprite-kit-tutorial-animations-and-texture-atlases"><code>Sprite Kit Tutorial: Animations and Texture Atlases</code></a></p>

<p><a href="http://beyondvincent.com/blog/2013/10/20/117-spritekit-tutorial-how-to-drag-and-drop-sprites/"><code>Sprite Kit教程：如何拖放Sprites</code></a></p>

<p>英文原文在这里：<a href="http://www.raywenderlich.com/44270/sprite-kit-tutorial-how-to-drag-and-drop-sprites"><code>Sprite Kit Tutorial: How To Drag and Drop Sprites</code></a></p>

<p>如果还没有看上面的这些文章(或者相关的知识)，建议你先去看一下。</p>

<p>本文会有两篇文章。第一篇，会先创建一个基本的游戏——可爱的小鼹鼠聪洞里面弹出来。为了让游戏在iPhone和iPad(支持retina显示)上看起来很优美，本文还花了大量的时间来考虑如何做游戏的美术规划和坐标。</p>

<h3><a id="msgs"></a>UI规划：概述</h3>

<p>我们希望程序可以在iPhone 3.5英寸，4英寸(iPhone 5)和iPad上良好的运行，所以在开始之前，我们需要认真的做好UI规划。</p>

<p>为了搞明白需要什么样的UI尺寸，我们先来看看下面的相关内容：</p>

<ul>
<li>Retina显示</li>
<li>4英寸iPhone显示</li>
<li>iPad和iPhone长宽比</li>
</ul>


<p>下面开始吧！</p>

<h4><code>Retina显示</code></h4>

<p>在iPhone中，non-retina和retina在显示上的最大区别就是retina的分辨率是non-retina的2倍。所以在non-retina上面分辨率为 480 * 320(landscape)，而retina则是960 * 640.</p>

<p><img src="/images/2013/10/26.jpg" alt="" /></p>

<p>同样iPad也分为non-retina和retina，它们的分辨率相差也为2倍，non-retina显示的分辨率是1024 * 768像素，而retina上面则是2048 * 1536像素！</p>

<p><img src="/images/2013/10/27.jpg" alt="" /></p>

<p>稍等，你可能在想：双倍分辨率岂不是打乱了所有已经写好的程序，例如iPhone上的480 * 320和iPad的1024 * 768？这是有可能的，除非是在Sprite Kit中设置尺寸或者坐标，此时实际上是在UIKit中进行设置，并且设置的尺寸单位叫做<code>points</code>，而不是像素(pixels)。</p>

<p>在non-retina显示上，无论是iPhone火iPad，一个point代表一个pixel，而在retina上面，一个point代表2个pixels。所以将位置设置为(10,10)point时，non-retina上将是(10,10)，而retina上则是(20,20)，所以它们依然会显示在相同的偏移量上。不错吧！</p>

<p>当使用苹果提供的控件或者Core Graphics时，苹果已经写好了相关代码，让它们在retina显示起来很好看。</p>

<p>唯一需要注意的就是关于使用的图片。比如在iPhone或iPad程序中又一个200 * 200d 图片。如果什么事情都不做的话，在retina上面会自动的将这个图片放大两倍——这看起来不是太好，因为我们并没有提供相关分辨率的图片。</p>

<p><img src="/images/2013/10/28.jpg" alt="" /></p>

<p>因此针对retina显示我们需要提供所有图片的另外一个版本，也就是说需要一个普通的版本，以及另外2倍分辨率的一个版本。如果将2倍分辨率图片命名为"@2x"后缀，那么当利用[SKSpriteNode spriteNodeWithImageNamed:&hellip;]或者类似的APIs加载sprite时，它会自动的将@2x图片加载到retina显示上。</p>

<p>所以在开发针对retina显示的Sprite Kit游戏时也很简单——只需要添加@2x的图片，基本上就搞定了。</p>

<h4><code>4英寸iPhone显示</code></h4>

<p>iPhone 5设备在屏幕上显示的分辨率比以前的更大了，对于游戏显示上来说，这非常的好。本文中的处理很简单，只需要将背景图片做一个扩展延伸即可。</p>

<p>iPhone 5的分辨率是1136 * 640——宽高比为16:9。用point来衡量的话则是568 * 320.</p>

<h3><code>iPad和iPhone的宽高比</code></h3>

<p>上面我们已经看到要处理retina显示很容易，但是要想创建一个通用的程序呢(可以运行在iPhone和iPad设备上)。</p>

<p>其实要想创建一个通用的程序还真有一个麻烦的事情——iPhone和iPad的宽高比不一样！</p>

<p>iPhone的比例是1.5(480 * 320 或960 * 640)，而iPad是1.33(768 * 1024或1536 * 2048)。</p>

<p>由于比例不同，如果一副能够在non-retina iPad(768×1024)上完整显示，你希望将其在iPhone上重用，那么不会完整的匹配上，如果将其缩放，按照宽度进行适配(乘以0.9375)，会得到720×960的尺寸，这样就会把高度剪切掉一部分。</p>

<p><img src="/images/2013/10/29.jpg" alt="" /></p>

<p>发生这种情况会让人比较烦恼，我们不仅需要处理背景图片的问题，不同的宽高比导致不同设备间使用相同的坐标比较困难。</p>

<p>下面是我了解到的一些对应的处理方法：</p>

<ul>
<li>在3.5英寸的iPhone retina显示屏幕正中间确定一个<code>可玩区域</code>。这样剩下的区域可以用一个背景图片来覆盖，不要让玩家关注这一剩下的区域。这样一来在不同设备间进行左边的转换和重用要非常方便。本文将利用这种方法。</li>
<li>让iPad显示内容的宽高比设置为跟iPhone一样：左右留出32points的边距，上下留出64point的边距，此时在正中间的区域就是1024×768 points。这样只要让游戏程序的内容显示在这1024×768的范围内，就可以在每个设备间对图片进行缩放了。</li>
<li>由于pixel和point是有区别的。那么我们就创建出iPad retina显示的图片(536×2048 px)，然后将该图片除以2，这样也就可以用于non-retina iPad显示了！</li>
</ul>


<h3><code>iOS 模拟器选项</code></h3>

<p>下面这些模拟器可以运行iOS 7：</p>

<ul>
<li>iPhone Retina (3.5-inch) – iPhone 4 和 4S</li>
<li>iPhone Retina (4-inch) – iPhone 5, 5C, 和 5S</li>
<li>iPad – iPad 1, 2, 和 Mini</li>
<li>iPad Retina – iPad 3 和 4</li>
</ul>


<p>注意：这里并没有non-retina iPhone——因为没有任何一台no-retina iPhone或iPod touch可以运行iOS 7。</p>

<p>另外由于Sprite Kit是在iOS 7中才引入的，所以就不用考虑no-retina iPhone或iPod touch设备了。</p>

<h3><a id="msxj"></a>UI规划：小结</h3>

<p>基于上面的一些讨论，下面是本文的相关计划：</p>

<ul>
<li>UI设计的范围(可玩区域)在960×640范围内，在retina iPhone(3.5英寸)中全屏显示，4英寸iPhone，iPad和retina iPad中居中显示。</li>
<li>可用的UI元素放置在纹理图集文件中。@2x表示用于iPad retina显示的图片。</li>
<li>由于需要全屏显示，所以背景图片是一个特例。创建一个1024x768 point尺寸的图片，这样可以完全显示在iPad中。并且这个图片可以缩放显示在3.5英寸的iPhone上，只不过背景图中的有些内容不能显示出来，但是这关系并不太大。</li>
<li>4英寸的iPhone将通过代码来使用<code>-568</code>的纹理图集，并将其<code>可玩区域</code>居中。</li>
<li>iPad和iPad retina通过代码使用<code>-ipad</code>的纹理图集，并将其坐标转换到<code>可玩区域</code>中，另外在使用适当的字体大小等。</li>
</ul>


<p>来这里可以下载到本文的<a href="http://cdn4.raywenderlich.com/downloads/WhackAMoleSKArt.zip">UI资源</a>。解压出下载到的文件，可以看到如下一些内容：</p>

<ul>
<li>在TextureAtlases中又3个文件夹。每个文件夹中的UI元素针对不同的显示(3.5英寸iPhone, 4英寸iPhone, 和 iPad)。</li>
<li>iPad纹理图集文件夹中包含的图片是针对non-retina和retina iPad的。</li>
<li>在foreground文件夹中，有两个前景图片(下部和上部的图片)。被分为了两部分，这样可以将鼹鼠放置在下部和上部，看起来鼹鼠就像到地下了一样。</li>
<li>4英寸的iPhone是另外一个特列。因此在这里另外构建了新的前景图，以利用上更多的空间。</li>
<li>在background文件夹中，虽然iPad的宽高比是1.33，但这里做的背景图宽高比为一半,这样做是因为背景图片基本上可以忽略不计（只是3个鼹鼠洞）。所以不值得在这上面耗费，因为只需要用小纹理的图片替代即可，在需要放大的时候放大一下。</li>
<li>在sprite文件夹中，所有的sprite尺寸都适合显示在960×640大小的可玩区域中。注意，这里有一个鼹鼠和两个相关动画(鼹鼠笑和被打)。</li>
</ul>


<p>上面搞了这么多，现在终于可以开始了！</p>

<h3><a id="ks"></a>开始</h3>

<p>打开Xcode，选择File > New > Project…，然后选中Sprite Kit Game并单击Next。将工程命名为WhackAMole，devices选中universal，接着再单击Next。选择一个路径来保存工程，然后单击Create。</p>

<p>当工程打开之后，应该能看到Project Navigator中的工程文件已经被选中了，如果没有选中，那么将其选中，然后在target中选中WhackAModle，以及选中顶部的General，在Deployment info里面可以看到一些设备朝向的勾选框。在这里我们的游戏是landscape的，所以勾选上iPhone和iPad的Landscape Left和Landscape Right。</p>

<p><img src="/images/2013/10/30.png" alt="" /></p>

<p>另外，为了让朝向正确，还需要对代码做一些修改。打开ViewController.m文件并用下面的viewWillLayoutSubviews:方法替换viewDidLoad方法：</p>

<p>```objc
&ndash; (void)viewWillLayoutSubviews
{</p>

<pre><code>[super viewWillLayoutSubviews];

// Configure the view.
SKView * skView = (SKView *)self.view;
if (!skView.scene) {
    skView.showsFPS = YES;
    skView.showsNodeCount = YES;

    // Create and configure the scene.
    SKScene * scene = [MyScene sceneWithSize:skView.bounds.size];
    scene.scaleMode = SKSceneScaleModeAspectFill;

    // Present the scene.
    [skView presentScene:scene];
}
</code></pre>

<p>}
```</p>

<p>为什么要这样做呢？默认情况下View Controller views是以竖直的方式加载，所以横屏模式下，当viewDidLoad被调用的时候不能保证尺寸是正确的，不过当viewWillLayoutSubviews被调用的时候view的size将是正确的。如上代码所示，大多数代码与viewdidLoad中的相同。需要关注的就是if语句中关于skView.scene的配置。当然在这里需要判断一下skView.scene是否已经存在(viewWillLayoutSubviews方法可能会被多次调用)。</p>

<h3><a id="wltj"></a>纹理图集</h3>

<p>纹理图集的配置非常简单。首选创建一个文件夹并且文件名已<code>.atlas</code>结尾。接着将那些UI元素拷贝到这个文件夹里面。然后在Xcode工程中添加这个文件夹即可！</p>

<p>简单吧！当在编译程序的时候，Xcode会把<code>.atlas</code>结尾的文件夹中的图片生成纹理图集。</p>

<p>注意：添加到<code>.atlas</code>文件夹中的图片尺寸不能超过2048×2048 pixels，否则会出错——2048×2048 pixels是自动生成纹理图集的最大尺寸。</p>

<p>下面看看具体如何做。找到之前下载的压缩文件，在压缩文件中有一个名为TextureAtlases的文件夹。这个文件夹中包含了3中设备类型的UI元素(iPad, iPhone, 和 WidescreeniPhone)。这些文件家中都包含有<code>.atlas</code>文件夹。我们将TextureAtlases文件夹拖至工程中，确保勾选上<code>Copy items into destination group’s folder (if needed)</code>。</p>

<p><img src="/images/2013/10/31.png" alt="" /></p>

<p>本文中为了让一切变得简单点，我们为每种类型的设备准备了一套纹理图集(iPhone 3.5-inch, iPhone 4-inch 和 iPads)。在iPhone 4英寸中可以重用iPhone3.5英寸中的一些纹理图集，</p>

<h3><a id="bjsb"></a>背景设置</h3>

<p>在开始修改scene中显示内容之前，我们需要添加一个宏以及一个helper方法。打开MyScene.m文件，并在文件的头部添加如下一行代码(在#import下面)：</p>

<p>```objc</p>

<h1>define IS_WIDESCREEN ( fabs( ( double )[ [ UIScreen mainScreen ] bounds ].size.height &ndash; ( double )568 ) &lt; DBL_EPSILON )</h1>

<p>```</p>

<p>上面这个宏可以判断程序是否允许在4英寸的屏幕中，该宏将被用在helper方法中，如果要了解上面宏的详细内容，<a href="http://stackoverflow.com/questions/12446990/how-to-detect-iphone-5-widescreen-devices">看这里</a>。</p>

<p>接着添加一个helper方法——为运行程序的设备获取正确的SKTextureAtla。这个方法接收一个文件名，并在文件名尾部添加一个正确的标示符，然后返回正确的一个SKTextureAtla。</p>

<p>```objc
&ndash; (SKTextureAtlas <em>)textureAtlasNamed:(NSString </em>)fileName
{</p>

<pre><code>if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {

    if (IS_WIDESCREEN) {
        // iPhone Retina 4-inch
        fileName = [NSString stringWithFormat:@"%@-568", fileName];
    } else {
        // iPhone Retina 3.5-inch
        fileName = fileName;
    }

} else {
    fileName = [NSString stringWithFormat:@"%@-ipad", fileName];
}

SKTextureAtlas *textureAtlas = [SKTextureAtlas atlasNamed:fileName];

return textureAtlas;
</code></pre>

<p>}
```</p>

<p>上面的代码做了些什么？</p>

<ul>
<li>首选判断设备是否为一台iPhone。</li>
<li>如果是一台iPhone，然后利用之前定义的IS_WIDESCREEN宏判断是否为4英寸显示屏。如果是的话，就在文件名尾部添加<code>-568</code>。</li>
<li>如果设备是iPad或iPad retina，那么在文件尾部添加<code>-ipad</code>。</li>
<li>根据文件名创建并返回一个新的SKTextureAtlas。</li>
</ul>


<p>接着找到initWithSize:方法。移除掉设置背景颜色和创建Hell World lable的6行代码，然后用下面的代码替换之：</p>

<p>```objc
// Add background
SKTextureAtlas <em>backgroundAtlas = [self textureAtlasNamed:@&ldquo;background&rdquo;];
SKSpriteNode </em>dirt = [SKSpriteNode spriteNodeWithTexture:[backgroundAtlas textureNamed:@&ldquo;bg_dirt&rdquo;]];
dirt.scale = 2.0;
dirt.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame));
dirt.zPosition = 0;
[self addChild:dirt];</p>

<p>// Add foreground
SKTextureAtlas <em>foregroundAtlas = [self textureAtlasNamed:@&ldquo;foreground&rdquo;];
SKSpriteNode </em>upper = [SKSpriteNode spriteNodeWithTexture:[foregroundAtlas textureNamed:@&ldquo;grass_upper&rdquo;]];
upper.anchorPoint = CGPointMake(0.5, 0.0);
upper.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame));
upper.zPosition = 1;
[self addChild:upper];</p>

<p>SKSpriteNode *lower = [SKSpriteNode spriteNodeWithTexture:[foregroundAtlas textureNamed:@&ldquo;grass_lower&rdquo;]];
lower.anchorPoint = CGPointMake(0.5, 1.0);
lower.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame));
lower.zPosition = 3;
[self addChild:lower];</p>

<p>// Add more here later&hellip;
```
我们来看看上面的代码都做了什么。</p>

<ul>
<li><code>Add background</code> 这部分代码使用之前的helper方法创建一个背景纹理图集。接着从背景纹理图集中构建一个dirt sprite。最后将其缩小2倍，并将其添加到scene正中间。将其缩小的目的是为了节省空间。</li>
<li><code>Add foreground</code> 这部分代码跟上面background中的十分相似，只不过这两个foreground sprite在同一个纹理图集中罢了。这里用了一种方便的方法来放置图片：设置anchor point(顶部图片设置middle/bottom，底部图片设置middle/top)。这种方法不需要做复杂的数学运算，就能在所有的设备上做出正确的显示。另外需要注意的是iPhone上的背景图片有一部分将不会显示出来，不过在这里并没有太大的影响。另外需要留意的是设置了图片的zPosition值，这样可以确保图片的正确排序。</li>
<li><code>SKSpriteNode的zPosition属性</code> 这个数学用来决定每个sprite在scene所处层次的位置。可以将其看做一个蛋糕，其中dirt sprite处于最底层，所以使用最小的一个值。添加别的层时增加相应的值，所以上半部分前景图设置为1，而下半部分设置为3，那么2呢？这个值是留给鼹鼠的——因为鼹鼠将出现在上部前景图上面，而在下部前景图后面。</li>
</ul>


<p>在运行程序之前，再做一点清理工作。找到touchesBegan:方法，并将其删除掉。</p>

<p>编译并运行程序，现在可以看到屏幕上显示出了背景图和前景图！并且在iPhone和iPad模拟器中运行，也能正确的显示！如下图所示：</p>

<p><img src="/images/2013/10/32.png" alt="" /></p>

<h3><a id="asfz"></a>鼹鼠的放置</h3>

<p>在这个游戏中，我们将添加3个鼹鼠到scene中——上图中的每个洞放一个。鼹鼠默认是在地下的，偶尔会弹出来，当弹出来时，我们可以打击它们。</p>

<p>首先我们先将鼹鼠放到每个洞中。为了确保鼹鼠位置的正确，最好先把鼹鼠显示在最上面，等调好位置之后，在将其放到后台去。</p>

<p>打开MyScene.h文件，并按照如下代码进行修改：</p>

<p>```objc</p>

<h1>import &lt;SpriteKit/SpriteKit.h></h1>

<p>@interface MyScene : SKScene</p>

<p>@property (strong, nonatomic) NSMutableArray <em>moles;
@property (strong, nonatomic) SKTexture </em>moleTexture;</p>

<p>@end
```
上面的代码添加了一个SKTexture和一个数组。创建鼹鼠的时候会用到SKTexture，创建好的每个鼹鼠会被添加到数组中，这样方便之后循环获得每个鼹鼠。</p>

<p>在添加鼹鼠之前，首先定位到MyScene.m的顶部，并将下面这行代码添加到<code>@implementation MyScene</code>之前。</p>

<p><code>objc
const float kMoleHoleOffset = 155.0;
</code></p>

<p>这是一个float类型的常量，用来对鼹鼠进行定位。</p>

<p>接着，将如下代码添加到initWithSize:方法最后面：</p>

<p>```objc
// Load sprites
self.moles = [[NSMutableArray alloc] init];
SKTextureAtlas *spriteAtlas = [self textureAtlasNamed:@&ldquo;sprites&rdquo;];
self.moleTexture = [spriteAtlas textureNamed:@&ldquo;mole_1.png&rdquo;];</p>

<p>float center = 240.0;</p>

<p>if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone &amp;&amp; IS_WIDESCREEN) {</p>

<pre><code>center = 284.0;
</code></pre>

<p>}</p>

<p>SKSpriteNode *mole1 = [SKSpriteNode spriteNodeWithTexture:self.moleTexture];
mole1.position = [self convertPoint:CGPointMake(center &ndash; kMoleHoleOffset, 85.0)];
mole1.zPosition = 999;
mole1.name = @&ldquo;Mole&rdquo;;
mole1.userData = [[NSMutableDictionary alloc] init];
[self addChild:mole1];
[self.moles addObject:mole1];</p>

<p>SKSpriteNode *mole2 = [SKSpriteNode spriteNodeWithTexture:self.moleTexture];
mole2.position = [self convertPoint:CGPointMake(center, 85.0)];
mole2.zPosition = 999;
mole2.name = @&ldquo;Mole&rdquo;;
mole2.userData = [[NSMutableDictionary alloc] init];
[self addChild:mole2];
[self.moles addObject:mole2];</p>

<p>SKSpriteNode *mole3 = [SKSpriteNode spriteNodeWithTexture:self.moleTexture];
mole3.position = [self convertPoint:CGPointMake(center + kMoleHoleOffset, 85.0)];
mole3.zPosition = 999;
mole3.name = @&ldquo;Mole&rdquo;;
mole3.userData = [[NSMutableDictionary alloc] init];
[self addChild:mole3];
[self.moles addObject:mole3];
```</p>

<p>上面的代码首先创建并加载一个SKTextureAtlas。接着根据sprite纹理图集中的mole_1.png 创建一个SKTexture，这将用来创建3个鼹鼠。Texture的重用性可以让Sprite Kit处理和渲染sprite更加高效。</p>

<p>接下来的这个值用来设置center。如果设备是4英寸的iPhone，那么这个center值将反映出额外的尺寸。</p>

<p>接着为每个鼹鼠创建对应的sprite，并将它们放置到scene中，还把它们添加到鼹鼠数组中。注意，每个鼹鼠的位置是利用center位置和文件头部定义的常量决定的。针对iPhone 3.5英寸的设备，鼹鼠位置处在480×320的可玩区域，而如何是iPad，相关位置需要做转换，所以下面写了一个helper方法convertPoint。</p>

<p>将下面这个方法添加到initWithSize:方法后面：</p>

<p>```objc
&ndash; (CGPoint)convertPoint:(CGPoint)point
{</p>

<pre><code>if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
    return CGPointMake(32 + point.x*2, 64 + point.y*2);
} else {
    return point;
}
</code></pre>

<p>}
```</p>

<p>上面这个方法将可玩区域的point转换到iPad上适当的位置。记住：</p>

<ul>
<li>iPad的屏幕尺寸更大，所有的point都是双倍。</li>
<li>由于是将960×640的区域转换为1024×786的iPad区域，所以需要将左右边距分别设置为32point，而上下边距则各位64。</li>
</ul>


<p>就这样，上面的方法就是简单的给出iPad中正确的位置。</p>

<p>编译并运行程序，可以看到scene中有3个鼹鼠，它们的位置已经设置正确！你最好在iPhone 3.5-inch, iPhone 4-inch, iPad, 和 iPad Retina设备上都运行一下，以确保位置的正确。</p>

<p><img src="/images/2013/10/33.png" alt="" /></p>

<h3><a id="tcas"></a>弹出鼹鼠</h3>

<p>至此，我们已经把鼹鼠放置好了，下面我们添加一些代码让鼹鼠从洞里面跳出来吧。</p>

<p>首先，将这些sprite(鼹鼠)的zPosition从999设置为2，这样就可以把鼹鼠藏起来了。</p>

<p>然后，将下面的代码添加到update:方法中：</p>

<p>```objc
for (SKSpriteNode *mole in self.moles) {</p>

<pre><code>if (arc4random() % 3 == 0) {
    if (!mole.hasActions) {
        [self popMole:mole];
    }
}
</code></pre>

<p>}
```
需要注意的是每帧的显示都会调用update方法。该方法被调用的时候我们都会尝试着弹出一些鼹鼠。在代码中循环遍历处理了每个鼹鼠，并给每个鼹鼠1/3的机会从洞中弹出来。不过记住我们只能弹出那么还没有弹出来的鼹鼠——很简单的一个判断方法就是检查一下sprite的属性hasActions返回的值，如果还有action在运行，那么hasActions将返回YES。</p>

<p>接着，实现一下popMole方法：</p>

<p>```objc
&ndash; (void)popMole:(SKSpriteNode *)mole
{</p>

<pre><code>SKAction *easeMoveUp = [SKAction moveToY:mole.position.y + mole.size.height duration:0.2f];
easeMoveUp.timingMode = SKActionTimingEaseInEaseOut;
SKAction *easeMoveDown = [SKAction moveToY:mole.position.y duration:0.2f];
easeMoveDown.timingMode = SKActionTimingEaseInEaseOut;
SKAction *delay = [SKAction waitForDuration:0.5f];

SKAction *sequence = [SKAction sequence:@[easeMoveUp, delay, easeMoveDown]];
[mole runAction:sequence];
</code></pre>

<p>}
```</p>

<p>上面的代码使用了Sprite Kit中的一些action，让鼹鼠弹出洞来，并暂停半秒钟，然后在弹回去。我们来细看一下上面代码的意思：</p>

<ol>
<li>创建一个action来将鼹鼠沿着Y轴移动鼹鼠高度的距离，这样就能将鼹鼠正好放置到洞上面。</li>
<li>为了让移动行为看起来更自然一点，将action的timingMode设置为SKActionTimingEaseInEaseOut。这样可以让action在开始和结束时速度慢一点，这样鼹鼠看起来会有加速和减速的效果，看起来就会更自然一点了。</li>
<li>创建一个action将鼹鼠移回原处，这个action跟上一个类似，只不过使用鼹鼠当前Y轴的位置。</li>
<li>创建一个action，该action会让鼹鼠停留在洞口半秒钟。</li>
<li>按顺序运行这些action：move up，delay和move down。</li>
</ol>


<p>搞定！编译并运行程序，可以看到鼹鼠会从它们的洞口弹出来！</p>

<p><img src="/images/2013/10/34.png" alt="" /></p>

<h3><a id="hqhc"></a>何去何从</h3>

<p>本文的代码工程在<a href="http://cdn3.raywenderlich.com/downloads/WhackAMoleSK1.zip">这里</a>。</p>

<p>下一篇文章<code>Sprite Kit教程：制作一个通用程序 1</code>中会给鼹鼠添加一些可爱的动画(笑和被击中)，并添加一个玩法——打击鼹鼠，并赚取点数，并添加一些音效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sprite Kit教程：如何拖放Sprites]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/10/20/117-spritekit-tutorial-how-to-drag-and-drop-sprites/"/>
    <updated>2013-10-20T23:44:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/10/20/117-spritekit-tutorial-how-to-drag-and-drop-sprites</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/10/14.png"></p>

<!--more-->


<p>注：本文译自<a href="http://www.raywenderlich.com/44270/sprite-kit-tutorial-how-to-drag-and-drop-sprites"><code>Sprite Kit Tutorial: How To Drag and Drop Sprites</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li><a href="#ks">开始</a></li>
<li><a href="#xzjs">用触摸的方式选中sprite</a></li>
<li><a href="#ydjl">用触摸的方式移动sprite和layer</a></li>
<li><a href="#sssb">在Sprite Kit中如何使用手势识别</a></li>
<li><a href="#hqhc">何去何从</a></li>
</ul>


<p>本文中，你可以学到如下内容：</p>

<ul>
<li>利用触摸来拖放sprite的基本知识</li>
<li>利用触摸滚动view</li>
<li>How to keep coordinates straight in your head</li>
<li>如何在Sprite Kit中使用手势识别</li>
</ul>


<p>为了让本文有趣一点，这里提供了一些可爱的动物图片。</p>

<p>本文假设你已经了解了Sprite Kit的一些基本知识。如果还不了解的话，先看看下面的文章吧：</p>

<p><a href="http://beyondvincent.com/blog/2013/10/12/114-spritekit-tutorial-for-beginners-3/"><code>Sprite Kit教程：初学者 1</code></a>
<a href="http://beyondvincent.com/blog/2013/09/29/113-spritekit-tutorial-for-beginners-2/"><code>Sprite Kit教程：初学者 2</code></a>
<a href="http://beyondvincent.com/blog/2013/09/26/113-spritekit-tutorial-for-beginners-1/"><code>Sprite Kit教程：初学者 3</code></a></p>

<p>英文原文在这里：<a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners"><code>Sprite Kit Tutorial for Beginners</code></a></p>

<p>下面我们就开始吧。</p>

<h3><a id="ks"></a>开始</h3>

<p>在实现触摸处理之前，我们先来创建一个基本的Sprite Kit工程，并在scene中显示出一些sprite(动物)和背景。</p>

<p>打开Xcode，选择<code>File\New Project\Application\SpriteKit Game</code>，然后单击<code>Next</code>。</p>

<p><img src="/images/2013/10/15.png" alt="" /></p>

<p>将工程命名为<code>DragDrop</code>，devices选择<code>iPhone</code>，然后单击<code>Next</code>，把工程保存到磁盘中。</p>

<p><img src="/images/2013/10/16.png" alt="" /></p>

<p>跟<a href="http://beyondvincent.com/blog/2013/10/12/114-spritekit-tutorial-for-beginners-3/"><code>Sprite Kit教程：初学者 1</code></a>一样，我们希望这个程序只支持横屏显示(landscape)。所以在<code>Project Navigator</code>中选中<code>DragDrop</code>工程，然后选择<code>DragDrop</code> target，在弹出的画面中，只需要勾选上<code>Landscape Left</code>和<code>Landscape Right</code>。如下图所示：</p>

<p><img src="/images/2013/10/17.png" alt="" /></p>

<p>打开<code>ViewController.m</code>文件，并用下面的代码替换<code>viewDidLoad</code>方法(代码跟之前的一样)：</p>

<p>```objc
&ndash; (void)viewWillLayoutSubviews
{</p>

<pre><code>[super viewWillLayoutSubviews];

// Configure the view.
SKView * skView = (SKView *)self.view;
if (!skView.scene) {
  skView.showsFPS = YES;
  skView.showsNodeCount = YES;

  // Create and configure the scene.
  SKScene * scene = [MyScene sceneWithSize:skView.bounds.size];
  scene.scaleMode = SKSceneScaleModeAspectFill;

  // Present the scene.
  [skView presentScene:scene];
}
</code></pre>

<p>}
```</p>

<p>接着来这里下载本文需要用到的<a href="http://d1xzuxjlafny7l.cloudfront.net/downloads/DragDropImages.zip">图片资源</a>。下载并解压之后，将所有的文件拖到工程中，其中把<code>Copy items into destination group’s folder (if needed)</code>勾选上，然后单击<code>Finish</code>。</p>

<p><img src="/images/2013/10/18.png" alt="" /></p>

<p>完成上面的步骤之后，打开<code>MyScene.m</code>文件，并在<code>@implementation</code>上面添加一个class extension，并声明两个属性，如下所示：</p>

<p>```objc
@interface MyScene ()</p>

<p>@property (nonatomic, strong) SKSpriteNode <em>background;
@property (nonatomic, strong) SKSpriteNode </em>selectedNode;</p>

<p>@end
```</p>

<p>稍后会用到上面的这两个属性来存储背景图片，已经当前选中的node/sprite。接着在@interface前面添加如下这行代码：</p>

<p><code>objc
static NSString * const kAnimalNodeName = @"movable";
</code></p>

<p>稍后将会用这个字符串来标示可移动的node。接着找到<code>initWithSize:</code>方法，并用下面的代码替换里面的内容：</p>

<p>```objc
&ndash; (id)initWithSize:(CGSize)size {</p>

<pre><code>if (self = [super initWithSize:size]) {

    // 1) Loading the background
    _background = [SKSpriteNode spriteNodeWithImageNamed:@"blue-shooting-stars"];
    [_background setName:@"background"];
    [_background setAnchorPoint:CGPointZero];
    [self addChild:_background];

    // 2) Loading the images
    NSArray *imageNames = @[@"bird", @"cat", @"dog", @"turtle"];
    for(int i = 0; i &lt; [imageNames count]; ++i) {
      NSString *imageName = [imageNames objectAtIndex:i];
      SKSpriteNode *sprite = [SKSpriteNode spriteNodeWithImageNamed:imageName];
      [sprite setName:kAnimalNodeName];

      float offsetFraction = ((float)(i + 1)) / ([imageNames count] + 1);
      [sprite setPosition:CGPointMake(size.width * offsetFraction, size.height / 2)];
      [_background addChild:sprite];
    }
}

return self;
</code></pre>

<p>}
```</p>

<p>我们来看看上面的代码都干了什么。</p>

<p>1) 加载背景图片</p>

<p>上面方法中的第一部分代码是为scene加载背景图片(blue-shooting-stars.png)。并将该note的anchor设置为图片的左下角(0, 0)。</p>

<p>在Sprite Kit中，设置一个node的位置时，实际上是设置它的anchor。默认情况下，node的anchor被设置为node的正中间。在此，将anchor设置为左下角。</p>

<p>方法中，并没有设置背景图片的position，所以背景图的的位置默认为(0,0)。最终，图片的左下角位置是(0,0)，并向右边延伸。</p>

<p>2) 加载小动物</p>

<p>函数中接下来的代码是循环遍历列表中的图片，并将其加载到scene中。为了好的布局，其中各个node根据屏幕的长度来定位，另外还将这些node的名字设置为<code>kAnimalNodeName</code>。</p>

<p>之后将创建好的node添加到<code>_background</code>中。</p>

<p>OK！编译并运行程序，会看到屏幕中已经显示出了一些可爱的动物了。</p>

<p><img src="/images/2013/10/19.png" alt="" /></p>

<h3><a id="xzjs"></a>用触摸的方式选中sprite</h3>

<p>下面我们来实现一下根据用户当前触摸的位置判断出哪个sprite应该被选中。</p>

<p>用下面的代码替换<code>touchesBegan:withEvent:</code>：</p>

<p>```objc
&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event {</p>

<pre><code>UITouch *touch = [touches anyObject];
CGPoint positionInScene = [touch locationInNode:self];
[self selectNodeForTouch:positionInScene];
</code></pre>

<p>}
```</p>

<p>首先从touches set中获得touch。然后将touch的位置转换到一个指定node中的位置，上面的代码中使用了scene。让后将获得的方法传递给<code>selectNodeForTouch:</code>方法，该方法是一个新方法，下面我们就来看看这个方法的实现。</p>

<p>```objc
&ndash; (void)selectNodeForTouch:(CGPoint)touchLocation {
   //1
   SKSpriteNode <em>touchedNode = (SKSpriteNode </em>)[self nodeAtPoint:touchLocation];</p>

<pre><code>  //2
if(![_selectedNode isEqual:touchedNode]) {
    [_selectedNode removeAllActions];
    [_selectedNode runAction:[SKAction rotateToAngle:0.0f duration:0.1]];

    _selectedNode = touchedNode;
    //3
    if([[touchedNode name] isEqualToString:kAnimalNodeName]) {
        SKAction *sequence = [SKAction sequence:@[[SKAction rotateByAngle:degToRad(-4.0f) duration:0.1],
                                                  [SKAction rotateByAngle:0.0 duration:0.1],
                                                  [SKAction rotateByAngle:degToRad(4.0f) duration:0.1]]];
        [_selectedNode runAction:[SKAction repeatActionForever:sequence]];
    }
}
</code></pre>

<p>}
```</p>

<p>这是一个helper方法，它主要做三件不同的事情：</p>

<ol>
<li>通过scene(self)获得touchLocation位置对应的node。</li>
<li>获得匹配的node之后，检查一下这个node与上一次选中的node是否相同，如果相同的话，在这里直接就返回了。如果是一个新选中的node，或者还没有选中过，这个node会有一点小小的挪动动画，以此可以看出哪个node被选中了。不过在开始动画之前，需要移除当前已经选中node上的所有running actions，并在这个node上运行一个action：<code>rotateToAngle:duration:</code>。这样可以确保只有一个node在做动画，而另外的node恢复到原样。</li>
<li>这个if语句用来判断一下选中的node是否可以进行动画(只需要检查一下node的name就可以做出判断——还记得在<code>initWithSize:</code>方法中设置的这个属性值吗？)。如果选中的node可以做动画处理，那么就创建一个sequence action——是一个动画效果，就像在主屏幕中重排/删除程序那样的效果，然后在选中的node上运行这个sequence。为了避免动画运行完毕之后会停止，在这里运行了一个一直重复的action。</li>
</ol>


<p>下面将helper函数<code>degToRad</code>添加到文件的底部：</p>

<p>```objc
float degToRad(float degree) {</p>

<pre><code>return degree / 180.0f * M_PI;
</code></pre>

<p>}
```</p>

<p>由于Sprite Kit是利用弧度来做旋转效果的，所以上面这个方法将角度转换为弧度。</p>

<p>编译并运行程序，现在可以在屏幕上tap一个动物，当选中某个动物时，该动物会做出相应的动画效果，以表示被选中！</p>

<p><img src="/images/2013/10/20.png" alt="" /></p>

<h3><a id="ydjl"></a>用触摸的方式移动sprite和layer</h3>

<p>下面来看看如何移动这些动物！基本思路是这样的：实现<code>touchesMoved:withEvent:</code>方法，计算出距离上一次触摸移动了多远，如果有动物被选中，动物将被移动相应的距离，如果没有选中动物，那么就移动整个layer，这样用户可以从左向右的滚动layer。</p>

<p>在添加代码之前，我们先来探讨一下在Sprite Kit中，一个node是如何滚动的。</p>

<p>看看下面的图片：</p>

<p><img src="/images/2013/10/21.png" alt="" /></p>

<p>如上图所示，我们已经初始化了一个背景，所以背景的anchor点是(0, 0)，并且向右边扩展。黑色框中的区域表示当前的可视区域(window的大小)。</p>

<p>如果希望将图片往右边滚动100 points，可以通过将整个node往左边移动100 points，如第二幅图看到的效果一样。</p>

<p>当然，也可能希望不要移动太远。例如，不应该让layer可以往右边移动，否则会看到空白的点。</p>

<p>下面来看看相应的代码！将如下方法添加到文件的底部：</p>

<p>```objc
&ndash; (CGPoint)boundLayerPos:(CGPoint)newPos {</p>

<pre><code>CGSize winSize = self.size;
CGPoint retval = newPos;
retval.x = MIN(retval.x, 0);
retval.x = MAX(retval.x, -[_background size].width+ winSize.width);
retval.y = [self position].y;
return retval;
</code></pre>

<p>}</p>

<ul>
<li>(void)panForTranslation:(CGPoint)translation {
  CGPoint position = [<em>selectedNode position];
  if([[</em>selectedNode name] isEqualToString:kAnimalNodeName]) {
      [<em>selectedNode setPosition:CGPointMake(position.x + translation.x, position.y + translation.y)];
  } else {
      CGPoint newPos = CGPointMake(position.x + translation.x, position.y + translation.y);
      [</em>background setPosition:[self boundLayerPos:newPos]];
  }
}
```</li>
</ul>


<p>第一个方法<code>boundLayerPos:</code>是为了确保不会将layer移动到背景图片范围之外。在这里传入一个需要移动到的位置，然后该方法会对位置做适当的判断处理，以确保不会移动太远。</p>

<p>接着方法<code>panForTranslation:</code>首先判断一下_selectedNode是否为动物node，如果是的话，根据传入的参数来为node设置新的位置。如果是background layer，同样也会设置一个新的位置，只不过新的位置需要调用<code>boundLayerPos:</code>方法获得。</p>

<p>完成上面之后，可以实现<code>touchesMoved:withEvent:</code>方法了：</p>

<p>```objc
&ndash; (void)touchesMoved:(NSSet <em>)touches withEvent:(UIEvent </em>)event {</p>

<pre><code>UITouch *touch = [touches anyObject];
CGPoint positionInScene = [touch locationInNode:self];
CGPoint previousPosition = [touch previousLocationInNode:self];

CGPoint translation = CGPointMake(positionInScene.x - previousPosition.x, positionInScene.y - previousPosition.y);

[self panForTranslation:translation];
</code></pre>

<p>}
```</p>

<p>跟<code>touchesBegan:withEvent:</code>一样，先获得touch，然后将它的位置转换为scene中的相应位置。为了计算出移动的距离，需要上一次触摸的位置。</p>

<p>通过当前位置减去上一次的位置就可以计算出需要移动的距离了。最后调用<code>panForTransaltion:</code>方法，并将移动距离传入即可。</p>

<p>搞定！编译并运行程序，现在可以通过拖放的方式移动sprite(以及layer)了！</p>

<p><img src="/images/2013/10/22.png" alt="" /></p>

<h3><a id="sssb"></a>在Sprite Kit中如何使用手势识别</h3>

<p>在Sprite Kit中还可以使用手势识别来处理触摸！</p>

<p>手势识别可以识别不同的手势，如tap，double tap，swipe或pan。</p>

<p>通过手势识别，我们可以不用写大量的代码来识别不同的手势（如tap，double tap，swipe或pan），只需要创建一个手势识别对象并将其添加到view中，即可进行手势识别。当有手势发生，会有一个回调。</p>

<p>下面就来看看如何在Sprite Kit中使用手势识别。</p>

<p>首先，注释掉触摸处理方法：<code>touchesBegan:withEvent:</code>和<code>touchesMoved:withEvent:</code>(因为要使用不同的处理方法啦)。</p>

<p>然后添加如下方法：</p>

<p>```objc
&ndash; (void)didMoveToView:(SKView *)view {</p>

<pre><code>UIPanGestureRecognizer *gestureRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handlePanFrom:)];
[[self view] addGestureRecognizer:gestureRecognizer];
</code></pre>

<p>}
```</p>

<p>当scene第一次显示出来时会调用这个方法。在上面的方法中创建了一个pan手势识别器，并用当前的scene来对其做初始化，另外还传入一个callback：<code>handlePanFrom:</code>。接着把这个手势识别器添加到scene中的view里面。</p>

<p>注意：可能你会问为什么要在这里添加识别器，而不是在scene的init方法中。答案很简单：<code>SKScene</code>有一个view属性，保存着SKView——该view用来显示scene，不过只有scene显示到屏幕中时这个属性才会被初始化，所以在init方法被调用时该属性是nil的。此处的<code>didMoveToView:</code>类似于UIKit中的<code>viewDidAppear:</code>，当scene显示出来时，<code>didMoveToView:</code>会被调用。</p>

<p>接着，将下面的代码添加到<code>MyScene.m</code>文件底部：</p>

<p>```objc
&ndash; (void)handlePanFrom:(UIPanGestureRecognizer *)recognizer {</p>

<pre><code>if (recognizer.state == UIGestureRecognizerStateBegan) {

    CGPoint touchLocation = [recognizer locationInView:recognizer.view];

    touchLocation = [self convertPointFromView:touchLocation];

    [self selectNodeForTouch:touchLocation];


} else if (recognizer.state == UIGestureRecognizerStateChanged) {

    CGPoint translation = [recognizer translationInView:recognizer.view];
    translation = CGPointMake(translation.x, -translation.y);
    [self panForTranslation:translation];
    [recognizer setTranslation:CGPointZero inView:recognizer.view];

} else if (recognizer.state == UIGestureRecognizerStateEnded) {

    if (![[_selectedNode name] isEqualToString:kAnimalNodeName]) {
        float scrollDuration = 0.2;
        CGPoint velocity = [recognizer velocityInView:recognizer.view];
        CGPoint pos = [_selectedNode position];
        CGPoint p = mult(velocity, scrollDuration);

        CGPoint newPos = CGPointMake(pos.x + p.x, pos.y + p.y);
        newPos = [self boundLayerPos:newPos];
        [_selectedNode removeAllActions];

        SKAction *moveTo = [SKAction moveTo:newPos duration:scrollDuration];
        [moveTo setTimingMode:SKActionTimingEaseOut];
        [_selectedNode runAction:moveTo];
    }

}
</code></pre>

<p>}
```</p>

<p>当手势开始、改变(例如用户持续drag)，以及结束时，上面这个callback函数都会被调用。该方法会进入不同的case，以处理不同的情况。</p>

<p>当手势开始时，将坐标系统转换为node坐标系(注意这里没有便捷的方法，只能这样处理)。然后电泳之前写的helper方法<code>selectNodeForTouch:</code>。</p>

<p>当手势发生改变时，需要计算出手势移动的量。还在手势识别器已经为我们存储了手势移动的累计量(translation)！不过考虑到效果的差异，我们需要在UIKit坐标系和Sprite Kit坐标系中对坐标进行转换。</p>

<p>平移(pan)之后，需要把手势识别器上的translation设置为0，否则该值会继续被累加。</p>

<p>当手势结束之后，上面的函数中有一些有趣的代码！UIPanGestureRecognizer可以为我们提供一个移动的速度。通过这个速度可以对node做一个动画——滑动一小点，这样用户可以对node做一个快速的摇动，就像table view上的那种效果一样。</p>

<p>所以，在这里包含的代码用来计算基于速度移动的一个point，然后运行一个moveTo action(为了更加好看，附带<code>SKActionTimingEaseOut</code>效果)。</p>

<p>接着添加如下一个方法到文件中：</p>

<p>```objc
CGPoint mult(const CGPoint v, const CGFloat s) {</p>

<pre><code>return CGPointMake(v.x*s, v.y*s);
</code></pre>

<p>}
```</p>

<p>上面这个方法是将滚动的时间乘以速度。</p>

<p>编译并运行程序，现在应该可以用手势识别器滑动和移动动物了。</p>

<p><img src="/images/2013/10/23.png" alt="" /></p>

<h3><a id="hqhc"></a>何去何从</h3>

<p>本文的代码工程在<a href="http://cdn2.raywenderlich.com/downloads/DragDropSpriteKit.zip">这里</a>。</p>

<p>至此，你应该知道如何在Sprite Kit程序中使用touch来移动node，以及如何在Sprite Kit中使用手势识别器。</p>

<p>现在，你也可以尝试利用别的手势识别器对上面的工程做扩展处理，例如pinch或rotate手势识别器——可以让猫长大哦！</p>

<p>如果你希望学习更多相关Sprite Kit内容，可以看看这本书：<a href="http://www.raywenderlich.com/store/ios-7-by-tutorials">iOS Games by Tutorials</a>。本书会告诉你需要知道的内容——从物理特性，到磁贴地图，以及粒子系统，甚至是制作自己的关卡编辑器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sprite Kit教程：动画和纹理图集 2]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/10/16/116-spritekit-tutorial-animations-and-texture-atlases-2/"/>
    <updated>2013-10-16T23:40:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/10/16/116-spritekit-tutorial-animations-and-texture-atlases-2</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/10/3.png"></p>

<!--more-->


<p>注：本文译自<a href="http://www.raywenderlich.com/45152/sprite-kit-tutorial-animations-and-texture-atlases"><code>Sprite Kit Tutorial: Animations and Texture Atlases</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li>创建一个工程</li>
<li>纹理图集和熊</li>
<li>一个简单的动画</li>
<li><a href="#gbfx">改变动画运动的方向</a></li>
<li><a href="#ydx">在屏幕上让熊移动</a></li>
<li><a href="#hqhc">何去何从?</a></li>
</ul>


<h3><a id="gbfx"></a>改变动画运动的方向</h3>

<p>看起来不错哦！下面我们就来看看如何通过触摸屏幕上的点来控制熊的运动方向。在<code>MyScene.m</code>文件中做如下改动：</p>

<p>```objc
// Add these new methods
&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>CGPoint location = [[touches anyObject] locationInNode:self];
CGFloat multiplierForDirection;

if (location.x &lt;= CGRectGetMidX(self.frame)) {
    //walk left
    multiplierForDirection = 1;
} else {
    //walk right
    multiplierForDirection = -1;
}

_bear.xScale = fabs(_bear.xScale) * multiplierForDirection;
[self walkingBear];
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{  <br/>
}
```</p>

<p>上面的代码会根据tap的位置，让<code>touchesEnded</code>方法判断tap处于屏幕正中间的左边还是右边。通过该方法，决定熊的朝向。熊的方向是通过Sprite Kit来改变的(通过负值乘以xScale就可以让熊朝向左边。)</p>

<p>编译并运行程序，一切正常的话，当你在屏幕上点击时，会发现熊的朝向发生了改变。</p>

<p><img src="/images/2013/10/12.png" alt="" /></p>

<h3><a id="ydx"></a>在屏幕上让熊移动</h3>

<p>下面我们让熊可以移动到屏幕的各个位置。</p>

<p>在<code>MyScene.m</code>文件中做如下改动：</p>

<p>```objc
// Comment out the call to start the bear walking
//[self walkingBear];</p>

<p>&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{</p>

<pre><code>//Stuff from below!
</code></pre>

<p>}</p>

<p>&ndash;(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{  <br/>
}</p>

<p>//add this method
&ndash;(void)bearMoveEnded
{</p>

<pre><code>[_bear removeAllActions];
</code></pre>

<p>}
```</p>

<p>如上所示，移除了<code>touchesEnded</code>方法中的所有代码。下面我们一步一步的往里面添加代码。</p>

<p>当想要停止动画的时可以调用方法<code>bearMoveEnded</code>。</p>

<p>下面就从<code>touchesEnded</code>方法开始吧：</p>

<p><code>1) 确定触摸的位置并定义一个变量代表熊的朝向</code></p>

<p><code>objc
CGPoint location = [[touches anyObject] locationInNode:self];
CGFloat multiplierForDirection;
</code></p>

<p>如上代码，利用常见的一个方法将触摸的位置转换为node坐标系中的位置。</p>

<p><code>2) 设置速度</code></p>

<p><code>objc
CGSize screenSize = self.frame.size;
float bearVelocity = screenSize.width / 3.0;
</code></p>

<p>如上，定义了熊移动的速度。可知熊从移动长度为屏幕宽度这么长时，需要3秒钟。由于不同设备的屏幕宽度可能会不同，所以在这里使用了self.frame.size，所以熊的速度应该是屏幕宽度/3秒。</p>

<p><code>3) 计算出熊在X和Y轴中移动的量</code></p>

<p><code>objc
 CGPoint moveDifference = CGPointMake(location.x - _bear.position.x, location.y - _bear.position.y);
</code></p>

<p>通过简单的利用触摸位置减去熊的位置，计算出熊在X和Y轴上应该移动的距离。</p>

<p><code>4) 计算出实际的移动距离</code></p>

<p><code>objc
float distanceToMove = sqrtf(moveDifference.x * moveDifference.x + moveDifference.y * moveDifference.y);
</code></p>

<p>上面的代码是计算出熊实际移动的直线距离(一个直角三角形的斜边：熊当前的位置和触摸位置)。关于游戏中涉及到的数学知识可以看看这本书：<a href="http://www.raywenderlich.com/35866/trigonometry-for-game-programming-part-1">Trigonometry for Game Programming</a>。</p>

<p><code>5) 计算出移动实际距离所需要花费的时间</code></p>

<p><code>objc
float moveDuration = distanceToMove / bearVelocity;
</code></p>

<p>通过移动的实际距离除以移动速度计算出需要花费的时间。</p>

<p><code>6) 需要的话对动画做翻转(Flip)处理</code></p>

<p>```objc
if (moveDifference.x &lt; 0) {</p>

<pre><code>multiplierForDirection = 1;
</code></pre>

<p>} else {</p>

<pre><code>multiplierForDirection = -1;
</code></pre>

<p>}
<em>bear.xScale = fabs(</em>bear.xScale) * multiplierForDirection;
```</p>

<p>上面的代码：确定熊往左还是往右移动。如果小于0，则往左移动，否则往右移动。</p>

<p>在这里，你的第一直觉可能是利用图片编辑器创建并使用对应另一个方向的图片。不过，之前我们学习过了如果通过乘法来改变sprite的xScale，进而改变sprite的方向。</p>

<p><code>7) 运行一些action</code></p>

<p>```objc
if ([_bear actionForKey:@&ldquo;bearMoving&rdquo;]) {</p>

<pre><code>//stop just the moving to a new location, but leave the walking legs movement running
[_bear removeActionForKey:@"bearMoving"];
</code></pre>

<p>} //1</p>

<p>if (![_bear actionForKey:@&ldquo;walkingInPlaceBear&rdquo;]) {</p>

<pre><code>//if legs are not moving go ahead and start them
[self walkingBear];  //start the bear walking
</code></pre>

<p>} //2</p>

<p>SKAction <em>moveAction = [SKAction moveTo:location duration:moveDuration];  //3
SKAction </em>doneAction = [SKAction runBlock:(dispatch_block_t)^() {</p>

<pre><code>    NSLog(@"Animation Completed");
    [self bearMoveEnded];
</code></pre>

<p>}]; //4</p>

<p>SKAction *moveActionWithDone = [SKAction sequence:@[moveAction,doneAction]]; //5</p>

<p>[_bear runAction:moveActionWithDone withKey:@&ldquo;bearMoving&rdquo;]; //6
```</p>

<ol>
<li>停止已有的移动action(因为要准备告诉熊移动到别的地方)。这里使用的key可以开始和停止以此命名的动画的运行。</li>
<li>如果熊还没有准备移动腿，那么就让熊的腿开始移动，否则它该如何走到新的位置呢。这里使用了我们之前使用过的方法，这个方法可以确保不启动一个已经运行着的动画(以key命名)。</li>
<li>创建一个移动action，并制定移动到何处，以及需要花费的时间。</li>
<li>创建一个done action，当熊到达目的地后，该action利用一个block调用一个方法来停止动画。</li>
<li>将上面的两个action设置为一个顺序action链，就是说让这两个action按照先后顺序运行(第一个运行完之后，再运行第二个)。</li>
<li>让熊开始运行action，并制定一个key为："bearMoving"。记住，这里的key用来判断熊是否需要移动到新的位置。</li>
</ol>


<p>注意：Sprite Kit支持两种action：<code>sequential</code>和<code>grouped</code>。<code>sequential</code> action表示action按照顺序执行。如果想要action同时运行，那么就使用<code>grouped</code>。</p>

<p>当然，也可以在sequential action中包含grouped action，反之亦然。更多相关内容请看<a href="https://developer.apple.com/library/prerelease/ios/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40013043">Sprite Kit Programming Guide</a>中的<code>Adding Actions to Nodes</code>章节。</p>

<p>当动画执行完毕之后，<code>bearMoveEnded</code>会被调用，所有的动画都将被停止，并等待下一个移动方位。</p>

<p>搞定了！</p>

<p>现在编译并运行程序，一切正常的话，那么当点击屏幕时，熊会跟着移动。</p>

<p><img src="/images/2013/10/13.png" alt="" /></p>

<h3><a id="hqhc"></a>何去何从?</h3>

<p>这里是本文涉及到的<a href="http://cdn5.raywenderlich.com/wp-content/uploads/2013/09/AnimatedBear.zip">工程示例</a>。</p>

<p>下面这些想法可以让动画更加有趣：</p>

<ul>
<li>尝试在方法<code>walkingBear</code>中增加或者减慢运动的速度，看看效果</li>
<li>试着在屏幕上同时显示多个熊。提示：创建多个sprite node，并赋予action。</li>
</ul>


<p>至此，你应该已经知道如何使用动画了。</p>

<p>如果你希望学习更多相关Sprite Kit内容，可以看看这本书：<a href="http://www.raywenderlich.com/store/ios-7-by-tutorials">iOS Games by Tutorials</a>。本书会告诉你需要知道的内容——从物理特性，到磁贴地图，以及粒子系统，甚至是制作自己的关卡编辑器。</p>

<p>……Sprite Kit教程：动画和纹理图集 2 结束……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sprite Kit教程：动画和纹理图集 1]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/10/16/115-spritekit-tutorial-animations-and-texture-atlases-1/"/>
    <updated>2013-10-16T12:40:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/10/16/115-spritekit-tutorial-animations-and-texture-atlases-1</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/10/2.png"></p>

<!--more-->


<p>注：本文译自<a href="http://www.raywenderlich.com/45152/sprite-kit-tutorial-animations-and-texture-atlases"><code>Sprite Kit Tutorial: Animations and Texture Atlases</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li><a href="#cjgc">创建一个工程</a></li>
<li><a href="#wltj">纹理图集和熊</a></li>
<li><a href="#jddh">一个简单的动画</a></li>
<li>改变动画运动的方向</li>
<li>在屏幕上让熊移动</li>
<li>何去何从?</li>
</ul>


<p>从本文，可以学习到如何使用iOS 7中的Sprite Kit框架创建一个简单的动画：在屏幕上行走的熊。</p>

<p>另外还可以学习到如何使用纹理图集来制作动画效果，如何在触摸事件发生时让熊移动，以及改变熊运动的方向。</p>

<p>学习本文之前，最好先看看下面的文章：
<a href="http://beyondvincent.com/blog/2013/10/12/114-spritekit-tutorial-for-beginners-3/"><code>Sprite Kit教程：初学者 1</code></a>
<a href="http://beyondvincent.com/blog/2013/09/29/113-spritekit-tutorial-for-beginners-2/"><code>Sprite Kit教程：初学者 2</code></a>
<a href="http://beyondvincent.com/blog/2013/09/26/113-spritekit-tutorial-for-beginners-1/"><code>Sprite Kit教程：初学者 3</code></a></p>

<p>英文原文在这里：<a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners"><code>Sprite Kit Tutorial for Beginners</code></a></p>

<p>下面我们就开始吧。</p>

<h3><a id="cjgc"></a>创建一个工程</h3>

<p>我们先创建好一个工程架子——选择<code>File\New Project…</code>，在<code>iOS Application</code>中选择<code>Sprite Kit Game</code>，如下图所示：</p>

<p><img src="/images/2013/10/4.png"></p>

<p>选择<code>Next</code>，并将工程命名为<code>AnimatedBear</code>，把Class Prefix中的内容清除掉，并将Devices选择为<code>iPad</code>，如下图所示：</p>

<p><img src="/images/2013/10/5.png"></p>

<p>接着选择<code>Next</code>，将工程保存到磁盘中。</p>

<p>现在编译并运行程序的话，当点击屏幕时，可以看到在屏幕中有一个自动旋转的飞船。如下图所示：</p>

<p><img src="/images/2013/10/6.png"></p>

<p>这样工程架子就准备好了，下面我们去寻找一些熊的动画资源——从这里下载即可：<a href="http://cdn5.raywenderlich.com/wp-content/uploads/2013/08/BearImages.zip">BearImages Art</a>。如下图所示：</p>

<p><img src="/images/2013/10/7.jpg" alt="熊的示例图片" /></p>

<p>上面下载到的图片有所需要的最大分辨率——iPad retina显示(2X)和non-retina版本(1x)。这些文件的命名方式为bear1..n@2x~ipad和bear1..n~ipad.png。</p>

<p>在这里，构建一个动画，你可以只需要将这些图片直接添加到Sprite Kit工程中即可。不过，还有另外一种更加方便的方法来构建动画——使用纹理图集。</p>

<h3><a id="wltj"></a>纹理图集和熊</h3>

<p>如果之前你没使用过纹理图集，那你可以把它想象为一副很大的图片，其中包括动画中需要使用到的各种图片。这个图集可以看做是一个文件，它指定了每个sprite的边界范围，当在代码中需要使用时，可以将这些sprite取出来。</p>

<p>使用纹理图集是因为Sprite Kit和图形引擎会对其做相应的优化处理。<code>后面这段话暂时不知道什么意思:</code></p>

<p>```</p>

<pre><code>If you use sprites within a texture atlas properly, rather than making one OpenGL ES draw call per sprite it just makes one per texture atlas sheet.
</code></pre>

<p>```</p>

<p>简而言之——使用纹理图集会非常的快，特别是有大量sprite的时候！</p>

<p>Xcode会自动的生成这个纹理图集文件，并指定好每个sprite的边界范围，这样当在代码中需要用到某个sprite的时候，可以方便取出来。这一切都会自动处理，开发者不用亲力为之。</p>

<p><code>
注意：当纹理图集有问题时(例如错误的图片等)，那么建议clean一下工程(Product\Clean)——这样可以强制让纹理图集重新构建。
</code></p>

<p>为纹理图集创建一个文件夹，并将图片文件放置到该文件夹中，然后在文件夹名称尾部添加<code>.atlas</code>。这样Xcode就能识别出.atlas扩展名，进而自动的将图片合并为一个纹理图集。</p>

<p>之前下载的图片资源中有一个名为<code>BearImages.atlas</code>的文件夹，里面包含了各种分辨率的图片(是其它两个文件夹中的图片合集)。</p>

<p>将名为<code>BearImages.atlas</code>的文件夹拖拽到程序中，如下图所示：</p>

<p><img src="/images/2013/10/8.png" alt="" /></p>

<p>当释放鼠标时，会看到如下图片中的对话框：是关于如何添加到工程中的。确保选中这三项：<code>Copy items into destination group’s folder</code>, <code>Create groups for any added folder</code>, 和 <code>the AnimatedBear</code>，然后点击<code>Finish</code>：</p>

<p><img src="/images/2013/10/9.png" alt="" /></p>

<p>在Xcode中展开这个文件夹<code>BearImages.atlas</code>，会看到如下内容：</p>

<p><img src="/images/2013/10/10.png" alt="" /></p>

<p>下面，是时候让熊动起来了！</p>

<h3><a id="jddh"></a>一个简单的动画</h3>

<p>这里我们先把熊显示在屏幕中间，并开启永久循环动画。</p>

<p>此处主要都是在<code>MyScene.m</code>中写代码。打开这个文件，并用下面的代码替换之：</p>

<p>```objc</p>

<h1>import &lt;AVFoundation/AVFoundation.h></h1>

<h1>import &ldquo;MyScene.h&rdquo;</h1>

<p>@implementation MyScene
{</p>

<pre><code>SKSpriteNode *_bear;
NSArray *_bearWalkingFrames;
</code></pre>

<p>}</p>

<p>&ndash;(id)initWithSize:(CGSize)size
{</p>

<pre><code>if (self = [super initWithSize:size]) {
    /* Setup your scene here */

    self.backgroundColor = [SKColor blackColor];

    // TODO...

}
return self;
</code></pre>

<p>}</p>

<p>&ndash;(void)update:(CFTimeInterval)currentTime {</p>

<pre><code>/* Called before each frame is rendered */
</code></pre>

<p>}</p>

<p>@end
```</p>

<p>上面的代码很简单，只是定义了几个稍后会用到的变量。编译并运行一下，确保没有错误——会看到屏幕是黑色的。</p>

<p>接下来要让熊动起来，有5步需要处理，我们就来看看吧。</p>

<p>记得将下面的代码添加到<code>initWithSize</code>方法的<code>TODO</code>位置。</p>

<p><code>1) 构建一个用于保存行走帧(walking frame)</code></p>

<p><code>objc
NSMutableArray *walkFrames = [NSMutableArray array];
</code>
<code>2) 加载纹理图集</code></p>

<p><code>objc
SKTextureAtlas *bearAnimatedAtlas = [SKTextureAtlas atlasNamed:@"BearImages"];
</code>
上面的代码会从程序bundle的数据区中创建一个图集。Sprite Kit会根据设备的寻找对应分辨率的图片文件，在iPad retina上会使用BearImages@2x~ipad.png。</p>

<p><code>3) 构建帧列表</code></p>

<p>```objc
int numImages = bearAnimatedAtlas.textureNames.count;
for (int i=1; i &lt;= numImages/2; i++) {</p>

<pre><code>NSString *textureName = [NSString stringWithFormat:@"bear%d", i];
SKTexture *temp = [bearAnimatedAtlas textureNamed:textureName];
[walkFrames addObject:temp];
</code></pre>

<p>}
_bearWalkingFrames = walkFrames;
```</p>

<p>上面的代码根据图片名称从图集中循环获取到一个帧列表(这些图片的命名为bear1.png->bear8.png)，注意到<code>numImages</code>这个变量了吗？它为啥要除以2呢？</p>

<p>这是因为：纹理图集包含了所有分辨率的图片文件(non-retina和retina)。共有16个文件，每种分辨率有8个文件。要想加载某种分辨率的图片，就需要除以2。这样通过名称和计数器，就能获取到正确的分辨率图片。</p>

<p><code>4) 创建sprite，并将其位置设置为屏幕中间，然后将其添加到场景中</code></p>

<p><code>objc
SKTexture *temp = _bearWalkingFrames[0];
_bear = [SKSpriteNode spriteNodeWithTexture:temp];
_bear.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame));
[self addChild:_bear];
[self walkingBear];
</code></p>

<p>利用帧列表的第一帧构建一个sprite，然后将其放置到屏幕正中间。最后调用walkingBear方法，让熊开始走动。</p>

<p><code>5) 在initWithSize方法后面添加一个新的方法walkingBear</code></p>

<p>```objc
&ndash;(void)walkingBear
{</p>

<pre><code>//This is our general runAction method to make our bear walk.
[_bear runAction:[SKAction repeatActionForever:
                  [SKAction animateWithTextures:_bearWalkingFrames
                                   timePerFrame:0.1f
                                         resize:NO
                                        restore:YES]] withKey:@"walkingInPlaceBear"];
return;
</code></pre>

<p>}
```</p>

<p>上面的这个action会以0.1秒的间隔开始播放各帧。如果你的代码再次调用这个方法使动画重新开始的话，<code>walkingInPlaceBear</code>这个key会强制移除动画。这对于确保动画不相互干扰非常重要。<code>withKey</code>参数还提供了一个钟方法对动画进行检查，来判断其是否通过名称运行的。</p>

<p>这个action是永久重复的，内部的actionan <code>imateWithTextures</code>会按顺序动画播放帧列表中的图片。</p>

<p><code>完工!</code></p>

<p>现在编译并运行程序，一切正常的话，会在屏幕中看到一个会动的熊，如下图所示：</p>

<p><img src="/images/2013/10/11.png" alt="" /></p>

<p>……Sprite Kit教程：动画和纹理图集 1 结束……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sprite Kit教程：初学者 3]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/10/12/114-spritekit-tutorial-for-beginners-3/"/>
    <updated>2013-10-12T00:06:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/10/12/114-spritekit-tutorial-for-beginners-3</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/09/18.png"></p>

<!--more-->


<p>注：本文译自<a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners"><code>Sprite Kit Tutorial for Beginners</code></a></p>

<h3><strong>目录</strong></h3>

<ul>
<li>Sprite Kit的优点和缺点</li>
<li>Sprite Kit vs Cocos2D-iPhone vs Cocos2D-X vs Unity</li>
<li>Hello, Sprite Kit!</li>
<li>横屏显示</li>
<li>移动怪兽</li>
<li>发射炮弹</li>
<li><a href="#pzjcgs">碰撞检测和物理特性: 概述</a></li>
<li><a href="#pzjcsx">碰撞检测和物理特性: 实现</a></li>
<li><a href="#sw">收尾</a></li>
<li><a href="#hqhc">何去何从?</a></li>
</ul>


<h3><a id="pzjcgs"></a>碰撞检测和物理特性: 概述</h3>

<p>至此我们已经可以让炮弹任意的发射了——现在我们要让忍者利用炮弹来消灭这些怪物。下面就添加一些代码来给炮弹与怪物相交做检测。</p>

<p>Sprite Kit内置了一个物理引擎，这非常的棒！该物理引擎不仅可以模拟现实运动，还能进行碰撞检测。</p>

<p>下面我们就在游戏中使用Sprite Kit的物理引擎来检测炮弹与怪物的碰撞。首先，我们来看看需要做些神马事情：</p>

<ul>
<li><code>物理世界的配置</code>。物理世界是一个模拟的空间，用来进行物理计算。默认情况下，在场景(scene)中已经创建好了一个，我们可以对其做一些属性配置，例如重力感应。</li>
<li><code>为精灵(sprite)创建对应的物体(physics bodies)</code>。在Sprite Kit中，为了碰撞检测，我们可以为每个精灵创建一个相应的形状，并设置一些属性,这就称为<code>物体(physics body)</code>。注意：图文的形状不一定跟精灵的外形一模一样。一般情况，这个形状都是简单的、大概的(而不用精确到像素级别)——毕竟这已经足以够大多数游戏使用了。</li>
<li><code>将精灵分类</code>。在物体(physics body)上可以设置的一个属性是<code>category</code>，该属性是一个位掩码(bitmask)。通过该属性可以将精灵分类。在本文的游戏中，有两个类别——一类是炮弹，另一类则是怪物。设置之后，当两种物体相互碰撞时，就可以很容易的通过类别对精灵做出相应的处理。</li>
<li><code>设置一个contact(触点) delegate</code>。还记得上面提到的物理世界吗？我们可以在物理世界上设置一个<code>contact delegate</code>，通过该delegate，当两个物体碰撞时，可以收到通知。收到通知后，我们可以通过代码检查物体的类别，如果是怪物和炮弹，那么就做出相应的动作！</li>
</ul>


<p>上面大致介绍了一下游戏策略，下面就来看看如何实现！</p>

<h3><a id="pzjcsx"></a>碰撞检测和物理特性: 实现</h3>

<p>首先在<code>MyScene.m</code>文件顶部添加如下两个常量：</p>

<p>```objc</p>

<p>static const uint32_t projectileCategory     =  0x1 &lt;&lt; 0;
static const uint32_t monsterCategory        =  0x1 &lt;&lt; 1;</p>

<p>```</p>

<p>上面设置了两个类别，记住需要用位(bit)的方式表达——一个用于炮弹，另一个则是怪物。</p>

<p><code>注意:</code>看到上面的语法你可能感到奇怪。在Sprite Kit中category是一个32位整数，当做一个位掩码(bitmask)。这种表达方法比较奇特：在一个32位整数中的每一位表示一种类别(因此最多也就只能有32类)。在这里，第一位表示炮弹，下一位表示怪兽。</p>

<p>接着，在<code>initWithSize</code>中，将下面的代码添加到位置：添加player到场景涉及代码的后面。</p>

<p><code>objc
self.physicsWorld.gravity = CGVectorMake(0,0);
self.physicsWorld.contactDelegate = self;
</code>
上面的代码将物理世界的重力感应设置为0，并将场景设置位物理世界的代理（当有两个物体碰撞时，会受到通知）。</p>

<p>在<code>addMonster</code>方法中，将如下代码添加创建怪兽相关代码后面：</p>

<p><code>objc
monster.physicsBody = [SKPhysicsBody bodyWithRectangleOfSize:monster.size]; // 1
monster.physicsBody.dynamic = YES; // 2
monster.physicsBody.categoryBitMask = monsterCategory; // 3
monster.physicsBody.contactTestBitMask = projectileCategory; // 4
monster.physicsBody.collisionBitMask = 0; // 5
</code>
来看看上面代码意思：</p>

<ol>
<li>为怪兽创建一个对应的物体。此处，物体被定义为一个与怪兽相同尺寸的矩形(这样与怪兽形状比较接近)。</li>
<li>将怪兽设置位<code>dynamic</code>。这意味着物理引擎将不再控制这个怪兽的运动——我们自己已经写好相关运动的代码了。</li>
<li>将categoryBitMask设置为之前定义好的<code>monsterCategory</code>。</li>
<li><code>contactTestBitMask</code>表示与什么类型对象碰撞时，应该通知contact代理。在这里选择炮弹类型。</li>
<li><code>collisionBitMask</code>表示物理引擎需要处理的碰撞事件。在此处我们不希望炮弹和怪物被相互弹开——所以再次将其设置为0。</li>
</ol>


<p>接着在<code>touchesEnded:withEvent:</code>方法中设置炮弹位置的代码后面添加如下代码。</p>

<p>```objc</p>

<p>projectile.physicsBody = [SKPhysicsBody bodyWithCircleOfRadius:projectile.size.width/2];
projectile.physicsBody.dynamic = YES;
projectile.physicsBody.categoryBitMask = projectileCategory;
projectile.physicsBody.contactTestBitMask = monsterCategory;
projectile.physicsBody.collisionBitMask = 0;
projectile.physicsBody.usesPreciseCollisionDetection = YES;</p>

<p>```</p>

<p>在上面的代码中跟之前的类似，只不过有些不同，我们来看看：
1. 为了更好的效果，炮弹的形状是圆形的。
2. <code>usesPreciseCollisionDetection</code>属性设置为YES。这对于快速移动的物体非常重要(例如炮弹)，如果不这样设置的话，有可能快速移动的两个物体会直接相互穿过去，而不会检测到碰撞的发生。</p>

<p>接着，添加如下方法，当炮弹与怪物发生碰撞时，会被调用。注意这个方法是不会被自动调用，稍后会看到我们如何调用它。</p>

<p>```objc
&ndash; (void)projectile:(SKSpriteNode <em>)projectile didCollideWithMonster:(SKSpriteNode </em>)monster {</p>

<pre><code>NSLog(@"Hit");
[projectile removeFromParent];
[monster removeFromParent];
</code></pre>

<p>}
```</p>

<p>当怪物和炮弹发生碰撞，上面的代码会将他们从场景中移除。很简单吧！</p>

<p>下面该实现contact delegate方法了。将如下方法添加到文件中：</p>

<p>```objc
&ndash; (void)didBeginContact:(SKPhysicsContact *)contact
{</p>

<pre><code>// 1
SKPhysicsBody *firstBody, *secondBody;

if (contact.bodyA.categoryBitMask &lt; contact.bodyB.categoryBitMask)
{
    firstBody = contact.bodyA;
    secondBody = contact.bodyB;
}
else
{
    firstBody = contact.bodyB;
    secondBody = contact.bodyA;
}

// 2
if ((firstBody.categoryBitMask &amp; projectileCategory) != 0 &amp;&amp;
    (secondBody.categoryBitMask &amp; monsterCategory) != 0)
{
    [self projectile:(SKSpriteNode *) firstBody.node didCollideWithMonster:(SKSpriteNode *) secondBody.node];
}
</code></pre>

<p>}
```</p>

<p>还记得之前给物理世界设置的<code>contactDelegate</code>吗？当两个物体发生碰撞之后，就会调用上面的方法。</p>

<p>在上面的方法中，可以分为两部分来理解：</p>

<ol>
<li>该方法会传递给你发生碰撞的两个物体，但是并不一定符合特定的顺序(如炮弹在前，或者炮弹在后)。所以这里的代码是通过物体的category bit mask来对其进行排序，以便后续做出正确的判断。注意，这里的代码来自苹果提供的Adventure示例。</li>
<li>最后，检测一下这两个碰撞的物体是否就是炮弹和怪物，如果是的话就调用之前的方法。</li>
</ol>


<p>最后一步，为了编译器没有警告，确保private interface 中添加一下<code>SKPhysicsContactDelegate</code>：
<code>objc
@interface MyScene () &lt;SKPhysicsContactDelegate&gt;
</code>
现在编译并运行程序，可以发现，当炮弹与怪物接触时，他们就会消失！</p>

<h3><a id="sw"></a>收尾</h3>

<p>现在，本文的游戏快完成了。接下来我们就来为游戏添加音效和音乐，以及一些简单的游戏逻辑吧。</p>

<p>苹果提供的Sprite Kit里面并没有音频引擎(Cocos2D中是有的)，不过我们可以通过action来播放音效，并且可以使用AVFoundation播放后台音乐。</p>

<p>在工程中我已经准备好了一些音效和很酷的后台音乐，在本文开头已经将resources添加到工程中了，现在只需要播放它们即可！</p>

<p>首先在<code>ViewController.m</code>文件顶部添加如下import：</p>

<p><code>objc
@import AVFoundation;
</code></p>

<p>上面的语法是iOS 7中新的modules功能 —— 只需要使用新的关键字@import，就可以框架的头文件和库文件添加到工程中，这功能非常方便。要了解更多相关内容，请看到<a href="http://www.raywenderlich.com/store/ios-7-by-tutorials">iOS 7 by Tutorials</a>中的第十章内容中的：What’s New with Objective-C and Foundation。</p>

<p>接着添加一个新的属性和private interface：</p>

<p><code>objc
@interface ViewController ()
@property (nonatomic) AVAudioPlayer * backgroundMusicPlayer;
@end
</code>
接着将下面的代码添加到<code>viewWillLayoutSubviews</code>方法中(在<code>[super viewWillLayoutSubviews]</code>后面)：</p>

<p><code>objc
NSError *error;
NSURL * backgroundMusicURL = [[NSBundle mainBundle] URLForResource:@"background-music-aac" withExtension:@"caf"];
self.backgroundMusicPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:backgroundMusicURL error:&amp;error];
self.backgroundMusicPlayer.numberOfLoops = -1;
[self.backgroundMusicPlayer prepareToPlay];
[self.backgroundMusicPlayer play];
</code></p>

<p>上面的代码会开始无限循环的播放后台音乐。</p>

<p>下面我们来看看如何处理音效。切换到<code>MyScene.m</code>文件中，并将下面这行代码添加到<code>touchesEnded:withEvent:</code>方法的顶部：</p>

<p>```objc
[self runAction:[SKAction playSoundFileNamed:@&ldquo;pew-pew-lei.caf&rdquo; waitForCompletion:NO]];</p>

<p>```</p>

<p>如上，一行代码就可以播放音效了，很简单吧！</p>

<p>下面，我们创建一个新的创建和layer，用来显示<code>你赢了(You Win)</code>或<code>你输了(You Lose)</code>。用模板<code>iOS\Cocoa Touch\Objective-C class</code>创建一个新的文件，将其命名为<code>GameOverScene</code>，并让其继承自<code>SKScene</code>，然后点击<code>Next</code>和<code>Create</code>。</p>

<p>接着用如下代码替换<code>GameOverScene.h</code>中的内容：</p>

<p>```objc</p>

<h1>import &lt;SpriteKit/SpriteKit.h></h1>

<p>@interface GameOverScene : SKScene</p>

<p>&ndash;(id)initWithSize:(CGSize)size won:(BOOL)won;</p>

<p>@end
```</p>

<p>在上面的代码中导入了Sprite Kit头文件，并声明了一个特定的初始化方法，该方法的第一个参数用来定位显示的位置，第二个参数won用来判断用户是否赢了。</p>

<p>接着用下面的代码替换<code>GameOverLayer.m</code>中的内容：</p>

<p>```objc</p>

<h1>import &ldquo;GameOverScene.h&rdquo;</h1>

<h1>import &ldquo;MyScene.h&rdquo;</h1>

<p>@implementation GameOverScene</p>

<p>&ndash;(id)initWithSize:(CGSize)size won:(BOOL)won {</p>

<pre><code>if (self = [super initWithSize:size]) {

    // 1
    self.backgroundColor = [SKColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:1.0];

    // 2
    NSString * message;
    if (won) {
        message = @"You Won!";
    } else {
        message = @"You Lose :[";
    }

    // 3
    SKLabelNode *label = [SKLabelNode labelNodeWithFontNamed:@"Chalkduster"];
    label.text = message;
    label.fontSize = 40;
    label.fontColor = [SKColor blackColor];
    label.position = CGPointMake(self.size.width/2, self.size.height/2);
    [self addChild:label];

    // 4
    [self runAction:
        [SKAction sequence:@[
            [SKAction waitForDuration:3.0],
            [SKAction runBlock:^{
                // 5
                SKTransition *reveal = [SKTransition flipHorizontalWithDuration:0.5];
                SKScene * myScene = [[MyScene alloc] initWithSize:self.size];
                [self.view presentScene:myScene transition: reveal];
            }]
        ]]
    ];

}
return self;
</code></pre>

<p>}</p>

<p>@end
```</p>

<p>上面的代码可以分为4部分内容，我们来分别看看：</p>

<ol>
<li>将背景色设置为白色(与主场景一样颜色)。</li>
<li>根据<code>won</code>参数，将信息设置为"You Won"或"You Lose"。</li>
<li>这里的代码是利用Sprite Kit将一个文本标签显示到屏幕中。如代码所示，只需要选择一个字体，并设置少量的参数即可，也非常简单。</li>
<li>设置并运行有个有两个action的sequence。为了看起来方便，此处我将它们放到一块(而不是为每个action创建单独的一个变量)。首先是等待3秒，然后是利用<code>runBlock</code>action来运行一些代码。</li>
<li>演示了在Sprite Kit中如何过渡到新的场景。首先可以选择任意的一种不同的动画过渡效果，用于场景的显示，在这里选择了翻转效果(持续0.5秒)。然后是创建一个想要显示的场景，接着使用self.view的方法<code>presentScene:transition:</code>来显示出场景。</li>
</ol>


<p>OK，万事俱备，只欠东风了！现在只需要在主场景中，适当的情况下加载game over scene就可以了。</p>

<p>首先，在<code>MyScene.m</code>中导入新的场景：</p>

<p>```objc</p>

<h1>import &ldquo;GameOverScene.h&rdquo;</h1>

<p>```</p>

<p>然后，在<code>addMonster</code>中，用下面的代码替换最后一行在怪物上运行action的代码：</p>

<p>```objc
SKAction * loseAction = [SKAction runBlock:^{</p>

<pre><code>SKTransition *reveal = [SKTransition flipHorizontalWithDuration:0.5];
SKScene * gameOverScene = [[GameOverScene alloc] initWithSize:self.size won:NO];
[self.view presentScene:gameOverScene transition: reveal];
</code></pre>

<p>}];
[monster runAction:[SKAction sequence:@[actionMove, loseAction, actionMoveDone]]];
```</p>

<p>上面创建了一个"lose action"，当怪物离开屏幕时，显示game over场景。</p>

<p>在这里为什么<code>loseAction</code>要在<code>actionMoveDone</code>之前运行呢？
原因在于如果将一个精灵从场景中移除了，那么它就不在处于场景的层次结构中了，也就不会有action了。所以需要过渡到lose场景之后，才能将精灵移除。不过，实际上actionMoveDone永远都不会被调用——因为此时已经过渡到新的场景中了，留在这里就是为了达到教学的目的。</p>

<p>现在，需要处理一下赢了的情况。在private interface中添加一个新的属性：</p>

<p><code>objc
@property (nonatomic) int monstersDestroyed;
</code></p>

<p>然后将如下代码添加到<code>projectile:didCollideWithMonster:</code>的底部：</p>

<p>```objc
self.monstersDestroyed++;
if (self.monstersDestroyed > 30) {</p>

<pre><code>SKTransition *reveal = [SKTransition flipHorizontalWithDuration:0.5];
SKScene * gameOverScene = [[GameOverScene alloc] initWithSize:self.size won:YES];
[self.view presentScene:gameOverScene transition: reveal];
</code></pre>

<p>}
```</p>

<p>编译并运行程序，尝试一下赢了和输了会看到的画面！</p>

<h3><a id="hqhc"></a>何去何从?</h3>

<p>至此<code>Sprite Kit教程：初学者</code>结束！这里可以下到<a href="http://cdn2.raywenderlich.com/downloads/SpriteKitSimpleGame2.zip">完整的代码</a>。</p>

<p>希望本文能帮助你学习Sprite Kit，并写出你自己的游戏！</p>

<p>如果你希望学习更多相关Sprite Kit内容，可以看看这本书：<a href="http://www.raywenderlich.com/store/ios-7-by-tutorials">iOS Games by Tutorials</a>。本书会告诉你需要知道的内容——从物理特性，到磁贴地图，以及粒子系统，甚至是制作自己的关卡编辑器。</p>

<p>……Sprite Kit教程：初学者 3 结束……</p>
]]></content>
  </entry>
  
</feed>
