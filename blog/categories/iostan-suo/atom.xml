<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS探索 | 破船之家]]></title>
  <link href="http://BeyondVincent.github.io/blog/categories/iostan-suo/atom.xml" rel="self"/>
  <link href="http://BeyondVincent.github.io/"/>
  <updated>2013-12-17T22:17:27+08:00</updated>
  <id>http://BeyondVincent.github.io/</id>
  <author>
    <name><![CDATA[破船(BeyondVincent)]]></name>
    <email><![CDATA[beyondvincent@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的iOS成长之路-1-入门]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/12/17/125-my-iOS-growth-path-1/"/>
    <updated>2013-12-17T21:18:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/12/17/125-my-iOS-growth-path-1</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/12/9.png" alt="" /></p>

<!--more-->


<p>注1：我是从2011年8月份开始接触iOS开发的，到现在(2013年12月)有2年多时间了，我计划用3篇文章来总结一下我的iOS成长之路：入门、我的第一个iOS Demo和iOS开发个人提升，本文就是这个系列中的第一篇文章。</p>

<p>注2：本文主要以日志的形式记录我的iOS入门。共计2周时间。由于时间有点久远了，可能有些内容已经过时了。</p>

<h3>第一周</h3>

<p><code>2011年8月15日</code>：今天第一次接触苹果电脑，还是一体机。在开电脑的时候遇到了一个笑话，居然找不到苹果一体机的开机键在哪里。后来还是谷歌大神告诉了我——在背后。这事太囧了。你也跟我遇到一样的笑话吗？</p>

<p><code>2011年8月16日</code>：iOS开发环境熟悉。电脑已经安装配置好了iPhone开发环境，但是作为一名入门级选手，还是从环境的搭建开始比较好。所以我还是先来熟悉一下iOS开发环境。</p>

<p>iPhone开发环境通常有两种</p>

<ol>
<li>一种是在windows xp下通过虚拟机安装苹果操作系统——俗称黑苹果，然后在进行开发环境的配置。</li>
<li>另外一种就是购置一台苹果电脑，在里面配置开发环境（推荐此方法）。</li>
</ol>


<p>在配置开发环境的时候需要用到iOS SDK和Xcode。开发环境提供了一个模拟器，大多数情况下开发的应用可以在模拟器上进行测试，有些涉及到3G网络等实际环境下测试的，就需要一台iPhone手机。也建议及早的把应用部署到真机上进行测试，以避免后期部署出现不可预测的情况，来降低风险。</p>

<p>我今天制定的学习路线是这样的：学习obj-c开发语言，熟悉iPhone-SDK，掌握iOS开发框架。</p>

<p><code>2011年8月17日</code>：今天完成了iPhone下HelloWorld程序编写，初步了解在iPhone中开发应用的流程。还有一些疑问需要解决：delegate的使用、mvc在iPhone下应用、Interface Builder的入门操作、iPhone应用程序框架的了解。</p>

<p><code>2011年8月18日</code>：今天主要学习了如下内容：</p>

<ol>
<li>iOS技术概览： iOS操作系统是iPhone、iPod touch 以及iPad设备的核心，下图是iOS的框架图，由4层构成。其中Cocoa Touch层是我们在今后开发中主要接触的一层，并且建议能用这层提供的服务，尽量不用底层的，因为这样不仅可以减少代码量，也可以减少程序的复杂度。</li>
</ol>


<p><img src="/images/2013/12/8.jpg" alt="" /></p>

<p>2、对iOS中插座变量、动作、视图控制器和视图切换进行了学习。</p>

<p>A:插座变量(IBOutlet):是在视图控制器中定义的变量，通过IBOutlet关键字在控制器里面定义之后，在IB(Interface Builder)里面可以体现出来。</p>

<p>B:控制器中定义的动作主要用来响应IB里面设计好的按钮对应的事件，当然，在响应事件之前，需要需要将IB中的控件事件连接到控制器中定义的动作。</p>

<p>C、视图控制器：视图控制器的主要作用如下1）、创建和管理视图；2）、管理视图上显示的数据；3）、设备方向变化、调整视图大小以适应屏幕；4）、负责视图和模型之间的数据传递</p>

<p>在debug代码的时候遇到一个问题，就是界面上的按钮按下去了，但是写好的动作代码没有执行。得出的结论是：IB和XCode之间没有做好相关的关联（有时候会忘记了进行关联，相信熟能生巧！）</p>

<p><code>2011年8月18日</code>：今天主要学习了iPhone开发中的两项内容，键盘的输入和屏幕旋转。</p>

<p>1、键盘输入：在iPhone中，用户数据的输入主要是通过触摸键盘。由于在iPhone上的应用程序受到屏幕大小的限制，有时候当输入面板弹出来的时候，会将文本控件遮挡，这时候就需要对程序进行调整。首先是通过观察键盘的状态（显示\隐藏），然后对UI重新进行布局。观察键盘状态的时候，用到了iOS里面提供的NSNotificationCenter,它的原理就是观察者模式，提供了注册、通知、删除事件三个重要功能，当键盘状态发生改变了，就是通过它告诉我们的，然后我们在根据具体情况进行UI调整。实际上，NSNotificationCenter在iOS里面用得比较多，比如说网络状况的、打电话的状态等一些系统属性都会在这里获得。</p>

<p>键盘状态的监听关键代码：</p>

<p>```objc
[[NSNotificationCenter defaultCenter]</p>

<pre><code>     addObserver:self
     selector:@selector(keyboardWillShow:)
     name:UIKeyboardWillShowNotification
     object:self.view.window];
</code></pre>

<p>[[NSNotificationCenter defaultCenter]</p>

<pre><code>     addObserver:self
     selector:@selector(keyboardWillHide:)
     name:UIKeyboardWillHideNotification
     object:nil];
</code></pre>

<p>```</p>

<p>2、屏幕旋转：在iPhone手机上，可能会面对不同方向屏幕上显示的UI要保持一致性。在此，我们需要知道屏幕何时方向改变了，然后对UI进行调整。</p>

<p><code>一周学习总结</code>：通过这一周的iPhone开发学习，给我的感觉是在iPhone上做应用比较方便快捷，特别是做UI设计的时候，SDK提供了良好的环境（IB），让我在入门的阶段也能够感觉到乐趣。这不得不抱怨一下Symbian了，开发入门门槛高，UI界面开发忒不友好，程序调试让人奔溃。</p>

<p><code>下周计划</code>：</p>

<ol>
<li>系统的学习obj-c语言。obj-c语言是iOS中推荐使用的开发语言。</li>
<li>学习iOS中的视图控制器、页签栏控制器、导航控制器等，以便能构建出不同类型的应用程序。</li>
<li>学习表视图的使用，SQLite3数据库的了解，文件的读写等。</li>
</ol>


<h3>第二周</h3>

<p><code>2011年8月22日</code>：今天主要学习了Objective-C 里面的如下内容（协议和分类还没有详细的学习）：</p>

<ol>
<li>类和对象（类的定义、继承、实例化、类内存的释放）。类的定义与C++等面向对象语言定义类似，都是先声明，然后实现。不过Objective-C只支持单继承，这跟C++有区别。类的扩展可以通过继承、分类和协议来进行。</li>
<li>消息。在Objective-C里面，想让对象完成某个处理时，需要给对象发送一条消息，这类似与C++里面的函数调用，但是与之有很大的区别，函数通常是静态绑定的，在编译程序的时候函数所执行的代码已经确定（多态除外）。而消息则是在执行时才确定的。</li>
<li>内存管理。通过引用计数和自动释放池来对内存进行管理。</li>
<li>类对象。在Objective-C中类自身就是对象，经常用来实例化一个对象，如下面的消息使用（类作为消息的接受者）：[Class alloc];</li>
</ol>


<p>Objective-C在C的基础上，实现了面向对象。其比较大的特点有：内存管理使用引用技术、自动释放池和运行时确定消息执行者、协议、分类等。</p>

<p><code>2011年8月23日</code>：今天主要学习了Objective-C的如下内容：</p>

<pre><code> 分类、协议、属性和页签栏视图使用学习
</code></pre>

<ol>
<li>分类：当我们想给某个类加一些方法时，如果不想通过继承这个类来实现，可以通过分类给这个类加一些行为，这个过程与继承相比更加轻量化。下面的代码演示了如何进行分类：</li>
</ol>


<p>```objc
@interface NSString (SubClass)
&ndash;(id) DoSomething();
@end</p>

<p>@implementation NSString (SubClass)
&ndash;(id) DoSomething(){
// do something&hellip;
}
@end
```</p>

<p>上面的代码中，第一行，SubClass为分类名字，NSString为需要增加行为的类。分类的实现与一般类的实现类似。</p>

<ol>
<li>协议：协议是一组预定义的行为方法，这类似于java中的接口。协议分为正式协议和非正式协议，前者为采用该协议的类必须实现它定义的方法，后者为可选。协议的定义如下代码所示：</li>
</ol>


<p><code>objc
@protocol HandleEvent
{
-(void) HandleKeyUpEvent;
-(void) HandleKeyDownEvent : (id) sender;
}
</code></p>

<ol>
<li>属性：属性的作用是用来访问对象的实例变量。使用方法是在头文件(.h)中用@property来声明一个属性，然后在实现文件(.m)中用@synthesize来告诉编译器自动生成某个变量的访问器方法。如下：
```objc
@property (nonatomic, retain) NSString *name;</li>
</ol>


<p>@synthesize name;
```</p>

<ol>
<li>页签栏视图使用：使用sdk提供的Tab Bar Application模板来创建页签栏视图，然后可以通过自己加入页签栏项目（TarBarItem控件）。</li>
</ol>


<p><code>2011年8月24日</code>：今天主要学习了基于导航栏视图的应用程序开发和对学习iOS中的视图控制器进行了一个回顾</p>

<ol>
<li>基于导航栏视图的应用程序开发。页签栏应用程序适用于包含多个视图，用户可以在不同的视图间进行快速切换，这些视图涉及到的数据迁移关系不强。如果我们遇到的数据具有层次关系，比如：邮件列表视图和邮件详细信息视图两个画面具有紧密的逻辑关系【选择邮件列表中的某邮件，进入到邮件详细信息】，此时使用基于导航的视图应用程序是最好的选择。</li>
</ol>


<p>在导航应用程序中，使用的是UINavigationController特殊视图控制器，这方便管理层次内容的导航。</p>

<ol>
<li>iOS中视图控制器学习回顾。iOS中的视图控制器主要作用是创建和管理视图，负责视图和模型中数据的交互和响应视图中的交互事件。UIViewController是iOS里面的视图控制器基本类型，还有UINavigationController和UITabBarController等集合控制器类型的视图控制器。</li>
</ol>


<p><code>2011年8月25日</code>：今天主要学习了如下内容：表视图(UITableView)sqlite数据库的使用</p>

<ol>
<li><p>表视图(UITableView)的使用：表视图一般用在基于导航视图控制器应用中，在UIKit框架中，表视图以行的形式展现UI，其中每一行我们可以对其进行个性化，比如添加图标之类的。在我们的程序中也会经常用到表视图，在使用表视图的时候我们要注意两个概念：1）表视图的数据源(UITableViewDataSource)，主要是为表视图提供数据的一个协议。2）表视图代理(UITableViewDelegate)，主要用来处理表视图的一些事件，并对表视图进行一些编辑和删除操作。</p></li>
<li><p>iPhone中sqlite数据库的使用。sqlite支持在iPhone中使用。sqlite是一款轻型的数据库，主要运用在嵌入式设备中，在使用中，不需要对其进行配置和管理配置，并且可以支持到2TB大的数据文件。不仅支持常用的sql语句：增删改查，还有其它一些丰富的功能：事物等。
 在iPhone中使用sqlite数据库与在其它平台中使用sqlite数据库基本不需要变化多少。这也方便在不同平台间进行复用。
 基本使用步骤：创建数据库，创建表，插入数据，查询数据。
 打开数据库代码：
通过调用sqlite3_open函数，打开一个已经存在的数据库，如果不存在，则创建它。如下代码所示：</p></li>
</ol>


<p>```objc
&ndash;(void) openDB {</p>

<pre><code>    if (sqlite3_open([[self filePath] UTF8String], &amp;db) != SQLITE_OK) {
            sqlite3_close(db);
            NSAssert(0, @"Database failed to open.");
    }
</code></pre>

<p>}
```</p>

<p>创建表和插入表：组合出了sql语句，然后执行sqlite提供的方法sqlite3_exec即可。如果过程中出现错误，sqlite3_exec方法也会有错误反馈。
查询内容：先组合一个查询语句，例如：@&ldquo;SELECT * FROM TABLENAME"，然后实例化一个sqlite3_stmt对象，查询出来的数据放在这里面，再通过调用sqlite3_prepare_v2，和sqlite3_step两个方法对数据进行查询，查询出来的内容还需要sqlite3_column_text方法进行内容的提取。</p>

<p><a href="http://www.sqlite.org/">sqlite</a> 这是sqlite的官方网站，相关的内容，我们在使用过程中，可以在这里进行查阅。</p>

<p><code>2011年8月26日</code>：今天主要学习了如下内容：iOS中文件的使用。
iOS提供了如下方法来进行文件的读写和管理</p>

<ol>
<li>Foundation 框架：</li>
</ol>


<p>1)如果应用程序的数据表现形式为属性列表（property list），则可以使用NSPopertyListSerializaitonAPI把属性列表转换为NSData对象，然后可以使用NSData类提供的方法把数据写到磁盘中。</p>

<p>2) Foundation 框架提供了NSFileHandle类进行文件的存取操作，也提供了NSFileManager类在文件系统里面进行文件的创建和操作(删除，重命名等)。</p>

<ol>
<li>Core OS：
1)支持C语言的接口对文件进行操作：fopen、fread和fwrite（需要import头文件：stdio.h）
2)支持mmap和munmap，以高效的load大容量文件到内存中，以进行内容的存取。(需要import头文件：mman.h)。</li>
</ol>


<p>下面是一些文件访存的原则，我们在创建文件或者把数据写入到文件中时，最好遵循下面的原则：
写入disk中的数据量最小化。文件的操作相对来说慢，并且是写到Flash disk中，Flash disk的寿命是有限（可擦写约1000000次）的。一些具体的细节有利于我们最小化对文件相关的操作：</p>

<p>1)只写文件修改过的那一部分。避免把只修改了几个字节的文件全部进行写操作。</p>

<p>2)当定义文件内容格式时，把需要平凡修改的内容进行分组，从而在每一次进行disk写操作时，最小化需要写入到disk中的块数。</p>

<p>3)如果是结构化内容组成的数据进行随机存取，则存储在SQLite数据库中。特别是，当处理的数据可能会增长到几百M时，这非常重要。</p>

<p>避免把缓存文件写到disk中。此规则的唯一例外是，当应用程序退出，下次再启动时，需要上次退出时的程序状态，则可以把程序退出时的状态进行存储。</p>

<p><code>基于iPhone OS-based设备的文件系统是区分大小写的，这有别于xp系统，无论什么时候，只要是在进行文件名的编码时，必须确保大小写的精确匹配，否则代码不能打开或访问文件。</code></p>

<p><code>一周学习总结</code></p>

<p>本周主要学习了如下内容：</p>

<ol>
<li>Objective-C语言学习，对iOS中开发使用的语言进行了全面的学习，了解了其中的基本使用。</li>
<li>页签栏视图控制器、导航栏视图控制器和表视图的使用，视图控制器在iOS应用中，起到非常重要的作用，是与UI进行衔接的重要部件。</li>
<li>iOS中sqlite的使用，文件的操作。在iOS中，我们可以使用sqlite进行数据的存取，iOS也提供了对文件的操作。</li>
<li>iPhone应用程序的首选项，在iOS中，我们可以把应用程序的一些配置数据存储在首选项中，通过首选项，进行配置。 通过本周的学习，对iOS开发有了进一步的掌握。</li>
</ol>


<p><code>下周学习计划</code></p>

<ol>
<li>学习iOS中的网络开发、多线程、事件处理和媒体（图像&amp;声音），进一步学习iOS中的UI</li>
<li>开发一个iOS Demo</li>
</ol>


<h3>第三周</h3>

<p>没有第三周啦！！！
上周计划iOS中的网络开发、多线程、事件处理和媒体（图像&amp;声音）就在后续的日子里面学习吧。</p>

<h3>总结</h3>

<p>iOS开发的学习我感觉还是比较容易上手的，由于开发环境的限制，对于初学者来说最大的困难可能在于设备，不过相信想要学习该平台的人来说，初期的投入还是值得的。还记得毕业那会刚参加工作就学习Symbian开发，Symbian虽然有3个大分支：诺基亚支持的S60，索爱的UIQ和DoCoMo的MOAP，它们都由全球的通信巨头掌控着，但是Symbian对于初学者太难以入门了，这无疑将许多开发者挡在大门之外。当时一个HelloWorld例子就足足让我啃上一个月。紧接着二阶段构造、活动对象、调度器等都是让人头晕目眩的东西。其实心里对Symbian一直恋恋不忘，这不又多说了几句，哎！大浪淘沙！</p>

<p>下一篇文章我将介绍第三周和第四周做的事情：我写的第一个iOS Demo。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS探索：iOS程序的Build过程]]></title>
    <link href="http://BeyondVincent.github.io/blog/2013/11/21/123-build-process/"/>
    <updated>2013-11-21T22:18:00+08:00</updated>
    <id>http://BeyondVincent.github.io/blog/2013/11/21/123-build-process</id>
    <content type="html"><![CDATA[<p><img src="/images/2013/11/45.png" alt="" /></p>

<!--more-->


<p>注1：本文由破船译自<a href="http://www.objc.io/issue-6/build-process.html">The Build Process</a>。</p>

<p>注2：</p>

<p>```
本文将轻度解密Xcode build日志，还原iOS程序build的过程。
另外将介绍如何对build过程的控制，进而定制出自己希望的流程，
例如通过Build phase的定制，给app icon打水印(包括版本号和日期)。</p>

<p>通过对工程文件的解读，为你揭开工程文件(.pbxproj)与
build settings的关系。这对于解决工程文件的merge冲突非常有帮助。</p>

<p>PS：实际上各开发平台的build过程都比较相似，如果你熟悉了
某个平台的build过程，那么同样的原理也适用于别的平台。
可以说换汤不换药，本质是一样的。
```</p>

<p>下面开始吧：</p>

<p>本文目录如下所示：</p>

<ol>
<li><a href="#1">解密Build日志</a></li>
<li><a href="#2">Build过程的控制</a></li>
<li><a href="#3">工程文件</a></li>
<li><a href="#4">小结</a></li>
</ol>


<p>当我们进行开发时，如果需要运行程序，只要在Xcode中点击运行按钮(这个按钮看起来有点像在播放音乐)，过一会，我们的程序就会运行在设备或者模拟器上了，看似简单的操作过程，不过在这背后隐藏了许多步骤！当然，有时候也会遇到一些错误。</p>

<p>本文，我将从稍微高一点的角度来解读整个Build过程，并探索一下Build过程与Xcode界面上显示的project setting有多大关系。当然，为了更加深入的了解每一步实际执行的任务，我会适当的引入一些别的文章。</p>

<h3><a id="1"></a>解密Build日志</h3>

<p>为了了解Xcode build过程的内部工作原理，我们首先把突破点放在完整的log文件上。打开<code>Log Navigator</code>，从列表中选择一个Build，Xcode就会通过很漂亮的一种格式将log文件显示出来。如下图所示：</p>

<p><img src="/images/2013/11/41.png" alt="" /></p>

<p>默认情况下，XCode会把大量的log信息隐藏起来，你只需要点击选中某条log，然后点击右边的展开按钮，就能看到该条log的详细信息了。当然，你也可以选中一条或者多条日志，然后通过Cmd+C，就能将相关的所有文本信息拷贝到粘贴板上。另外，还可以通过菜单Editor中的<code>Copy transcript for shown results</code>将所有的log信息复制到粘贴板上。</p>

<p>在我这儿的示例中，将近有10000行log信息(当然，大多数信息是由OpenSSL带来的，并非来自我们的代码)。下面我们就开始吧！</p>

<p>首先，你可能会发现输出的log信息，被工程中对应的target分割开了：</p>

<p><code>objc
Build target Pods-SSZipArchive
...
Build target Makefile-openssl
...
Build target Pods-AFNetworking
...
Build target crypto
...
Build target Pods
...
Build target ssl
...
Build target objcio
</code></p>

<p>在我这的工程中有好几个依赖项：如包含在Pods中的AFNetworking 和 SSZipArchive, 已经以子工程形式存在的OpenSSL等。</p>

<p>针对这里的每个target，Xcode都会执行一些列的操作，以将相关的源代码转换为机器可读的二进制(于所选平台相关)。我们来亲密接触一下第一个targetSSZipArchive吧。</p>

<p>在这个target的log输出中，我们可以看到每个任务执行的详细情况。例如，第一个是处理一个预编译头文件(为了增加其可读性，我省略了许多细节)：</p>

<p>```objc
(1) ProcessPCH /&hellip;/Pods-SSZipArchive-prefix.pch.pch Pods-SSZipArchive-prefix.pch normal armv7 objective-c com.apple.compilers.llvm.clang.1_0.compiler</p>

<pre><code>(2) cd /.../Dev/objcio/Pods
    setenv LANG en_US.US-ASCII
    setenv PATH "..."
(3) /.../Xcode.app/.../clang 
        (4) -x objective-c-header 
        (5) -arch armv7 
        ... configuration and warning flags ...
        (6) -DDEBUG=1 -DCOCOAPODS=1 
        ... include paths and more ...
        (7) -c 
        (8) /.../Pods-SSZipArchive-prefix.pch 
        (9) -o /.../Pods-SSZipArchive-prefix.pch.pch
</code></pre>

<p>```</p>

<p>在build过程中，每个任务都会出现类似上面的这些log信息，我们就通过上面的log信息了解详情吧。</p>

<ol>
<li>每个log都会以这样的一行来对任务进行描述。</li>
<li>接着下面带缩进的这3行会被输出。此处，修改了工作路径，并对PANG和PATH环境变量进行设置。</li>
<li>这里才是真正焕发出魔力的地方。为了处理一个<code>.pch</code>文件，调用了clang，并且附带了大量的选项。这行log信息显示出了所有的调用参数，我们稍微看几个参数吧：</li>
<li>-x标示符用来指定语言，此时是<code>objective-c-header</code>。</li>
<li>目标架构指定为<code>armv7</code>。</li>
<li>标示#defines的内容已经被添加了。</li>
<li>-c标示符用来告诉clang具体如何运行。-c意味着：运行预处理器、词法分析、类型检查LLVM的生成和优化，以及特定target相关汇编代码的生成阶段，最后，运行这个汇编代码以生成.o目标文件。</li>
<li>输入文件。</li>
<li>输出文件。</li>
</ol>


<p>虽然有大量的log信息，不过我不会把每个log信息都做详解。我们的目的是让你了解在build过程中，完整的了解什么工具被调用，以及都使用了什么参数。</p>

<p>针对这个target，虽然只有一个.pch文件，但实际上这里对objective-c-header文件处理了两次。下面来看看log信息告诉我们的详细情况：</p>

<p><code>objc
ProcessPCH /.../Pods-SSZipArchive-prefix.pch.pch Pods-SSZipArchive-prefix.pch normal armv7 objective-c ...
ProcessPCH /.../Pods-SSZipArchive-prefix.pch.pch Pods-SSZipArchive-prefix.pch normal armv7s objective-c ...
</code>
可以看到，build了两种target：armv7和armv7s，所以clang为每种架构处理了一次这个文件。</p>

<p>紧接着预编译头文件的处理之后，我们可以找到SSZipArchive target相关的其它一些任务：</p>

<p><code>objc
CompileC ...
Libtool ...
CreateUniversalBinary ...
</code>
通过名称，我们基本能够知道个大概：<code>CompileC</code>用来编译.m和.c文件，<code>Libtool</code>根据目标文件创建出一个库，而<code>CreateUniversalBinary</code>则将上一阶段产生的两个.a文件(对应着两个不同的架构)合并为一个通用的二进制文件(可以运行在armv7和armv7s上)。</p>

<p>上面这些类似的步骤会出现在工程中所有其它的依赖项中。</p>

<p>当所有的依赖项都准备好了，就可以开始构建我们程序的target了。针对该target输出的log信息包含了之前没有出现过的内容，这些内容非常有价值：</p>

<p><code>objc
PhaseScriptExecution ...
DataModelVersionCompile ...
Ld ...
GenerateDSYMFile ...
CopyStringsFile ...
CpResource ...
CopyPNGFile ...
CompileAssetCatalog ...
ProcessInfoPlistFile ...
ProcessProductPackaging /.../some-hash.mobileprovision ...
ProcessProductPackaging objcio/objcio.entitlements ...
CodeSign ...
</code></p>

<p>在上面的任务中，可能Ld不能一眼看出是什么意思，此处它是一个linker工具，跟libtool类似。实际上libtool会简单的调用ld和lipo。而ld用来构建可执行文件。更多编译和链接相关的文章可以看看 <a href="http://www.objc.io/issue-6/mach-o-executables.html">Daniel</a> 和 <a href="http://www.objc.io/issue-6/compiler.html">Chris</a>写的。</p>

<p>上面这些步骤，实际上都会调用相关的命令行工具来做实际的工作，这跟之前我们看的步骤ProcessPCH类似。至此，我将不会继续介绍这些log信息了，我将带来大家从另外一个不同的角度来继续探索这些任务：Xcode是如何知道哪些任务需要被执行？</p>

<h3><a id="2"></a>Build过程的控制</h3>

<p>当你选中在Xcode 5中的一个工程时，project editor会在顶部显示出6个tabs：General, Capabilities, Info, Build Settings, Build Phases 以及 Build Rules。如下图所示：</p>

<p><img src="/images/2013/11/42.png" alt="" /></p>

<p>其中最后3项与build过程的相关度最大。</p>

<h4>Build Phases</h4>

<p>Build Phases代表着将代码构建为一个可执行文件的规则。它描述了build过程中必须执行的不同任务。</p>

<p><img src="/images/2013/11/43.png" alt="" /></p>

<p>首先，指定了target的依赖项。这将告诉build系统在当前target可以build之前，必须先build target的依赖项。实际上这并不属于真正的build phase，在这里，Xcode只不过将其与build phase显示到一块罢了。</p>

<p>接着是一个CocoaPods相关的脚本需要在build phase执行——更多CocoaPods相关信息可以查看<a href="http://www.objc.io/issue-6/cocoapods-under-the-hood.html">Michele的文章</a>。</p>

<p>然后在<code>Compile Sources</code>中指定了所有必须进行编译的文件。更多相关内容我们将在build rules和build settings中研究。在<code>Compile Sources</code>中指定的文件将根据这些rule和setting被处理。</p>

<p>当编译结束，下一步就是将所有的内容链接到一块：<code>Link Binary with Libraries</code>。在这里面列出了所有的静态库和动态库，这些库会与上面编译阶段生成的目标文件进行链接。实际上静态库和动态库的处理过程有非常大的区别，相关内容可以参考Daniel的文章 <a href="http://www.objc.io/issue-6/mach-o-executables.html">Mach-O executables</a>。</p>

<p>当链接完成之后，build phase中最后需要处理的就是将静态资源（例如图片和字体）拷贝到app bundle中。需要注意的是，如果图片资源是PNG格式，那么不仅仅对其进行拷贝，还会做一些优化(如果build settings中的PNG优化是打开的)。</p>

<p>虽然静态资源的拷贝是build phase中的最后一步，但这并不代表build过程已经完成了。例如，还没有进行code signing(这并不是build phase考虑的范畴)，code signing属于build步骤中的最后一步<code>Packaging</code>。</p>

<h4>定制Build Phases</h4>

<p>至此，你已经完全可以掌控build phases相关内容(先不考虑默认的设置项)，例如，你可以在build phases中添加运行自定义脚本，就像<a href="http://www.objc.io/issue-6/cocoapods-under-the-hood.html">CocoaPods</a>使用的一样，来做额外的工作。当然也可以添加一些资源的拷贝任务，当你需要将某些确定的资源拷贝到制定的target目录中，这非常有用。</p>

<p>另外你可以通过定制build phase来添加带有水印(包括版本号和commit hash)的app icon。只需要在build phase中添加一个<code>Run Script</code>，然后用下面的命令来获取版本号和commit hash：</p>

<p><code>objc
version=`/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${INFOPLIST_FILE}"`
commit=`git rev-parse --short HEAD`
</code></p>

<p>然后可以使用ImageMagick来修改app icon。这里有一个<a href="https://github.com/krzysztofzablocki/IconOverlaying">完整的示例</a>，可以参考。</p>

<p>如果你希望编写的代码比较简洁点，那么可以添加一个<code>Run Script</code>，如果一个源文件超过指定行数，就发出警告。如下代码所示，设置的行数为200。</p>

<p><code>objc
find "${SRCROOT}" \( -name "*.h" -or -name "*.m" \) -print0 | xargs -0 wc -l | awk '$1 &gt; 200 &amp;&amp; $2 != "total" { print $2 ":1: warning: file more than 200 lines" }'
</code></p>

<h4>Build Rules</h4>

<p>Build rules指定了不同文件类型该如何编译。一般来说，开发者并不需要修改这里面的内容。如果你需要对特定的文件类型添加处理方法，那么可以在此处天剑一条新的规则。</p>

<p>一条build rule指定了其应用于那种文件类型，该文件类型是如何被处理的，以及输出内容被放置到何处。比方说，我们创建了一条预处理规则，该规则将Objective-C的实现文件当做输入，然后解析文件内部的注释内容，最后再输出一个.m文件，文件中包含了生成的代码。由于我们不能将.m文件既当做输入又当做输出，所以我使用了.mal后缀，定制的build rule如下所示：</p>

<p><img src="/images/2013/11/44.png" alt="" /></p>

<p>上面的规则应用于所有后缀为*.mal的文件，这些文件会被自定义的脚本处理(调用我们的预处理器，并附带上输入和输出参数)。最后，该规则告诉build system在哪里可以找到此规则的输出文件。</p>

<p>由于这里的输出是一个.m文件，那么build使这些.m文件会被编译处理(就如刚开始介绍的那些预处理步骤)。</p>

<p>在脚本中，我使用了少量的变量来指定正确的路径和文件名。在苹果的<a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html#//apple_ref/doc/uid/TP40003931-CH3-SW105">Build Setting Reference.</a>文档中可以找到所有可用的变量。build过程中，要想观察所有已存在的环境变量，你可以添加一个<code>Run Script</code> build phase，并勾选上<code>Show environment variables in build log</code>。</p>

<h4>Build Settings</h4>

<p>至此，我们已经了解到build phases是如何被用来定义build 过程的步骤，以及build rules是如何指定哪些文件类型在编译阶段需要被预处理。在build settings中，我们可以配置每个任务(之前在build log输出中看到的任务)的详细内容。</p>

<p>在这里，你会发现build 过程的每一个阶段，都有许多选项：从编译、链接一直到code signing和packaging。注意，settings被分割为不同的部分，大部分会于build phases有关联，有时候也会指定编译的文件类型。</p>

<p>这些选项基本都有不错的文档介绍，你可以在右边面板中的quick help inspector或者 <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html#//apple_ref/doc/uid/TP40003931-CH3-SW105">Build Setting Reference</a>中查看到。</p>

<h3><a id="3"></a>工程文件</h3>

<p>上面我们介绍的所有内容都被保存在工程文件(.pbxproj)中，除了其它一些工程相关信息(例如file groups)，我们很少会深入该文件内部，除非在代码merge时发生冲突，或许会进去看看。</p>

<p>我建议你用文本编辑器打开一个工程文件，从头到尾的看一遍里面的内容。它的可读性非常高，里面的许多内容一看就知道什么意思了，不会存在太大的问题。通过阅读并完全理解工程文件，这对于合并工程文件的冲突非常有帮助。</p>

<p>首先，我们来看看文件中叫做<code>rootObject</code>的entry。在我的工程中，如下所示：</p>

<p><code>objc
rootObject = 1793817C17A9421F0078255E /* Project object */;
</code></p>

<p>根据这个ID(1793817C17A9421F0078255E)，我们可以找到main工程的定义：</p>

<p>```objc
/<em> Begin PBXProject section </em>/</p>

<pre><code>1793817C17A9421F0078255E /* Project object */ = {
    isa = PBXProject;
</code></pre>

<p>&hellip;
<code>``
在这部分section中包含了一些keys，顺从这些key，我们可以了解到更多关于这个工程文件的组成。例如，</code>mainGroup<code>指向了root file group。如果你按照这个思路，你可以快速了解到在.pbxproj文件中工程的结构。下面我要来介绍一些与build过程相关的内容。其中</code>target` key指向了build target的定义：</p>

<p>```objc
targets = (</p>

<pre><code>1793818317A9421F0078255E /* objcio */,
170E83CE17ABF256006E716E /* objcio Tests */,
</code></pre>

<p>);
```</p>

<p>根据第一个id，我们找到一个target的定义：</p>

<p>```objc
1793818317A9421F0078255E /<em> objcio </em>/ = {</p>

<pre><code>isa = PBXNativeTarget;
buildConfigurationList = 179381B617A9421F0078255E /* Build configuration list for PBXNativeTarget "objcio" */;
buildPhases = (
    F3EB8576A1C24900A8F9CBB6 /* Check Pods Manifest.lock */,
    1793818017A9421F0078255E /* Sources */,
    1793818117A9421F0078255E /* Frameworks */,
    1793818217A9421F0078255E /* Resources */,
    FF25BB7F4B7D4F87AC7A4265 /* Copy Pods Resources */,
);
buildRules = (
);
dependencies = (
    1769BED917CA8239008B6F5D /* PBXTargetDependency */,
    1769BED717CA8236008B6F5D /* PBXTargetDependency */,
);
name = objcio;
productName = objcio;
productReference = 1793818417A9421F0078255E /* objcio.app */;
productType = "com.apple.product-type.application";
</code></pre>

<p>};
```</p>

<p>其中<code>buildConfigurationList</code>指向了可用的配置项，一般包括<code>Debug</code>和<code>Release</code>。根据debug对应的id，我们可以找到build setting tab中所有选项存储的位置：</p>

<p>```objc
179381B717A9421F0078255E /<em> Debug </em>/ = {</p>

<pre><code>isa = XCBuildConfiguration;
baseConfigurationReference = 05D234D6F5E146E9937E8997 /* Pods.xcconfig */;
buildSettings = {
    ALWAYS_SEARCH_USER_PATHS = YES;
    ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME = LaunchImage;
    CODE_SIGN_ENTITLEMENTS = objcio/objcio.entitlements;
</code></pre>

<p>&hellip;
```</p>

<p>而<code>buildPhases</code>属性则简单的列出了在Xcode中定义的所有build phases。这非常容易识别出来(Xcode中的参数使用了它们原本真正的名字，并以C风格进行注释)。</p>

<p><code>buildRules</code>属性是空的：因为在该工程中，我没有自定义build rules。</p>

<p><code>dependencies</code>列出了在Xcode build phase tab中列出的target依赖项。</p>

<p>没那么吓人，不是吗？工程中剩下的内容就留给你去当做练习来了解吧。只需要顺着ID走，即可，一旦你找到了敲门，理解了Xcode中工程设置的不同section，那么对于merge工程文件的冲突时，将变得非常简单。甚至可以在GitHub中就能阅读工程文件，而不用将工程文件clone到本地，并用Xcode打开。</p>

<h3><a id="4"></a>小结</h3>

<p>当今的软件是都用其它复杂的一些软件和资源开发出来的，例如library和build工具等。反过来，这些工具是构建于底层架构的，这犹如剥洋葱一样，一层包着一层。虽然这样一层一层的，给人感觉太复杂，但是你完全可以去深入了解它们，这非常有助于你对软件的深入理解，实际上当你了解之后，这并没有想象中的那么神奇，只不过它是一层一层堆砌起来的，每一层都是基于下一层构建起来的。</p>

<p>在这里，我们只是轻微的探究了一下build过程，当我们点击Xcode中的允许按钮时，并没必要深入了解内部具体发生了什么。只需要了解到build的过程，以及可控的一些操作顺序即可。当然，要想进一步深入了解，可以试着阅读其它一些文章。</p>
]]></content>
  </entry>
  
</feed>
